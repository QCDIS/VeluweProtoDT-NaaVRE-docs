{
  "cells": {
    "p16": {
      "title": "Forecast bud burst-cherine-jantzen-at-gmail-com",
      "task_name": "forecast-bud-burst-cherine-jantzen-at-gmail-com",
      "original_source": "\nload(validation_all_zScores_file)\n\nscenario_colours <- c(\"measured\" = \"#D53E4F\", \"RCP45\" = \"#B9A6E2\" , \"1pt5degC_OS\" = \"#FFD560\",\n                      \"2pt0degC\" = \"#48d3d3\", \"RCP85\" = \"#FC8D59\", \"1pt5degC\" = \"#3288BD\")\n\n\n\nforecasting_budburst <- function(scenario_temp,\n                                 linear_model,\n                                 use_zScores = c(\"yes\", \"no\")){\n\n  if(use_zScores == \"yes\"){\n\n    model_coefficients_bb_temp_zScore <- linear_model$coefficients\n    vcov_bb_temp_zScore <- stats::vcov(linear_model)\n\n    forecasted_budburst_perRun <- NULL\n    forecasted_budburst_smoothend <- NULL\n\n    for (r in unique(scenario_temp$run)) {\n\n      df <- scenario_temp %>%\n        dplyr::filter(run == r)\n\n      X <- stats::model.matrix(~ zScore, data = df)\n      predicted <- X %*% model_coefficients_bb_temp_zScore\n      varPred <- diag(X %*% vcov_bb_temp_zScore %*% t(X))\n      sePred <- sqrt(varPred)\n\n      df1 <- data.frame(df,\n                        predicted_bb_date = predicted,\n                        varPred = varPred,\n                        sePred = sePred)\n\n      df1$Con95Pred <- 1.96 * df1$sePred\n\n      forecasted_budburst_perRun <- rbind(forecasted_budburst_perRun, df1)\n\n\n      # 11 year sliding-window to smooth forecasting\n      df2 <- df1 %>% dplyr::distinct(year, .keep_all = TRUE)\n\n      forecasted_budburst_smoothend_window <- NULL\n\n      for (s in (min(df2$year) + 5) : (max(df2$year) - 5)) {\n\n        Data_s <- df2 %>% dplyr::filter(year >= (s - 5) & year <= (s + 5))\n\n        Data_new <- data.frame(year = s,\n                               scenario_name = unique(df2$scenario_name),\n                               run = r,\n                               mean_pred_bb_window = mean(Data_s$predicted_bb_date),\n                               sd = sd(Data_s$predicted_bb_date),\n                               error = (qnorm(0.95) * sd(Data_s$predicted_bb_date))/sqrt(nrow(Data_s)))\n\n        Data_new <- Data_new[stats::complete.cases(Data_new), ]\n\n        forecasted_budburst_smoothend_window <- rbind(forecasted_budburst_smoothend_window, Data_new)\n      }\n\n      forecasted_budburst_smoothend <- rbind(forecasted_budburst_smoothend, forecasted_budburst_smoothend_window)\n  }\n\n    return(tibble::lst(forecasted_budburst_perRun, forecasted_budburst_smoothend))\n\n  } else {\n\n    # use mean temperatures\n\n    model_coefficients_bb_temp <- linear_model$coefficients\n    vcov_bb_temp <- stats::vcov(linear_model)\n\n    forecasted_budburst_perRun <- NULL\n    forecasted_budburst_smoothend <- NULL\n\n    for (r in unique(scenario_temp$run)) {\n\n      df <- scenario_temp %>%\n        dplyr::filter(run == r)\n\n      X <- stats::model.matrix(~ mean_temperature, data = df)\n      predicted <- X %*% model_coefficients_bb_temp\n      varPred <- diag(X %*% vcov_bb_temp %*% t(X))\n      sePred <- sqrt(varPred)\n\n      df1 <- data.frame(df,\n                        predicted_bb_date = predicted,\n                        varPred = varPred,\n                        sePred = sePred)\n\n      df1$Con95Pred <- 1.96 * df1$sePred\n\n      forecasted_budburst_perRun <- rbind(forecasted_budburst_perRun, df1)\n\n\n      # 11 year sliding-window to smooth forecasting\n      df2 <- df1 %>% dplyr::distinct(year, .keep_all = TRUE)\n\n      forecasted_budburst_smoothend_window <- NULL\n\n      for (s in (min(df2$year) + 5) : (max(df2$year) - 5)) {\n\n        Data_s <- df2 %>% dplyr::filter(year >= (s - 5) & year <= (s + 5))\n\n        Data_new <- data.frame(year = s,\n                               scenario_name = unique(df2$scenario_name),\n                               run = r,\n                               mean_pred_bb_window = mean(Data_s$predicted_bb_date),\n                               sd = sd(Data_s$predicted_bb_date),\n                               error = (qnorm(0.95) * sd(Data_s$predicted_bb_date))/sqrt(nrow(Data_s)))\n\n        Data_new <- Data_new[stats::complete.cases(Data_new), ]\n\n        forecasted_budburst_smoothend_window <- rbind(forecasted_budburst_smoothend_window, Data_new)\n      }\n\n      forecasted_budburst_smoothend <- rbind(forecasted_budburst_smoothend, forecasted_budburst_smoothend_window)\n    }\n\n    return(tibble::lst(forecasted_budburst_perRun, forecasted_budburst_smoothend))\n\n  }\n\n}\n\n\n\nfuture_budburst_zScores <- purrr::map(.x = validation_all_zScores,\n                                      .f = ~{\n\n                                        output <- forecasting_budburst(scenario_temp = .x$scenario_temp_fut,\n                                                                       linear_model = .x$model_for_prediction,\n                                                                       use_zScores = \"yes\")\n\n                                        return(output)\n\n                                      },\n                                      .progress = TRUE)\n\nforecasting_all <- purrr::map(.x = future_budburst_zScores,\n                              \"forecasted_budburst_smoothend\") |>\n  dplyr::bind_rows()\n\nforecasting_plot <- forecasting_all %>%\n  dplyr::group_by(year, scenario_name) %>%\n  dplyr::summarise(mean = mean(mean_pred_bb_window, na.rm = TRUE),\n                   sd = sd(mean_pred_bb_window, na.rm = TRUE),\n                   error = (qnorm(0.95) * sd)/sqrt(n()),\n                   CI_lower = mean - error,\n                   CI_upper = mean + error) %>%\n  ggplot2::ggplot() +\n  ggplot2::geom_line(mapping = ggplot2::aes(y = mean,\n                                            x = year,\n                                            colour = scenario_name),\n                     linewidth = 2) +\n  ggplot2::geom_ribbon(mapping = ggplot2::aes(x = year,\n                                              ymin = CI_lower,\n                                              ymax = CI_upper,\n                                              fill = scenario_name),\n                       alpha = 0.1) +\n  ggplot2::scale_color_manual(values = scenario_colours) +\n  ggplot2::scale_fill_manual(values = scenario_colours) +\n  ggplot2::theme_classic() +\n  ggplot2::labs(x = \"Year\",\n                y = \"Predicted bud burst date (mean over scenario runs)\",\n                title = \"Predicted bud burst dates of the future\",\n                colour = \"Scenario\",\n                fill = \"Scenario\") +\n  ggplot2::theme(legend.position = \"bottom\")\n\nforecasting_plot",
      "types": {
        "validation_all_zScores_file": "str"
      },
      "inputs": [
        "validation_all_zScores_file"
      ],
      "outputs": [],
      "params": [],
      "param_values": {},
      "confs": {},
      "all_inputs": [
        "validation_all_zScores_file"
      ],
      "dependencies": [
        {
          "name": "dplyr",
          "asname": null,
          "module": ""
        },
        {
          "name": "here",
          "asname": null,
          "module": ""
        },
        {
          "name": "purrr",
          "asname": null,
          "module": ""
        },
        {
          "name": "stringr",
          "asname": null,
          "module": ""
        },
        {
          "name": "tidyr",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "4166677": {
            "id": "4166677",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "Forecast bud burst-cherine-jantzen-at-gmail-com",
              "vars": [
                {
                  "name": "validation_all_zScores_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#d2ac79"
                }
              ],
              "params": [],
              "inputs": [
                "validation_all_zScores_file"
              ],
              "outputs": [],
              "og_node_id": "4166677",
              "deps": [
                ""
              ]
            },
            "ports": {
              "validation_all_zScores_file": {
                "properties": {
                  "color": "#d2ac79"
                },
                "id": "validation_all_zScores_file",
                "type": "left"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "4166677",
      "container_source": "",
      "kernel": "IRkernel",
      "notebook_dict": {
        "metadata": {
          "toc-autonumbering": true,
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "kernelspec": {
            "display_name": "R",
            "language": "R",
            "name": "R"
          },
          "language_info": {
            "codemirror_mode": "r",
            "file_extension": ".r",
            "mimetype": "text/x-r-source",
            "name": "R",
            "pygments_lexer": "r",
            "version": "4.3.2"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# Forecast bud burst\n# ---\n# NaaVRE:\n#  cell:\n#   inputs:\n#    - validation_all_zScores_file: String\n#   dependencies:\n#    - name: dplyr\n#    - name: purrr\n#    - name: stringr\n#    - name: here\n#    - name: tidyr\n# ...\n\n# load input \nload(validation_all_zScores_file)\n\n# set colour palette\nscenario_colours <- c(\"measured\" = \"#D53E4F\", \"RCP45\" = \"#B9A6E2\" , \"1pt5degC_OS\" = \"#FFD560\",\n                      \"2pt0degC\" = \"#48d3d3\", \"RCP85\" = \"#FC8D59\", \"1pt5degC\" = \"#3288BD\")\n\n# II. Function: Forecasting ---------------------------------------------------------\n\n# Arguments\n# scenario_temp: Formatted scenario temperature data as given by in the output list of function \"scenario_hindcast_budburst\".\n# linear_model: Linear model used in function 'model_budburst_measuredTemp' to model bud burst against the measured temperatures. Used as the basis for the predictions of future bud burst dates.\n# use_zScores: yes or no, specifying whether the zScores of temperatures should be used to model the biological variable or the actual yearly mean temperatures\n\nforecasting_budburst <- function(scenario_temp,\n                                 linear_model,\n                                 use_zScores = c(\"yes\", \"no\")){\n\n  if(use_zScores == \"yes\"){\n\n    model_coefficients_bb_temp_zScore <- linear_model$coefficients\n    vcov_bb_temp_zScore <- stats::vcov(linear_model)\n\n    forecasted_budburst_perRun <- NULL\n    forecasted_budburst_smoothend <- NULL\n\n    for (r in unique(scenario_temp$run)) {\n\n      df <- scenario_temp %>%\n        dplyr::filter(run == r)\n\n      X <- stats::model.matrix(~ zScore, data = df)\n      predicted <- X %*% model_coefficients_bb_temp_zScore\n      varPred <- diag(X %*% vcov_bb_temp_zScore %*% t(X))\n      sePred <- sqrt(varPred)\n\n      df1 <- data.frame(df,\n                        predicted_bb_date = predicted,\n                        varPred = varPred,\n                        sePred = sePred)\n\n      df1$Con95Pred <- 1.96 * df1$sePred\n\n      forecasted_budburst_perRun <- rbind(forecasted_budburst_perRun, df1)\n\n\n      # 11 year sliding-window to smooth forecasting\n      df2 <- df1 %>% dplyr::distinct(year, .keep_all = TRUE)\n\n      forecasted_budburst_smoothend_window <- NULL\n\n      for (s in (min(df2$year) + 5) : (max(df2$year) - 5)) {\n\n        Data_s <- df2 %>% dplyr::filter(year >= (s - 5) & year <= (s + 5))\n\n        Data_new <- data.frame(year = s,\n                               scenario_name = unique(df2$scenario_name),\n                               run = r,\n                               mean_pred_bb_window = mean(Data_s$predicted_bb_date),\n                               sd = sd(Data_s$predicted_bb_date),\n                               error = (qnorm(0.95) * sd(Data_s$predicted_bb_date))/sqrt(nrow(Data_s)))\n\n        Data_new <- Data_new[stats::complete.cases(Data_new), ]\n\n        forecasted_budburst_smoothend_window <- rbind(forecasted_budburst_smoothend_window, Data_new)\n      }\n\n      forecasted_budburst_smoothend <- rbind(forecasted_budburst_smoothend, forecasted_budburst_smoothend_window)\n  }\n\n    return(tibble::lst(forecasted_budburst_perRun, forecasted_budburst_smoothend))\n\n  } else {\n\n    # use mean temperatures\n\n    model_coefficients_bb_temp <- linear_model$coefficients\n    vcov_bb_temp <- stats::vcov(linear_model)\n\n    forecasted_budburst_perRun <- NULL\n    forecasted_budburst_smoothend <- NULL\n\n    for (r in unique(scenario_temp$run)) {\n\n      df <- scenario_temp %>%\n        dplyr::filter(run == r)\n\n      X <- stats::model.matrix(~ mean_temperature, data = df)\n      predicted <- X %*% model_coefficients_bb_temp\n      varPred <- diag(X %*% vcov_bb_temp %*% t(X))\n      sePred <- sqrt(varPred)\n\n      df1 <- data.frame(df,\n                        predicted_bb_date = predicted,\n                        varPred = varPred,\n                        sePred = sePred)\n\n      df1$Con95Pred <- 1.96 * df1$sePred\n\n      forecasted_budburst_perRun <- rbind(forecasted_budburst_perRun, df1)\n\n\n      # 11 year sliding-window to smooth forecasting\n      df2 <- df1 %>% dplyr::distinct(year, .keep_all = TRUE)\n\n      forecasted_budburst_smoothend_window <- NULL\n\n      for (s in (min(df2$year) + 5) : (max(df2$year) - 5)) {\n\n        Data_s <- df2 %>% dplyr::filter(year >= (s - 5) & year <= (s + 5))\n\n        Data_new <- data.frame(year = s,\n                               scenario_name = unique(df2$scenario_name),\n                               run = r,\n                               mean_pred_bb_window = mean(Data_s$predicted_bb_date),\n                               sd = sd(Data_s$predicted_bb_date),\n                               error = (qnorm(0.95) * sd(Data_s$predicted_bb_date))/sqrt(nrow(Data_s)))\n\n        Data_new <- Data_new[stats::complete.cases(Data_new), ]\n\n        forecasted_budburst_smoothend_window <- rbind(forecasted_budburst_smoothend_window, Data_new)\n      }\n\n      forecasted_budburst_smoothend <- rbind(forecasted_budburst_smoothend, forecasted_budburst_smoothend_window)\n    }\n\n    return(tibble::lst(forecasted_budburst_perRun, forecasted_budburst_smoothend))\n\n  }\n\n}\n\n\n# III. Forecast bud burst dates -------------------------------------------\n\n# use zScores\n# All scenarios\nfuture_budburst_zScores <- purrr::map(.x = validation_all_zScores,\n                                      .f = ~{\n\n                                        output <- forecasting_budburst(scenario_temp = .x$scenario_temp_fut,\n                                                                       linear_model = .x$model_for_prediction,\n                                                                       use_zScores = \"yes\")\n\n                                        return(output)\n\n                                      },\n                                      .progress = TRUE)\n\nforecasting_all <- purrr::map(.x = future_budburst_zScores,\n                              \"forecasted_budburst_smoothend\") |>\n  dplyr::bind_rows()\n\n# plot predicted bud burst of each scenario\nforecasting_plot <- forecasting_all %>%\n  dplyr::group_by(year, scenario_name) %>%\n  dplyr::summarise(mean = mean(mean_pred_bb_window, na.rm = TRUE),\n                   sd = sd(mean_pred_bb_window, na.rm = TRUE),\n                   error = (qnorm(0.95) * sd)/sqrt(n()),\n                   CI_lower = mean - error,\n                   CI_upper = mean + error) %>%\n  ggplot2::ggplot() +\n  ggplot2::geom_line(mapping = ggplot2::aes(y = mean,\n                                            x = year,\n                                            colour = scenario_name),\n                     linewidth = 2) +\n  ggplot2::geom_ribbon(mapping = ggplot2::aes(x = year,\n                                              ymin = CI_lower,\n                                              ymax = CI_upper,\n                                              fill = scenario_name),\n                       alpha = 0.1) +\n  ggplot2::scale_color_manual(values = scenario_colours) +\n  ggplot2::scale_fill_manual(values = scenario_colours) +\n  ggplot2::theme_classic() +\n  ggplot2::labs(x = \"Year\",\n                y = \"Predicted bud burst date (mean over scenario runs)\",\n                title = \"Predicted bud burst dates of the future\",\n                colour = \"Scenario\",\n                fill = \"Scenario\") +\n  ggplot2::theme(legend.position = \"bottom\")\n\nforecasting_plot",
            "metadata": {},
            "execution_count": 11,
            "outputs": [
              {
                "name": "stderr",
                "output_type": "stream",
                "text": " \u001b[32m■■■■■■■                         \u001b[39m  20% |  ETA: 29s\n\n \u001b[32m■■■■■■■■■■■■■                   \u001b[39m  40% |  ETA: 20s\n\n \u001b[32m■■■■■■■■■■■■■■■■■■■             \u001b[39m  60% |  ETA: 15s\n\n \u001b[32m■■■■■■■■■■■■■■■■■■■■■■■■■       \u001b[39m  80% |  ETA: 10s\n\n\u001b[1m\u001b[22m`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n"
              },
              {
                "output_type": "display_data",
                "data": {
                  "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAIAAAByhViMAAAACXBIWXMAABJ0AAASdAHeZh94\nAAAgAElEQVR4nOzdeXwb9Zk/8GdmdMu2LMv3Fcd2DucmCYGQhDhALo4CIdCEQltatpQCZSns\nNu3SH7ulpbSlx+6WQjkKhYRAIFsIJAFCQkISEnKR+3KcOL5tWZJ1SyPNzO+PcRRZGkmj0WFZ\nft4vvyAejWa+I8mej78nwXEcIIQQQgih4Y8c6gIghBBCCKHkwGCHEEIIIZQlMNghhBBCCGUJ\nDHYIIYQQQlkCgx1CCCGEUJbAYIcQQgghlCUw2CGEEEIIZQkMdtLdfPPNjY2N/L/37dvX2Nj4\ny1/+cshLEu7gwYONjY1PPfVUVp49daJfV+ZjWfYvf/nLTTfdtHjx4s8//1zMU06ePNnY2Piz\nn/0sQ8qDEEIoXrKhLkCibr75ZofDEbyFoii9Xj916tS77767rq4udafetWuX1Wrl/202m3fs\n2FFaWir+6e3t7R0dHVdddVVySxLOYrHs2LGjsLAw8RNl4Nljkvw6R7+u5J4rFX7/+9+vWrVK\nqVQ2NDSYzWbBfUIKbLPZduzYkZOTM1TliVlChBBC0Q37YMfffYuKikhyoPbR5XLZ7fb169c/\n/fTTf/jDHx555JE0FGP+/PkXLlzQarXin/L0009v3br13LlzqSsVgvS+zhn1nm7atAkA3nvv\nvZtvvjnSPukssJjyhMuolxQhhDJfljTFHjp0qPsSm83W19f39NNP+/3+H//4x19++WUaCqBW\nq2tqaoqKisQ/Zffu3akrDwpI5+ucUe8pX904ceLEKPuks8BiyhMuo15ShBDKfFkS7EIYDIYn\nn3zygQceAIDXX3+d33jgwIHGxsYXXnihs7Pz4YcfXrx4cVNTE/+QyWR67rnnli9fvnjx4nvv\nvfeNN97w+/0hx9y0adO3v/3txYsX33fffZ9++mnIo4J97Lq7u5999tlly5YtWbLkxz/+8Zkz\nZ/jt//znPxsbG0+ePNnR0dHY2NjY2MgwTLJKEglBEDRN//Wvf73zzjuXLFny0EMPHT58OPDo\njh07Ghsbn3322ZBnLVq0aOnSpZlw9khvn8PheP755+++++6FCxfecccdP/3pT48ePco/Jcrr\nHE7MdR0/fnzVqlXf+MY3Fi5cePfdd7/00kterzfmuWK+p1EuIYru7u5nnnnmjjvuWLRo0cqV\nK59//vlAn4T33nuvsbGRr+VauXJlY2Pjxo0bQ54epcB85ffbb7+9cuXKRYsW3Xfffdu2bQt5\nupgPaoBgeWK+6YIlTOSjEm+xEUJoWOKGOZ1OBwBtbW3hD7311lsAcN111/Hf8v21H3jggSuu\nuEKn040ZM+bAgQMcx+3Zs4fvAVZfX9/Y2FhSUgIAM2fOtFgsgUPxff/lcvmMGTOmT5+uVCqf\nfvppvV4feAE3b94MAN/85jcDT9m+fXtBQQEA1NbWjhkzhiRJmUz28ssvcxy3ceNG/iak1Wpv\nvfXWW2+9lWGYZJUk3JYtW/iyXX/99XK5fNKkSaNHjwYAiqI2bNjA7/Puu+8CwHe+852Q5yqV\nSq1WmwlnF3z7ent7+W6U5eXlc+fOnTJlCkmSBEH87W9/i/I6hxNzXe+++y5FUQRBTJw4cdas\nWfwHb8aMGXa7PZH3NPolRPLJJ5/wPeHGjBmzYMGCqqoqAKiqqjpz5gzHcRs2bLj11lvz8vIA\nYOHChbfeeuuWLVtCjiBY4D179gDAHXfccf/998vl8smTJwd6qb799tuB54r5oAYTLE/MN12w\nhJI/KhKKjRBCw1E2B7v//u//BoBly5bx3+7atQsAampqbrzxRo/Hw290OBxlZWUURb322mv8\nFpqmH330UQBYuXIlv+X06dMURel0uhMnTvBb2traxo4dK5fLIwU7q9VaWlqqVqu3b9/Obzl6\n9KjBYJDL5adOneI4zmg0AkBdXV2gtMkqSTg+WuXm5t5www2Be9jzzz8PABUVFT6fjxMXrYb2\n7IJv35NPPgkATzzxBMuy/JampqaqqiqtVmuz2QRf53Birsvtdufm5spksl27dvFbrFbr3Llz\nAeDZZ5/lt0h7T2NeQjij0ajX6ymK+uijjwIbn3nmGQCYNWtWYMvUqVMB4MKFC5EuPLzAfLAr\nLi6+5ppruru7g488adIk8RclKKQ8Yt708BJK/qhILjZCCA0vWRvsbDbb2LFjASBQ88HftAiC\nuHjxYmC3F154AQC++93vBj/X7/ePGjWKJEn+3sZX5zz++OPB+6xbty64yjMk2L3yyisA8Mgj\njwQ/5Y9//OOUKVPeeOMNTuiOlayShOOjFUEQIff4SZMmAcC2bds4cffLoT274Nt39913A8Dm\nzZuDn3X8+PF9+/bxd3QxwU7MdbW3tz/xxBO/+MUvgvdZv349ANx44438t9Le05iXEO6Pf/xj\n+MvFsixfu/b111/zWyQHO5lM1tzcHNjodrtlMplCoRB/UYLSFuwk/6QjhFAWyJI+dqtXr37x\nkj//+c+PPfbYmDFjzp49e/XVV3/3u98N3nP8+PHV1dWBb/lWm5tuuil4H4qiFi1axLLszp07\nAeDgwYMAMGfOnOB9brjhhijl+fjjjwFgwYIFwRsfe+yxI0eO3HvvvYJPSVFJAsaPH19TUxO8\nhT9OcF+36Ib27IHjBL99U6ZMAYCf/exn/L2cN3HixCuvvFKpVIo8ppjrqqio+P3vfx/Sh5Iv\nic1mi3RkMe+phEvgn7h48eLgjQRB8LPuJT5aqKGhoba2NvCtSqUqKCigadput4u8qEwg4Scd\nIYSywLCf7oQXPqVqTk7Oo48++utf/1qhUARvD5lqrr29HQB+/etf/+Uvfwne3tLSAgDnz58H\ngO7ubgDge+QE6PV6lUrl8XgEy8MfNt5p7VJRkoCQXAUAZWVlANDb2yuyhEN7dl7IS/r4448f\nOnRo3bp111xzTWlp6YIFC5YuXXrbbbfl5uaKP6bI63I6na+++urnn3/e1dVltVo5juNHTnAc\nF+nIYt5TCZfAH5bvVxessrISADo6OsRdd0ThR+ZbpfnRFWIuKhNI+ElHCKEskCXBbt26dYGp\nRkiS1Ov148eP5+9GITQaTfC3Pp8PAAiCCNmtpqYmMH0JTdMAIJOFvlYURUUqDz/ULsotP1yK\nShKgUqlCtvDHET8qcGjPzgt5+2Qy2TvvvPOv//qva9as2bx589q1a9euXavX61988cW77rpL\n5DHFXJfRaJw7d+7Zs2erq6sbGxuLiopkMllvb+9rr70W5chi3lMJl8AfNvzjzV8C/2giwgsc\nfvboF5UJJPykI4RQFsiSYDd79my+uiJe/MjH//qv/7rlllsi7cMPPwxZ38Lj8bhcruiHNZlM\nQ16SgPAWQ75ljR+rKMjtdtM0HUg8Q3v2KGbPnj179mwAaGpqeuONN5599tl77rln5syZwe2J\nUYi5rl//+tdnz55dvnz52rVrA0Xau3dv9GAn5j2VcAn8YS0WS8j2/v5+AMjPz49+rgSJvygJ\nxL/p8T4rpcVGCKHMkSV97CTjO3QfOXIkyj78zTUwFRbv8OHDUSrk+JEB+/fvD954/PjxX/3q\nV/z8+2krSQA/5DN4Cz+v3pgxY+BS9U9IRDt9+nTwU4b27GKMGTPm6aeffvjhh30+n/jVSMVc\nF/9W/uQnPwlOD3v37o1+ZDHvaQgxlzB58mQQ6p7In4h/NHUkXJQgaW+65I9KsoqNEEIZbqQH\nuzvvvBMAXnzxRb62g+f3+2+77bYVK1Y4nU4A4Pukv/XWW8E3j5CeOiGWLVsGAG+88QZ/BN4z\nzzzzi1/8gh/oxzfzud3uVJckoLu7+6OPPgp8azKZPvvsM5Ik+REe5eXlALB3797gKXx/97vf\nBR9haM8ejqbpWbNmzZgxI6Q9lz8InwDCX+dwYq6Lr1kMrnfs7Ox87rnnACDQD0/CeyrmEsLx\nh33ttdf4RmTe2bNnt2/fnp+fL3I4i2CBxRDzQRVDzJseXkJpH5UkFhshhDJd2sfhJlmUeexC\n8KMOb7rpppDt3/ve9wBg7Nixq1ev3rFjx5o1a/j5yb73ve/xOzgcDv52cscdd6xZs+bNN99c\nsWLFlClT+O7//D7hExTzHaSmT5/+6quvvvXWWytXruS/9Xq9/A587/jf/va3b7/9dk9PT7JK\nEo4fonvllVeWlpY+99xz27Zte/vtt2fNmgUA999/P7+Pz+erqKgAgOXLl7/77rurV6+++eab\nr732Wn5CtUw4u+Db99BDDwHAnDlzXnvtta1bt3744YdPPPEERVGFhYUmkynS6xxCzHX96U9/\nAoBJkyZt2rRp//79f/nLXwoLC19++WWSJJVK5aZNmzo7O6W9p2IuIdyKFSsAYP78+evWrdu+\nffsLL7wwatQoAOBnwObFnO4kvMCRfkb4dycwDWHMixIUUh4xb3p4CSV/VCQXGyGEhhcMdpzf\n73/qqaeCeybpdLpVq1b5/f7APkeOHOFbV3lXXnllc3NzQ0MDANA0zQkFO4/H89hjjwV6cBME\nsWLFiq6ursAOv/3tbwNdufmZ8ZNSknAbNmwAgB/+8IcfffQRH1YAgCTJu+++2+VyBXb76quv\n6uvrA0desmSJ0WgcP348RVGZcHbBt8/v969atYpf4SPwOjc2Nh47dizK6xwu5nX5fL7vf//7\ngeMUFxe/+uqr3KWsAAC/+tWvpL2nYi4hHE3TTzzxRPD4gJqamjVr1gTvIybYhRRYZLAT80EN\nF14eMR+58JdU2kdFcrERQmh4Ibg4uzEhhBBCCKHMNNL72CGEEEIIZQ0MdgghhBBCWQKDHUII\nIYRQlsBghxBCCCGUJTDYIYQQQghlCQx2CCGEEEJZAoMdQgghhFCWwGCHEEIIIZQlMNghhBBC\nCGUJDHYIIYQQQlkCgx1CCCGEUJbAYIcQQgghlCUw2CGEEEIIZYnhGuyeffbZhQsXdnZ2DnVB\nEEIIIYQyxXANdidOnPjss89cLtdQFwQhhBBCKFMM12CHEEIIIYRCYLBDCCGEEMoSGOwQQggh\nhLIEBjuEEEIIoSyBwQ4hhBBCKEtgsEMIIYQQyhIY7BBCCCGEsgQGO4QQQgihLIHBDiGEEEIo\nS2CwQwghhBDKEhjsEEIIIYSyBAY7hBBCCKEsgcEOIYQQQihLYLBDCCGEEMoSGOwQQgghhLIE\nBjuEEEIIoSyBwQ4hhBBCKEtgsEMIIYQQyhIY7BBCCCGEsgQGO4QQQgihLIHBDiGEEEIoS2Cw\nQwghhBDKEhjsEEIIIYSyBAY7hBBCCKEsgcEOIYQQQihLYLBDCCGEEMoSGOwQQgghhLIEBjuE\nEEIIoSyBwQ4hhBBCKEtgsMt0Rrt3qIuAEEIIoeEBg11G41MdZjuEEEIIiYHBLnMF5znMdggh\nhBCKCYNdJjLaveFJDrMdQgghhKLDYJeopOetKAcUDHwIIYQQQjwMdgkJ9IFLVt4ScxzMdggh\nhBAShMFOupCAlXjeEn8EzHYIIYQQCofBTiLBaCW56k7CEzHbIYQQQigEBjspooeqtEU0zHYI\nIYQQCiYb6gIMP+K7wRXlKhM5iMjCRDkLQgghhEYUDHbxiSuQhcS7FFWwYbZDCCGEEA+DXRwk\n959LeknCT4HZDiGEEELYx06sDO/QluHFQwghhFAaYLATZVjEpmFRSIQQQgilDga72IZRYBpG\nRUUIIYRQ0mGwyzaY7RBCCKERC4MdQgghhFCWwGCXhbDSDiGEEBqZMNhlJ8x2CCGE0AiEwS5r\nYbZDCCGERhoMdtkMsx1CCCE0omCwy3KY7RBCCKGRA4MdQgghhFCWwGCX/bDSDiGEEBohMNiN\nCJjtEEIIoZEAgx1CCCGEUJbAYDdSYKUdQgghlPXSEewsFsvx48fFbzcajadPn7Zarakv2lAi\n/f38V9rOGJLtPC6G/0pbARBCCCGUUrJUn2Dbtm0vv/yy2+1+//33Y273+Xx/+tOfvvrqK71e\nbzKZ7rjjjnvuuSfVJUybdGa4SIx2b1GuMiTMeVyMSkMNVZEQQgghlCyprbF75513Nm3adOed\nd4rc/tZbb/X29r7++uuvvPLKc88919vb63K5UlpCMSx+v8Xvl/DEQJ1c9Jq5dAY+2s1iFR1C\nCCGUrVJbYzdt2rTly5fv379fzHaWZT/99NPHH3+cZdmmpqaKioqf/OQnKS1eXCx+v14W7eXK\nhAq5KGg3y//D5KANOYqQR7HSDiGEEMoCqQ1248aNE7+9u7vbbrcfOXLkr3/9q1qt7urquu++\n+2666abADm6322w28//2+Xwkme6RH+HZLsPDHC8Q6QIw2yGEEEJZKeV97MSz2WwAYLVaX3rp\nJZIkd+7c+Yc//GHKlClVVVX8Dnv37v23f/u3wP5arTb9heSzXdLzHOnvZ2X5yT0mLzzVIYQQ\nQihbZdB0J3K5HACWLl3KV8XNmzdPr9cfO3YssENFRcWyS/R6vc/nS38hScZq9ZrSf14JaDcb\nJdWZHHT4Rux+hxBCCA1rGVRjV1hYCAAMczlbqFQqj8cT+Hbs2LE///nP+X+fOnUq+KFUI5lB\nc69YGEZPZXSrpZiKOsEGWYQQQggNXxlUY6fT6UaPHr1v3z7+W4vF0tPTU1NTM6SFAghLdTwL\nw1iYDK3fSqT5FSvtEEIIoeErtTV2e/fu9Xg8586d4zhu+/btAFBfX19ZWRlp+4oVK373u99R\nFFVZWfnhhx/W19dfccUVKS1hgpJYdZesbnZxpTocRYEQQghlk9QGu507d1osFgCYOHHip59+\nCgByubyysjLS9tmzZ//iF7/YunXruXPnZs6cuXz5coIgUlrCxGVUs6yEujpskEUIIYSyBsFx\n3FCXQYp777139erVTU1N9fX1qT7Xub7OmPtIzna0h1OoBsJrgjV2kltgBYMdVtohhBBCw04G\n9bEb1uLtb0d7OP6L/3fiBUikXx2OkEUIIYSyQwaNih0Jomc4yd3scLI6hBBCCAHW2Inh9wx8\nRRep0i5QORcl1SVSaZeUVIeVdgghhFAWwBq7OAhmO5nq8qNGYHSUxKwc3NkujmdhXR1CCCGE\nLsEau0SF1OdZmYSSVlyLlSU31WGlHUIIITTcYbBLPsnZLq4G2XTU1fmt4Ld6bGaMdwghhNCw\ngMEuJdKT7ZJuUKWdf9B6Gx4Xg/EOIYQQynAY7FJFerYTURWXuuq6gWw3ONUFvsV4hxBCCGUy\nDHYZJ3hpWj/Ddts8tH9QjEtpIyzJWENT3UBRLm/EeIcQQiOUzwI+y1AXAkWDo2JTyMqw0gbJ\n0m6WkMNbB9reP9bpplm5jLx6lP768cUzq/WsN4VttXymtDhpvTb2ImN8tsMFKhBCaMTxWUCu\nH+pCIGEY7FJLWrY702t/5cuWM2YH/63Pz+5sNu1sNpWqFVfVFMyrKxxTnJv0NXSDawqF+a0g\n04Vs87gYzHYIITTiYLbLVBjsUi6ubOfyMZuOd//zhIsNW8M3l5Q5vey2M33bzvSV56tm1xTM\nqy8sylEmpZAhqS5ipR1mO4QQGrFCGmEx22UkDHbpIDLbfd3Wv+7rdruH0SvA5FXnkjI76xfc\ns7Pfs/5w5z+PdI0ryZlXX3hVjV4lkxitYlfUiYDZDiGERiLMdpkHg12aRM92Frdv3cH2Y522\nkO2BbJdLCrxTLMed6raf6ra/c7Dt+9fUzKiK8dMVV4aLq9IOMNshhNDIhNkuw2CwSyEOoM/h\nddGMUkZqFBSjkBXIQ6MPy3G7mk0bjnV5fMJjXQUjXQir2//nbc33z6mZX18Y8lBSKuRCJS/b\nGe3eotzktCYjhBBKoSiDYTHbZRIMdknmZ7gOq/uiyXXR4mo1O12D45pSRuaRVI6SylHKtEoq\nRyk/b3ScN7nCj2NQuk1etfjzshz3yu4WGQlzageyXeKRLtrw2GRkO6PdC5jtEEIoC/CxD+Nd\nBsBglwQO2t9qcbeYnG1mV7vVy7IR55nz+lkjsEaHV/zB59QZ9BrFnvN9Jqcv+p4sx724s4Ui\nyWuqktYkKnLqk2Aisx2f6oL/jfEOIYSGN6y6ywAY7KRz0syOpt4zPc4+ZxxBDQBAQQIA0DHm\nGS7KVdx31aiplfkA8M3pFSe7bLvOm/a3WjyRn8hy3Nt7T2jJUVMrBKrTpIm3sx2IyHbBqS54\nI2Y7hBDKROInJcZsN9Qw2Enk8Ppf3H3B4qRj7xqJgoyU7UggGscalk4bp6QG4hFJEJPKdZPK\ndfcxzIEWy87zphOd9pApUQxKNwCwHLy6p/UHc0ZNKsuTXrbBkpvtBFNd4CHMdgghhJBkuKSY\nFCzHvX2oLaFUx1MIvP4V+erHF9Yvm1ahBkf4o0qKmlNXuGrhuP+5c8rMUZf/KuJT3UDxWPbl\n3RdPddkTLV4QCRcruOxYlFQncgeEEEIZDdccG1IY7KTYdrb3Qp/AiAcpgrKdjCJvnVz27wvH\njNJrYj5Pr1H8uLFuelW+QekOTnU8hmX/9mXLmR6BaCiZxUkLxDvBhWUvCcl2IkMbZjuEEMog\nGNSGFQx2cWvqdew4axK/v1pOyqPPTqwgAWBMkfY/Fo9b2FBMEWJXC5OztseuLZpQliv4qJ9h\n/7b7wjmjU3xRxYi36o7Pdka7N664Fu/+CCGEMghmwaGDfezi0+/xrfu6jYXQ9b6CEQCFOapR\nBepRevUog9agVQCAj+GctM9JM06v3+X1O3ysm/Y7vIzTyyjl5ISy3NkV+eGBjmSsLCXQiS0w\nlYmMJH5wzegXdp0XrJyj/ewLu84/fG3daEPsKkDx+Gx3uddd5J52PMkRDbvcIYQQQnHBYBcH\nhuPeOdjmEhrxQJJktV5VU6CpLtBU6TWasImI5RSRr1bkR56ZziZu2bHw2elkFPHDuaP/+sX5\nJqHKOa+P/esXzQ831olp3o2LyJlQTA4aABRqiXXDmO0QQmgoSa57w+GxQwSDXRw+OdXTag7t\nzca7dXLpzOpEP8Exl5SNNOewnCJ/OK/2+S+azwv1/HP72Od3NP+4sb4ySq6UJKhZ1ihYs5gU\nmO0QQgghkbCPnVine+1fNgt3rZtRlZ94quNZmQgToDDW6CtJKGXkj+bVjioQrpZz0ez/7jhn\ndCQ8jFcq2h1j0r7osL8dQggNP9jTbihgsBOl302vP9Qu2LGuOFd1y+SyJJ4rJNvFjHQBKjn1\n8PyI2c7pZZ//otnu9SehiEJSsihtEMx2CCGUbpjMhiEMdrH5WW7tgfaQVV95Chl598zKGINe\n4xep3i4mtZz60bzaighNrn0O+qVdF3xMtJEfqZNgpR1gtkMIoWEHo2HaYbCLbdOJ7vb+CF3r\nJpUW5aSk+5fkbKdVUo/MryvTqQQfvWByvbqnheFSku1SXWkHmO0QQgihqDDYxbDldO9XLWbB\nh64aVTCtKoVDfiRnuxwl9cj8ukiJ83in7d1DHQmUa4hlTbbDufoQQhktWZVtWGmXXhjsommz\nuJ/++LTgQ6V56qUTS1NdAMnZLk8le7ixNlclvFrrrmbT5pM9CZQrouiVdom3xvKyIA9lwSUg\nhFDGwRCJwS4K2s/+9IPjTqHRBmoZec+VlXJK7BIRibAyrLR4Z9AoHpxXq5QLv8Wbjnd/eUG4\nJnJYGL7BKKSibvheCEIIiZWevIWpDgAw2EWx8UT3mR57+HYCYNn0Cr0m9ty8SSQt21XrNd+/\nehQptEYZB/D2gfaTXbaEixZKfKVdr9371UXzOaPEBW2HYyQajmVGCA0nPkty8s2wC0mBAg+7\nkicbTlAc0e1TyxmW+8PWJoBBK9lfU2uYUJKX/vLw2U7M6hTBJpTl3T2zcs3+tvDhEjqKOnjE\nDEamqEhlKFGRZDoqIHksx728u+WDo10sxwHAhLLc/7e0IV8tj/c4YnJS5kxuHKm0OAMzQijJ\nMnDVhwwsUpbCGrtoll9R8fd7ZgQvnFWtVy+eUDKERZLQMnv16IKbJg/qDliuUCzKN9ymL56o\n1HpM/rbTjrNf9zPJmwYlZqXdhqNd/zzSyV4anHuyy/7UxpO0Pzk98DIQjpNACKVDcGVVIhVX\nKar0Sl1d2oivpQuGwS6GhtLch6+tnVSeBwBqOXnXjEoquGWT7gXHMXCfATatt+14s92ShpLG\nMYUEEFUK1c36wiW6wkq5MriCzmXztzdJbBKNl59h133dzv+7SDmwBtqZHsfvt55NxSwsQ56o\nxBRgyAuJEMpCIyTuhF/mCLnwCLApNjaVjFoxo2pDQc84rUavvlR7x/nBuhMcl8bMyjSgvwGU\nFWkrVVwtswzDzSvSl1vlKi5ie6upy1NQoszVJ6fvIMlYI60e+3mT0efm4FKqK1K6jF4NAOw8\nZ3q3qP2u6ZVJKUAmwLiGEEqfYZFmkt4gOyyuOr2wxk6UIw7HaYo+DB6abz1kXGD88HKqAwC/\nC/o2gft8mgsWs+rO7+O6LriO7zF3NDmjpDrexdOOJDbICmI4buOJboPSHairg6B6u9f3tn51\nMfljdYckYMV7UkyBCKHkk5B7hlFUGkZFTSMMdrGd87i3WPoB4KLHs9bY6/L0gnE90N2h+3F+\nMG8B95n4js64gBFe1kIkwWzndTOmLk/LKfuxPaauFicjtB5aONrDdLe4Yu8njmBPu0PNLSxt\nBQAtOWioBJ/tWI777adnL5qTVoaANMcmTGkIoUyRaekni6c+yYyXGptiYzjmdH5gNBW5yX4V\n6wWu20O/6XF9k4R8wb05FkyfQ74PciYxDGfv97lsfsbHkDJSoSZVakqhohRKkuB76Xk7wLoX\n6F4AAEU5FMwHmfBRxeA4cDv9DivttPrt/T6/V+JAhJ42V36xUpub/A8GyVg5gM/OGiPtwGc7\no1fz1MZT/3Pn1DzVcP1wSk51ODwWISRR9EghsgE0bbkkKQ2ymZGiMtBwvXemR4vH88vW1mI/\nMaNPyQHY5KxJxRhVuWuV1ywjvyqB8Bopwu3T29v67HSHy6UCwVZNAhQKUiHrV5K9Cnm+UiZT\nKWxyuhNMG6H4LiDimPKD48Bl9zn6/b12v9PmY33JaEXloPW0bfxMPSE0+128QjyP0rYAACAA\nSURBVCrtjnVau6yewLdaUu5kfSFPKVK6um3wzCenf33LRCqpM7CkJzZhXR1CaFhKc05KMNuJ\nKW2aJ1jJmKCJwS4iD8s+efGig2EmekgAIAB0PlLnI2vtwBCK08rr7eqWClWLWm5hWIXdU2L3\nlNrdpQyjinFcDmgvS3vzHHB5Mjy10lxpOKBynwNNg8jiuRz+trN22jNQM6cRWCAjhvNed5lc\nqSZDm+PdDqan1V06ShP3EWP55GSvmN2KlK7D7fDS7gsPzqtNehlSKvFUh5V2CKG4JZhyhiqR\nSA5eGROhLsukImGwi0hFkj8qK/ttW1uhNzT6UBxR4JG5PfXnoJ4kaZaTQ6xxCdG5vQXne66t\nVZ5TiQt2Hjdz4aSdlTTxGyEjCsvUBeXK9Vt7W7ye6/IEfq66Lrr0xUqlWnipWWnO9DgEO89R\nJMGwoXWNRUrXB0e7agzapUmdNTB1sQkr6hBCmS48SA15HJGQ7Ya8zBkPB09Ec01e3i9L5QXu\naPmGZRUJpjoew6gutNXRHjrmnj6avXDSFpLqXCIiukxBltVop8w2VNVrtRrZwvElLV53Cy0w\ndINjuJbTAsupJeLjU2HDTQByScWqBeMrtWotKQ/5qlH7Pvzq9JEL/cGrkGWm5KY6zIgIoTjE\nFXSC193KkIQkrfwp2l+aDHklL8FgF1X/zlEX1sqTkdvE8PvVLSet/qgjWP0+9vwJa7xjI1Ra\nqnp87qTZBWWjNZRs4HLm1hry1bKvHFaaE+ic5+z39XUlNFw32EWLq6nXGb59WpWuvkj7wNzR\ncpnAR5HluDd2HzU6vLSbjfIVV0mSHpswhyGEhpPMiXQBIpuSM63YmQqDXRQcWL8y2Uen85Re\nD3nhpC3SZHIMw104aRUZZSg5qStUVtRpx83QT5hVUFgWuhqsjCJuGF/iZNj9TuEVwNqbXT6p\no2tDfHJCuHfdwvFFAFCp13x7VpVgfHbS7N93HvUyjNCDA4awSi9FqQ7DIkJoZIkU2vg8l8mR\nLvPKhsEuCgIqH9RoGa2qlyAkRQeCUyvNhXmn9TnntapemUxUBZjHybScsoV3O2NZruWUzeOM\nWBKXDBQqqqBUWTU+p+GqgqlzDXWT80qqNdq8iM20fKXdWbe72y/QBMz62LZkrDPWZfUc77SF\nb59QllulHxiicUVl/sLxxYJP7+h3r/nyePQRv3FV3SUlNuHyryi1AvezzLttoAySTR+PkGtJ\n1oc/m14icXDwRFSUtmzaUuuRVxk/4/IWWd2l3Z5qpS/GolsU5clV9eaqu3NV3RTpCX6I4eQ0\nk+P15dD+HNqXY/OUMX6BUbQum7/1jL1mfG5gzhGOg9azDpdNeOyrXEWWVmm0OnmhOr43lK+0\ne+/rjl02y+0FxRSE1pr1G72WXq++OKEBB1tO97JCU78sbhg0MOLmyaVdNs8xoQh4uN26/WTT\nggljop+IdrMKdTr+VsFIh1Ir/A4XLp3zOCCUHsMuhGVkgbHGLhZFKehvoAgmV9VZqT90xajd\nLXX0oUK6NcfvkV0OKxxwVgXbkucvqrc2lG+sMuzN17SEpDoAoAifWmbJV7cVF9orJ9TVle6h\nqNB9eA6Lr/WsI9D5raPZYTcLj6ugZGRNQ15+kVKuIGOuMBZubp1Br5bZGOZrp/BoibYmB+OX\nPkOe2UUfaO0P315ToKkr1AZvIQniu1ePKtMJzxfzwdHutr6umKcTWW+XyBzC6Ul1mB1HLpG3\nioy8o6C0ws+ASCl6oTL19cdgJ4KqCvJnAwCoRlFF37ipuLSsWHU8n/681L2r1HPYQB8o9G6p\n9Owu9pzMozeBhilcGG2eYUoN+kYouhlkemVe4ejiXSQZOkkvz2aiO847AaCzxWXpFb7NkzJy\n9KQ8VQLzkshI4oaGEgA47nJYGIGS+Gm2/Zz0BtnPThtZocEZSycKzGOilJEPzB2tUQgPpPjH\n3lY/HfsHSWSzrITkhGELpVxKRwgihEYADHbi5EwBw2IoXAqEgiSIRfn6Ofl5HIBNxnaq/b0q\nxn+pqdHo8X3uzQfDYiDDW2wJyJkAJStA2wB8o6eyWi03jy7aRRDCbayWHk/zsX5Tp3DnPIIk\nRo/PUWsGpToJlXZzag16tYwF2Gnv54TaTE1dHmOnmw3r9heT3ev/8oI5fHtFvnpCWV74dgAo\n1CoemFtLhk2bDAC9du+7h9oFl6ANl9wRFUPSow5z5IiT3eu1I5RNMvhHD4OdaOpaCOqCNjdP\nN1OXI7jjIZvjNFcIhTcBpb68VVEAxbdC/nwgg5oaVVVAyDRK46iivZHGZ7jsEQaEEkT1+BxN\nXhxLkEUiI4mFDSUA0OfzHXcLTEoCAG1nHMe/NHdeiG+c7LYzRr9Q0Fw0vijKFDJ1hdpbJwvP\nS7znguVQW3+ysp3I5DSEAQuz3UiRSD/xDL7BoBTC9z0uI+nlwsET0jXm5Xd56Q6hKYU3m8wl\npcX6khXgPg+MHeRFoKoBIixGE3JQVoDnYq6qs6pwb2vfbPFzHVfWafLyYwzjEO+aWsOWUz0W\nt/+g0zFKocqjBD4Yfh/b3eLsvujM1SuKK9U6Q4yze3zM7ua+8O2GHMW0qvzoz71uXHGT0Sk4\nlnbtgbZRBo1BY2UpXfSDQORsFxhjkfnJiS8hrjOWzRK/5aR5TUyERrjMjolYYycdRRDfMBSq\nKYHXkGbZ980mP6EE7QTIuwrUtQKpjqcexf9fp26vKPgahFpCw5XVavXFERelldAaG6i0Yzn2\nS4c1WiE4sJvp5qPWk/vNxi53pCn3AGDHuT6X0GTLixuKKSJGfiUA7rmyOk+o76Dbx/79y4sM\nx4mstxMkbXLjIZT5ARSFElkJl6w7RGbfaVCS4duNIsNgFxvlFqg34uVR1I2GAsGQ0uvxbbcJ\njAYNpRoVaOEt0J4r0R+P+YziSk1hacRUF69ACrym1qBXywCgk/Y2eQUWdQ3hcTBtpx3H9pjb\nzznD22f9DLe9yRj+rFwVNau6QEzBcpTUt2eOEnxtL5pdH5/sAYBEsh1veGU7jHfDRsjCTZFC\nXnJvz3izRyiKEfNHFAa7RNWr1DMidLY7aHWcccealJjKAYUh8F1x7qmivDNRdi8oVZVUq6Ps\nwBNZacfvZmVYK8M6OW7exFJ++z67zcYKj+cIwfrY3jbXif2WkPXHdl8w2T0CvQNvGFcso8Q2\nN48vy10wrkjwoU9O9J4zOmGEZTvAqrthIeYc+jjzMEoEfnJQVBjsRIlSaQcAjXn55SrhDmeb\nzeZ+f6yEpKoJ/q40/6g+57zgjrpCRfloreBDEoSHvxlV+TqdEhQkLYeNTnOz1xVtJa8grI9t\nPe1oOmKlPYyP4Taf7PngqMCcc1oFObeuMK5C3jq5rFIvEGRZ4P7x1UUnzUAyst3wglV36TBM\ng9dwLDMaLnx90PM2XPwDdLwE5i3gvgCcyFtEthgmvxYw2IkVJdtF6WznZdj3zSZGaCK3y1TV\ng7/nKvQHdZrWkL1y9PKqMTmxOqeJwlfRhW+XkUTjmIEaMjfL7vDY1tl7v3bZXKyoOi27mT6+\nz/zmlpZNx7tpv8BT5o8pUsri+8hRJHHf1aOUcoFnWVy+t/a3xXW0SIZXpR0Ps106DMf5R5K1\nCtOQXwgSNFTvC90LrX8C61fgbQfnKejbBG3/A80/h46/gXkreC4CNxx+i0p79YZbFTsGuzhE\nyXa6yJ3tejx0jM52imKQDWrMJQiuqnCfvsAamF8lv1AxatzlFcbEiNQaG72VdnpVvk59eQoV\nN8t+7XOtM/XssFsE15MNxcA0Zc4SvSEnLOYq5eT8euF21ehKcpXLp1UIPnSkw7r7vAlGXoMs\nD7NdqgT/Bh+OMwYnsS9RhlwRGnK964EJ63vN0uA8DX0fQeufofnn0PEyWD4Hb5vIUYBDI96f\n6GH4I4DTncSHctsYtfDMunxnuwNWgUUaDlgdVQrVWHWkvnEEqKrBcXLwJrayYH9J7Z1eD6NU\nUXKhxRgkiNn3jq+0++BoZ/BGFrhmj7vZ4zbIZeNVOfUqdfiqssHKZMrbC0oOOmyn3K7AjMdz\nRhu0SokrZMweXXCq236oTSAfv3e4s9agLc5VOtx9/T6N1e2zefx2r9/u8Vk9fj/Llueprxtf\npJXH/qinbanZJDLavTgTSpKF/x4XOZlIRt0AEpkARXClWpxOJRMM1WfMeRpcZ2Psw3rBeRKc\nJwEA5PlQtBxyJqahaFKEvIyCn+2M+nGOEwa7ZGrMy2/30t1CM9ttMpuLSkr0sggveFiwAwCg\nzXLKIc8TzpFiWBlWF1RzJnJExfSq/O1NRqs7aHkxBQk0CwAmn3+3r/+AwzZWrZ6gztGSEYOa\nHIirc3Q1KvVOm9nOsFoFubChOHw3vVYBABZn7LrAlTMrL5qdJmfoomc+P/ubLU3spcZik1cg\nPX92pvf/LR1v0GZJAAquXBx2STTTDeff5qGkZbsoIz8A492QGrIPJwd9H8X3DF8/dL0OlQ+C\nujY1RUqqbPqpBwBsipUgeme72wyFqgid7d7pMzqZCF1NlVVACA2/cF+UWMow4ie3k5HEgrFF\nGhl9XVnrv4w9el/98RmG7uBL8nLsMZfzXVPPQZeNiVrlXipT3K4vuaYg/8eN9bnKiH9F8PEu\nOrWc+s7VNaRQYzQbqwtgn4N+Y5+o3ngZ2yAbmHgvpIS0m8UG2XSI+as/6+4NwoZnyxRKiP0g\neDvifhbnh563gBXRgQclGwY7KaJ3tltaIDxPm5X2rzf1+QQHUhAyUJULbHe3SCvh5ZMybKSh\nEhEx7pm60z+dePD60pYabX99rnlZ9dlb6kIH6rIAR5yODZZeY9S+dzKCGE9pmF6BRCsmzwWr\nNWiWThReaizAoBSeX+bgRUuzSaCVPFxGZTsxEylnVIGHt+iRJcqjGZt14i2YyP0x3qXfUL3g\nnB/6Nkl8Lm2Cvg1JLQ0SBYOdRFGy3Vh1xJntujz0+30RBskOnvRkAN2tU3E6jTz6l7RLEMC4\nwboHet4i7Idl5KBGz1mFnTMN3eHPsPiZjRbTfqc1etVdX4fb1OWJsoPIkLe4oXhMUYwJXwSz\nHQfw7qH4/+gcUuITW0dvrOkSUUySV4nI8IiTuuJlcLzDauyk6d8p/C6T4nq29H8Zu3MeSjYM\ndtJFyXYL8vJLIsxsd97t/rRfaJBs0BIUPJ2C1sld4L4QsyRJyHaMC6xfQvdbYD8cqfJ8SW2r\nXiHw65IF7pjL+YGltzdq1V3HeWeU9cdEIgni21dVa2INJRHMdsc6bKd77IOOFmEs7XCsA8Ns\nlxDxASVTo0wSJDITRCbhU11WZbuheoUZN5g/E9hOyKDm36H2P6HsW6CbBfIoiwlx0PM2sFn0\nXgwHGOwSEinbUQRxu6EwR0YBAKki+a/Ao0ftjl22sEhBaUAxMBuITkHrFJdCkrtZTEmkV90x\nTrDuhu63wH4EuGjJTE3Sy8c1R/rE9PuZjRbTUZ8j0mfKT7NdLdFWKhNZaafXKO6+sjr2fkLW\nHWrn/0EyVj7VBf4RYsiznYQCeMTOJ40SI3kylKGShiVrMybeBee5LJnKewhfWPNWgSlOACB/\nDsgKQKaD3JlQshJG/wJqfwGlK0GmE9jZZ4G+D1JdUhQMg12q6CjqrqJCjfryiIHgePdlv+2Y\n0xn6HNWoQZGO574AIPYeLzrbccDYwNMC1p3QvRbsR4ELHW0qqEZj/smV1nKdwMhTjZy8fWrZ\nvQtrJlxZoNUJF6O33e2+FD4EY5zIbDetQnfX9ApKaKo8Q46ipkAzqTyvoVDgRevrN55ubwtP\ncpHi3fBictBZle0SuZ/FtWyXtFmIMybKiJKeombka5I52Y4PmplTnhj8/dC/U2A7pYaChaEb\nZQWQNwtK7hI+VP9ecJ5OcvFQZDjdSaKizWyn035LSb3e3RPc/yyQ7TabLSqSHBM0uZ2uoA46\nd4cehXGDpwNUVSLLo9PIra6wlMZ6wGcCnwUYE3gt4DdLrhvXU6d+vqDhbH/5jqa+Y502luMo\nkpw9Wn/LpDJ+mjpKQ429Ir+tydHXEdY4yHLtTY4xU4X+qovTtfWFM6r0LWYnAZCrkuUoZblK\nefAqtBctrue2NPVdmv0k0Dj70fHuhrI8wVn4SMbKUpfLNoTT2kmuLzQ56ApN7KWE0yH4Bh/v\nHBmB50qbYiOuadgyL4ikSpTZT5L7IgzdxCiRMhO/PT0zPorJbXFMPzmEn0/TZuE2HP31QEXo\n6KydALpZYN0X9gAHve/AqJ8CqUpuGZEgscHO6XRu3759165dPT09JpNJpVIVFhaOGzdu4cKF\nDQ0NKS1i5hPMdnzl2WiV6o6iwneNxvDOZYSS+Mje/02KLFcoL9W0FYE8D3xhzbvuC+KDHQSy\nHesG52nwdABjBn9Y7aBknB9Mm8aW3jO2uMblY8xO2qBVqOWDJrQjCKio11pNXp8nNKDYzXR/\nH51fGLFmTq9ViJnWDgC0SmpiWcRJ/kbpNZPL8452hr6YrRb30Q7r1ArhcMnX2wXi3XCcstjj\nYlQacRNBJzKHbZRjRtkY/XRRZlATWU4xA1dxJrYQKYoOqfh0RRUzUSVxNu/Ea90yfWpxugus\nBwS2y3WgvzbaE4tuB9dZ8IX1I/f1g/GfULIyaSUUwIGrCehekOWDdjwQI7feKvaVd3R0PPPM\nM6+++qrX6wUAgiDy8/PdbrfHMzDIcdKkSf/5n/+5bNmyuBa8yjIh2S64SXSKVmv1+T/pF/jt\n6Qf2/6zmB8oDE50QoK4F3+HQ/TzNAFF/lkKPa9N5DljNZxOaQ0ieB5oJYDsU/keblXbo+neC\nvlEjpzT5wvVDFElU1Oa0nBTog9jWZK+uLI1yZvHZLrpbJpUd77SzYcN1PzrWPbk8T3BKPF5I\nvEuzBLv3mRy0ARSxsx1/O0/i3TeuRs/gk4p/YpSixjv6gT/UyKmu46U9bKWNyKQlvuouDQ2m\nsbOdhM+nuxlcTUDIIXcqyAsllw2MHwl3ATIsBSJqhx9SBcXfhI6XBFYVs+6DnKmgnSC9VFGw\nHuj8O7iaBr5VlkLFAyDLT8m5Ml6M2ohXX311zJgx//jHP+6555533nmns7PT5/OZzWa32223\n2w8cOPDMM8+oVKrly5cvWLCgu1tgOoyRIzCQIryj27x83ewIC0i4OfYfPd0Ov3/ge3WdwE5e\nk+j5pUxg2gwdr4LtkE4mato2AfI80DdC8QrIvQJ0VwnvYzsIntbohykoUebkC/wK8HnYrgvJ\nq0GMrCxfdUWVQDjrsnkOtUZdvRcALnW8S/MoiqScLkZnu5COUIO/9biY4C9R55PQs8pnAZ/F\n5O5LzrqNkjvJjUCC7dTpOVfGCPR1i/KVtpJEfEzCq9f7HrT9BUyfQN9HcOE30Pue8NCHmFzn\nBlYGC6EshbwrYz9dOx7yrxZ+qGedxCJFx/kHpToA8HZDzzvJP9EwES3YrVq16sEHH3z00Udb\nWlpeeeWVu+66q6ysjKIGagJycnJmzJjxs5/9bP/+/Zs3b7bZbFdccUVaypy5KLdND8Kf2hsL\nCiaqNYIPWfz+N41GH798gqoKSMElKGKNjfV2Q+8G6Hgd7CeAG7gfh47DiEmhg4JGKF4J2gYg\nKACAnImgEhiCagUVmDcDG21qOgCoGpcruKhsx3mn1+0XeOCSeOcujuSmyaWCNXMfnegWnk1Q\nyJCPkJVGOJaF3S08bs7j5jw2s2CSi5HtEohHJj/D/zfwJfaZwScdsflsuEjLu5NpwxFIf+y/\nGwOSVnjHUegP7qLNQv9uaHkGrHvED78DgGgLiBluETvgsvBW4TlQ/FZT6wcmR3KXo2Ch681B\nqY7nPA3e9qSeaNiI9iZ1dXXt3LnzN7/5TWFhjBrdJUuW7N27d/ny5Ukt2/CTp5YBAOkSGF9J\nANxZVFitFK547/B61/QaaZYFQiY8U7E7dOGHyzyt0PMudK0G19nw2m+BYbaCFPlQsACKVoKm\nAYjgTwUB+gVACbW3+uzCUxwFUWuowvLQ52pkFMtyF09LrVCMR3GOclaNQG18n4P+qsUs5gjp\nHC2bxATJ/+ocVP1mM3ts5oEYF/R1+Tl+K/gFLjZiQEzgni0Y4+JLeBjpJAsZm5K206VGRqU6\n0t/Pp7pEs52EF820RWAj44SedXDxT2LmQx1gPwIeoaUs1XWQI7oVlVRCyTch7M96k0cF9qPg\nOmVy0PxX0IMc+HrBfhj6d4KrSaAlVxgHPe+C46jwg/1fiC1wLIECJzuVpgTBRa63YBgmUD8H\nACzLkuTALb+vr6+5uXnChAm5ubkpL6OQe++9d/Xq1U1NTfX19ak+V1OTqHHaeepBHRZZjUAj\noIthXu7uNvqE5xYpVii+W1yc5zkNfR+HPkaQUHw7sD7gvMDSwHqB9QLnBdoI3h4xxbPSYXVg\nlBpkBlDoQVkByhqI0kXSfR5Mn4Rv1oEbim4ETbSfdsbPHd9rZnyXI4tGNvChmjBTryuM1sUk\nKT3tzC76vzadYcLWk9Vr5E/d2CAjRXUMZSldGkZRJLdq0JAT9I4LJbaIhCajGui0l4ybtPjK\nOYNM3CgQlOFS1rEvQ1JdpBjHxtPH63J/Owk/Zc7T0PG3qHsQkDcdCr8BsogDzgAAOAYuPgt0\nn8DTqx8F1aj4StX73uBKRDB5VAAAshyofAgIBfiMQHeBtwu83QayZVCncHUtlH0LZFGmPgYA\ngL6PwLw14qOEDEb/P5DFnVLEpLdBv2CDZUA31miDJ4JT3apVqy5evLh27VoAWL169f333+/1\neg0Gw4cffjh79uyUFzPjhaQ6ACBd1vBsp6GobxeX/K2r0yG0bn0vTf+tq+s7RdXFQIT+vcKx\n0LM+kRLqVGBli0FhAEoPCgPIDML1cILUtZDTAI5TAg+ZtoKyEqiIvywoGVFep2kTqp9rOW2f\nco2CiBytkjKKokCjmFNb8MW50F9VFpdvV7OpcYzY/sWpHiGb9AZfk4M25Cjii3Q8/inB8c5v\n9dhApU736CiTn8Fslw2ydNBGzGo50t8vPtsNjKWQ9reT5fNYe3BgOwiO42BYBPnXRhwxat0j\nlOoAcqfGneoAoPAb4DoNtIn/biDVAYDfAe0vAOMC7nKHHBOQACoAMKg8AADu89DyeyhZDrkz\nIh7f8nm0VAcAnB+se8CwSGR546qN43eOGO+GlKgb1fr163/3u9/NnDkTAKxW60MPPTRlypS/\n//3vEydOfPDBB1NcwmFMsE1WL5fdV1qqIoRfeSvDvNTT36IYn7RCKPLBsBAq7ofqR3Q1KyC/\nEXKngrIyjlTH010DitCcagU1sF4wbo5ebV5YqtbkDfwe0QTdp10Of09rCjrShlnSUCKXCbzg\nm092ef2i4hTfIDvsOttZrEaLk47yFe3JfMtsUPvsoHZbqeLoS4eySTx5ReQ4hqGqruPbW0U2\ntsbVJmuyiGp+CeVpFbseK+sF44dw8fdg2wf2wwJf5k8FnkVQUHijlIKRCihZyTfIXk51PL8t\nONUFu7wn64Gu1dD9pnBnbts+MH4YuwzWLyOdKPS8ktpYM7NlVtRELxs2bLj99tsff/xx/t82\nm+3111+fMGHC1VdfPWHChM7OzvLLE3ZkLc7WR2j1QAnUH4RX1wUI1tuVKBR3lxT/Y/DExQEe\njn2NnrgMnFMhxrDTGJTFkHcVaMcEx3d+xK7ADMYxEQrIXwC9G0L64VpBrfO2gXU/6GZFfCoB\nVfU5Zw4J/IJrO+c0lKnkyoi1MkmptMtTy+bVGbadMYZsd3rZL5r6FjYUizlIyPTFyZX0yCiy\na6DFScc1TsXj5hKpt5OQ6rDSLntIrbcLBLjgyUHSnOriymfhz41Zbxc4/kBFe1ws2+Lbn+6F\n7rVx7K+bDfKi+E4RoK6D/Hmm7vApi6MxeVQD9XYAYDsE7gtQ+q1BU0Y4jkPPO6L64fmt4DgK\nudOjnS6xcJaBVXeiauy6u7snTZrE/3vbtm1jx46dMGECANTV1QFAW1tb6sqXIbi+VvbgRvb4\nNuBCb8BRUh2PdFnDq+5qVaq7igopwSGjAAzAezBrF4yTWFxVBZQsg7J7QTtO8C2WuKqsogzy\nBAY+W0FttX5t9fRamYjpRKuTF5QKdKfz+9nWpnSMolg8vkQlF3gptpzucfniSBvDotIurgEf\n8eZmyfV2kuvqsJJvRIleRZfm6UjiqpyLfhzxj8aXM3y9YI8wdCApSCUUiG3KFGRSLwKFIe5n\nBdfw+SzQ9lfo2zgw4YO7GbreCL8XR2SJNoQiWVVuGTWuQlSwy8/PN5lMAMAwzKZNmxYuHFgn\nzmq1AoBWG2F1kWzBdTezRz8HluX62tmTu4L/SoiZ6gLC491Erfb7paXqCG2yHMDHMHkjTOMi\nhD8hBKhroXQFlK4EdW34iKRgErNd7kxQCNVvcX6wbAfgrAwb+ArZpaIuhxSKVsYOt6M/Wg1i\nUqY+0SqpBWMF/uh0+djtZ0Nr8iJJUYNsEg8obdHbtGU7NNLFapDNnMEQSclzIccUvz2OiGD+\nXLjiquweyJ0m9iBR6BdIGHwQYHLQQMih8DYJC9MPbr1lwfwZtP0P2I9AxysRFzdXCPWZ9lwU\nHOebiiiWIdlO1Gs9c+bMd9555/3333/iiSd6e3tXrFjBb1+9erVGo6mtrU1lCYcY9/Un7Mmd\ngT8OuO5m9uxXko/Gx7tAwqtWKX9QXqYTat7l7YH6t2C2P3aLOQna8VB+L5QsA1WlyMLoNPK4\n4x1BQsF1wjPt0UZwHA/eEJLw5ApybL3ALwiOgwsnbaInlZPuurFFGoXAB37bWaPTK7ZOKFmz\nn1jd/u1NxvWHOw63W5N16YmULdXZLsFaN6y0SyMOXGfBsg3sBySvKB1Nxk9Sk9w8F+XI0bOj\nqNjht4FNaOEv1WjInQFl34HKH4Ey2jI/McjyQL9A8rMvl19VDTpxgywH31xCe+Z5WqHr9Yjz\np+quhsofgWBdSf/OiGXLRqIqnO6///7XX3/99ttvB4B77rln7ty5ALBmCQ6kigAAIABJREFU\nzZrHH3/80Ucf1WiE593NAtz+D9mda0EzaJ1Wru0Up9ASNZPFV9eFC2S7Io3uwbKyN4zGTq/w\n79BTUP4KXHsveVArI4BQAakEQgmUAggFkCog5UDlgbICZDmSCxMfmR50VwtXbtv2g7oOqNDP\nQyDbVY/WGjs8bldoV1aHzdfR7Kisj3gJSelpp5ZTC8eVfHCsK2S7x8e+f7TjrulVckpU5SjJ\nWGm3xNlPbB7/7vOmL871HWm3shwHALmkbHpV/r8uqKNI6UNukxI3U9ffLimxLOmd7aR0Zsp6\nHANdr4HjxMC3cj2Ufw+UYv9WFCtCZ7tMqK5LXaoLHJ/vbyfyRDE+pZYdwiMDCq4b+IdmDFT/\nG1h3geljYNxxF9ewWPjPeBFCk1PBdeBtC1uviACFHhRloCgHRSkoS4FUg+Vz6L/cMjaov10U\nuVOg5E4AEnImg/1I6KP2I4GpXrI70vGizWMXzOVy7d69GwCuv/56fja7AwcO7N2798EHH6Qi\nVzilThrmseOMF9k1TwLLNA0OdgAAQJDj5+jqG5JyIlajo1n2rV7jOU/EHzyDTHZXUXGFMiX3\nofjHUnDQ9zF4WgQe0dRDwcJIT9Np5DYT3XS0X8sIBIKCYlXd5DyZUHMtL/FsRzPsUxtP2j0C\nOSNXRd0wrnhefaGCih2wWErHcpzZ57N7fflqRaFWQUWdDy+Q5452WBl20E9cLikDgBsnlnzr\nSoEVPsRI7hTKEhq+o8e7SKku8G7GdcZkZbsM7O+cEYwbQifOoNRQ8YCUqS6iCwt2IyHVSSb8\nQWXccOGXAtVXylIY9e+hXXH8djBtBOs+0RP/AmjGQuUDEppQIVJ44hhwfA2ei0DIQVEMilJQ\nlgEhNJWppwWM/wTf5bcjRrbTjIGKHwzM4eI+D23/K7CPYZFJeX08FyGRQV+ShrNEJzbYZZr0\nTFDMnd7Nbv5rk1rgD9Y8kiavWEKUCS3tGj9Wo2M47kOz+YDdHmkfEog5urzr8/NlUWYSlkTK\nIFnGDj3rBs0nGVB0i+Cf+IFm33NHbVbTwE9pSMJTqWVjpuoEV5iFJM1XvL2p772vOyI9qlWQ\n140rnl9fqJILBwivnz3VYz/ead3Z4u9wDVwFRRIGraIkV1mSpyzNVRXnqUpylSW5SqWM+qrF\n/EVz35H20DzH41MdAJAE8dRN4+sL46t2TdGqGMnNduHBLtL7KOa8SQl2wXcdzHaXedvg4p8F\nlp8iVVD5w+RnuwC5HpIa7Ph8FtfkwJDBqS4g9LNq/gz6NgrsV7oS8iLMUeBphf6dQBtjjDyg\nNJDTALo5Eae7iyo5VWKsB/o+DO7eEzHbqaqg8iEggwLixT8ELyZ2eVbkqsekXVFchlOw2759\n++rVq9vb2z2e0Bf3z3/+87RpyeikGY+0rTzBHdlyZo/Awll5hBdIipx5M1EUXp8nBT8rys5+\n66f9lihvSaVSubywsFAuaehDZFKynf1rsO4V2K7QQ9GdA0vNBgkEO6/bf3KfOTBDc0i2Iwio\nrMupqMsRjK+JZzs/y/3XplOWqNerUZCNY4rmjynSKgauwuyij3fajnVaz/a6AotYmLxqOytq\nhiRBgVTHq9Srn7llgvgG2ZSudSZtwEp4vBOf6sSfOvFsF3LjwWwHAMCx0PqniGtrkiqoeADU\nNSk6Of+OxBvFBIXkM5HHzPxUx7v8WeV8cOFp8IdVBMjzoebJ8F+/aZPkhk7nYTBuCvT1FMh2\nimKoegSowX8S2/ZB99rQ/nkAUHw75KQ8q2RCsBOVXj/55JMlS5bIZLKSkhKVKvTF8kboHJYd\niKkL5cYO7twBP1we/JtHeAEAWIY9tIm8ehmhExhuKVeF3uR8nmgZmp/xbl6+TkORH5jMbIQK\n83av9/mOrqUF+ivzctO9DkCInGngPicwTTltAfvXkDcz0vOUcm+JvqnLNIb/1klxwdmO46Dt\nnMNp80dvlpVMRhJLJ5a8tT/a4tAumt10omfbWeO8ukKSgOOd9g6rcCt5LilLJNsFa7e4Pzja\ntWxaRcw907B8rcVJw6XJBfWigxQ/ooKPd4ItsGJyOb9PlHiXYGe78BsPdrYDAOjfHm3FdNYD\nHS9A+f2gGZP0MwfekeB0JS3kheezuOaQy3yXP6u2fQKpDgD0C4Yw1SWfdhqoaqDn//hhraH9\n7WQ6qHwgNNUBmIhJ4C8ECJtIq39vGoJdJhAV7N58882lS5euWbNGr8/CZWFiIsdezfp9spYj\nAOAH7UCq4/l97P4N1FXLIPfyKxMe6QLbxWS7Gbm5OplsbY/RG94mAgAAPmA3mE0nXa5lhYY8\nWXIqlnUaedyVdgQB+XOh9wOBThv2w6AZE7wm1eXht4wHjO+V5fV5vXKzo4bfFpLtAMDc63F9\n6Q9vlk3KKIqrawr2t1iajM7ou3l87JbTvVF2MCjdJq9aWrYLqa7jvX+se9aogkp9xEVB0hDp\nIDDYxcXy75rlUkQTk/AsfgbsoAiruov3XYsZ76QZCf2mpfCZBBeDHoSlofMVqPjBoHliU0ZC\nc2r0+UQiHWoYpTqeyUEDsAbBNcQoLeRdnfYSXZaSny8qH8q+C/1fQP8O4NjL9XCUBoq+B54c\ngLCTEjLImQ79YSP86C7wtIJKYm/mYURUjUhfX993vvOdkZnqeGTDXKKsHgBk4JSDUw5BmcDr\nZva9D24HAMhVRKRUx4u5Az9atl6t/l5ZaU7UVrlzHvf/dnSecMZIJ6mlKIMcodXPOB/07xLY\nztJgXA9eIwHc6KKdVQUHSGIgFDqp0HTocfuPf2VqP+dIei9QkiB+dG3tkoZiZcI1ggZl/APN\nImMY9qUvL7ARLjitqY7/t8sX/NVi8/BfIYuSWfxM4It/Iu3m6KD5UCRn8UhPlDbMNspdZ6QH\nvt73hPvLhmBp6HgJXE1JPHP0V1586gres8/pbbO4mME/R4KHGnapboDzpMkm9Js/f67kQawZ\njSBB3wjl3wdF2cAWRTmUfzfaehi6WcI1lzah7kOJYxxg35+SI0siqr6nrq7OaBQ7iWt2Ighy\n6kLW58kzNfMb+Gzn49tnPU7qwNvk/HsARC3Ayme7SLV3fL1dhVLxSHn5+ybzKXfE1VTdHPv3\n/u5p/pyVRUUaiqLjnFosUK3CP1FKpR0A5F0N7haBgfSeVnCfB3XQHIecH4wfgCcw2whXrDup\nUZouGOfRfg0I1dvxzbLmHq9cQVJyAgBIEkiStNF+iiJIigAAuZLINyjlyvgimpwib55ctmBc\n8fYm446zRpdP+hTBBqUb4ulsRwBML9XNrNZ/cKzT6Q09b7PR+cmpnqUTBk09lf5IJ35Pq+1y\ny0jItIi0m1OoiQRrWCNNwhJvg2zM6DZyG2TtB8B5WuzOfL1d+fdBMzbxM4vJ02Kq7i6vx+Wi\nX/ii+VS3AwByVdSd0yuvG1tMDN4tcKjhmuqAA4vQn82kAvLnpb0wl6X8ryNlJVT+EBgbAAFU\nrDmTqVzImQD2Y6HbnaeAsUJyF4fk/ND9DnhbwdsBhpuTeWSpRA2eOHPmzPLlyz/44IPMmYs4\nbYMnAOBC66Xfeowv9+B6zhQ0pjIQhOQAWj11zXLIi2PtlEjZLnh52QN2+yaThRZqlnXLA21k\nsh+UlVUqlXAppUUX3lLGP0tKsAMA1ykwbxfYLsuBkm8CoQAAnZoE4wZwNYfv5QdFS89cq2tg\nIK3gTCihJxxcYUPKyeqxOQXFQsPmRXD7mB3n+j4/0+uk4453chnp87MgYiAFATC+NPfa+sKr\nK/QGrRIAtp/re3nXhfA9lXLyt7dNKtIqIfMinTSysE7M8YrSJism3om/5Yy4bMc4oeU3wAhV\n/1A5wERY7o9QQPl9oBWqrY9HvFEgPN4FhzOG45788GSredBfwuNKcv5lzuiyvIQ/glH5Gdbo\npE0Or9FFm+xeu9efr1FU5aurCzRFOcokd4Z2nYPuN/l/Dupwln8tFN+e3FOJl4l13t526HhZ\nYHv+PCi4IXmn4cD4f5dXdVNVG8Y/Ejt3ppioYPfaa6+tX79+y5Ytc+bMqaysJAc3Ea5atWr8\n+ER/wuOVzmBn7jjL3/l0GjnQbmbHarCZAIJSHQDwVRUKFTnrdqIkvnkBBONdcLYz+/zv9Rlb\nBw9SCaQ6Xi5FPVFVVXCpy51gvAvPcwGB/SVlOw56PwA6dOJfAIDcqaC7RqeRQd8mcJyKfASi\n19rQYZnBcgRIynYAUFajLRstfa5sr5/dda5vy9leh9Asd4PKClChV08uz5tUnlet1/gY1uSg\nzS661aPocXh7bJ5eu7fH5u13++BSnptXVzivzsAvYR5YQIwDePbTM8c7beGnmFSet2rROCr1\nqS7VkS4gpdmOFynhxXXLGXHBrntNhKULRkHFv0DHy4JrMQEAEDIo+w7kTJJ8ZmlRIDjbhVS5\nfXq65x97W8OeATIZeduUsm9MLqOSMVGUg/Y39zp6HV4+yfU56D6ntz9s0vUAlYKs1KmrC9TV\nek11gaZSr9bKE+sY3fU6uC//QTiQ7QgKRv8HyIasu1QmBjsA6HhZYEgQpYbqx4FI0swS/TvB\nPGjeDEOeBqoeTeH0QCKICnaNjY07d+4kIvxUbN26df78+ckuWAxpDnYAEBgkCC4bs/1NsIWP\nMwcAAIIkpy8iauIeehMe74KzHQewx2b7xGxhgIOwVMebptV+v6wseEsgrkWJdCE7S6y085mg\n9z2BuZEIEorv0DHHwRY2FXgYp7foQu98r38gnMWMd+HZzlCuqh6bm8hvbx/D7Wru23qmt98d\n+ptaRpHjSrSTy3UTy/L0auFfCrKcy79YaT9rdfvyNXJ50IzHIcvCGh3en35w3CvUEPyDuaMX\njE7ypDbB0hbpAtKQ7UAo3sV7yxlB2c51BtpfFNhOUDDqCVCUAuOGjhfDVgsI7CaD8vtAO0HC\nmZOeAxy0//H1Rx2R1was0mvunzMq3qkieSzHtZhdRzqsR9v7zxldkXrBilSYo6jWayaV510z\n2pCrijPkCdVCGVQeyJsJpd9KpFSJyNBUBwDOo9CzXmB78TcgZ0YSju86Cd3rQoYPGtReIFVQ\n+VAif/YkSFSwY1mWTGC9o1RIf7DTaxWBvuFgNzNb14BncPtF0F2YqJ1KTl0EZHzDzqNnOwDo\noul1RmMrCM/TSAA8VlE5Wi39/plQtrPuAfthge2USkcJVEoBABByKFwE/bvAN1A15QfFxd45\n/c6BqQGjZ7vwYAcAuQZF7cQ8StziYJH4WW7vBfOOc33dVk++WtZQljepQtdQnCMXsShFcLYL\nEZLqeJtPdK/e3xa+vSrX++SShrx4f++Lk/5Ux0tPtuPxCU/aLWdEZDvWB62/Bdok8FDBQii8\n8dJuHmj/m/AyMwBAyKD0WxIWm096FHhzX+vHJ3ui70MSxKKG4junV6jE9c60e/xHO/uPdNiO\ndvQLLleTIIokplXq5o8pmlapE1ub2PsOOE6GbSUM438MigTWhE1M5gY7zg9t/w3+sBuQohQq\nHwzfGxgHMHagNECJGI5Nd0Hn38NHHRnUXiDVMPo/QBl77qoUwZUnYjN3nA3cTgaynSyP62tn\nP3sF/IPf1OBsV1ZHXnkryOO7Q8TMdqQKNprNWy3CkxjXqFQ/qayUHGoSCnYcDb3vgC+0U45O\nEeFnnqCg6BbQ1IOvH3rWgv9ySu6zj2szzRLTLCuY7VQ51Jgp+fEOp0gWhYqI1NFbMNixHPef\nm041h829YlC6p1Xq7r+mJrnFG6pIF5DObPf/2TvvODfuOu9/fjOjUW+r1fa+697tOLETJ3ac\nOL1cyhFKEgLhDkg47h7yEAJ57oA74O444DjKUQ4ukJgAIcFOr7Zjp9tx77ve9fau3kbSzPye\nP7Sr1UojaaQtXod8Xv7Dqx2NZqXR/N7zLZ8vprAYz3W2EwNgNGCm8G6OPAvPToXH+TLUf3mS\nQb8soO+Xqem/yWJQfrvaEe8AZoADBvzCV7YfUxzukimnmf/URfUratK/pBKl/kg8GBU94Xjr\ncOBIv//s6FSDcypl1rEbmkovaymtK8lZTBIfRc9PFOyljPNR/olzdcbOXapLyPN6+pS8hJw3\ngeER90HyIO6F6EXcOzF4V9cAx5ZcU5KlIPp/mQxJpMqhj6PuizCtmJbDL06qwO7rX//68ePH\nFX8liuK//Mu/LFu2bLoPLI/OFdgB8Iw7FVNXr/z6Y4ik5GQnp86ItZRZ/9cwFtyAk4Z3SbZL\nZlRbI5HHhoa8okJhx70VFStNxaQbEopFaJFgByDSkemGlQXsCJzXTxRfx4Yx9EdIE0WEoaiz\nc/QSIWZBTrZTBDsANiO/cI3NaNFgmgaRFSRFtlOkuoR6PZGvPXdCSkGupIvKZy5pWFk9bQ1c\n55zqEppptkv9xO3FTrKe0jIpehA8AjkGw/zpKbWRwogNIDaI6ACi/YgNQQoDBMYFcFxTzEtE\ne9H9n0pzpQhq7oMh46IqR9H3i+xsR1B6w8Tg+ZyaCQ743o62gz2Ftbhe2GA36zhfRAwI8UBU\n9EXioexp3FlTfYnhshbHJU2lyina0afhP6DweNW9CW+2c8J2cx3spCC6/3OC2AoQgWkpHFcq\nRO+oiP7fIKqQaQHgaLgFjqsLf7nplCqwu+GGG958c1J/dSgUEkXRZDLV1NRs3bp1zZrpSFcX\notkEO+rtnPiBswLwJIkq7Jdff4y6U/pk08qieD2z7hbiLNgRMZPt0urkzkQi/9WnMPPUqdF8\nra5uKvNkp8R2oy+mZm2yUp1jC8zLJz0m9GH4qdSwNgUTEsrisk6StWCNFtYuMiXg7BSaxEyv\ncED0jAhhUTIoJVZYlsxbabM7tbMPdshguxxUl9CfD/U9dag/8f9UbzyLnn346kXJyWZFa44g\nXaqmiHeZbJd1BO0ss13wCAa2go5/g4yLUXYzNGWF7SQ2CKEL0UFEBxAbhJijjYbAtAyl14FX\nP8hIRvcPISgtS9Z1KL8jy5Ni6PslIgqN7WMquQKl16fPnp+smYCAo32+f3u1ddp3ew7FsszK\nauvtK6smBfCEbvQ/ojDJV1eHqnuTP80y2811qktoZJtymZAaEQ2sF8F+GUjSdWFyG2yaLGsc\n8/6myNeaPhWZihVF8dChQw8++OD9999/2223Tfth5dW5BTuksp0Yk9/6E+0Zj2hm1rszLLPq\nGtJQTFAziXcJ6zs6Ofj3i/6BY2EFn4LbS0s32oqfujglsBP9GPoTaAw5krAllynPqI6cxfB2\n0Kz3zXYSBgi0TugaoGuEvn6wB52nA9lOYULQsNBSUW84J0E7pHTw5QU7SZa/9syJXm8EGabH\n6xvtn1g7Jav0OUh1CU09dKdSs8d2sWF0fT9x/k+IcLBthGPLpDnlypIROAz3a4j2F/a6YGBd\nC8c1UDOqwfM6Rp5WeJwzo/4hsNmzgQkTuxwGxbaLUXZbDt/76eIAjyQlPlOJ0q89fTzxxUnT\nxnmOfV2ecOEeRsWJADaDxmniHUatSccN+IRuT9if0YOlXixD7r6o7soFZQBAo+j7GWIehe0q\nPg7DgtQHZo3tzg+qAxDrR+8vprQHzgT75TCtBmHg3QP3DuXNdA2ovMtRcs5K65KaUo2dy+Va\nsmRJZ2dn5gDZmda5ATtuEldNsB2l8qFX6PHdYz8q9TISRw2paEFlE7EWdu8eF2jasIok3g3H\nYt/u7smcKmtg2G/U1+mLXcwwRbYLHIDvvaxUZ1sH24aszw2dxshzCkUkKbKTpE8VgdY5Gl7d\n3tkoZ796V9Ub+VJOo2NYZlaH6ybZLi/VJXRmNPjN50/Z+XQ/agJ8YWPzgvJi0utzFulSNQt4\nVzTYoaBlksro+VFWfxDOCueNMK9WjmlREf598OxUGL6sXkQD2waUXAHWqLyB6EGkA0NPKM+Z\nqPxk/jYIOY6B3yCUWb8/LvMqVHx8UoneuKaFAzzSxI2fnWVfOz38yDsKb/j8MuM/XbfYG449\n8m73/m4lHpqCGEIaSw1VVl2ZSeswaUuNfKlJ6zBquIwWQ78Q73aHuz3hbk+kxxPp9QpiIV9J\nAty9ru6qheVZk7B8GWruSzujpg52Ks26zxuwA9D/66zN3erFl8G4GJ7dyisUb0fV34IxOOzq\nY+czpak2TyxevPh3v/vdqlWrpuuAVOocgB2nUOrkSalyo51H5HeehCQqgt2EtAZS3kQq55Hy\nxkJbKyZea5zt/jgy8qZPIU2zxW6/yVGAVXKmRlzFfmmpZPU9jphb4VeWVSi5Is/TA4fhejXv\ni6TgHQKRytODN8fFPG0WrIbRaAmvZTVahudZXsdotAyvY3WGmZqZnWA7IW5Ruf3Wvd172zsz\nHzfyzN9c0tTizLJaZ9F5QXVJzTTeFcx2chggYMZmyahaLF2vwPVinm30jSi7dVJRtizA9zY8\ne3LmWwsRo0PJZtg2guFBRQg9EDoR6YTQlesljItRrS6FRCUMPo6AEmeM7WoRKj8FZtJ1cOoQ\nkIp0CYXj0j9vO5ZpcUKAb964qNkxdi+0t8vz2/c6c1jNqZTNwK2oti6vti2tspj4YtrVJUoH\nfMLpocCeM6Nn8s2qTogAX75YXsG9oPzr8jsU7WamwnZpn1S2XZ1PVAcgdBxDT8zg/hktqj+T\nqLiYC2A3JTOFoaGh7u5ujWYG3bbmipSoDoCd45JsRxqWMyab/PpjEEK52C4apt3HaPcxEIaU\nVJKKeaSqBZbSgg6HhHwAqNF6nd3+vj8gZBRB7/J4N1itSb/iIlTkhDHAatSBvRKDf0q/rTEv\nUVVebV4BOaI8MydFHmrAON6Z9QNLa584NXRH9ulrACDFZSkOIZi+DOiMbP1ii9E0/cYiMYEC\nYOCT1U2w+dhKc8cQP5pxxQzF5B+93n7bqqqNLWrPk/OL6gCI4x4+M0R4yeRdfsVHMPwMot0A\noGtA2Y3gSvPHMKK9cL+Sf+eRs+j6AWzr4bgWlML7BnxvKkzkm4pkAaMvwPsmODuivTlqGybE\n8Ci/Xe3+CYvKO8Hq4X1LeYPQSfT9DFV/A1bViMXcyuS5pF46Pqg4GWNDiyNJdQAurLcvrTI/\nebDv1ZMjhXa5MoTUO/Sra2yram0NDuMUY/4sITU2fY1Nf8WCsgG/8E6Ha0/76EggFyGZ+WgT\nzRhmn5BpWTYTwaLn42XiWuKRud4knleGReArEBucmb0zKPvrgutoZ1KqInY/+clPzpw5k/oI\npdTj8bz88sssy549e1arLXKaU9Ga1YhdME8kPzVuh6Bbfv0xGsrjqDSmcXAiFdXMmuthLini\n8F6ISi+4FcJjF5rNd5UXeetAgW4hurffOxiNE5DFRsNSo6qL2sS0UO8b8L438QvjIpReC6La\ngsSzB769ajZMhu5ErvH04E1+T9arZLYWWgCshlm81j6jDil52S4xPezUYOCnezqyfSc3zSu9\nZWVVXsur847qMjUTeKcK7KI9GNwKKcUqkjOj6h5wpcixvFER3d9HtJBlg9WDSsop0dlX2S2w\nXVbws0afT/PcnyRtFao/B86MYqM7OZAOwHAw+q2XWuVEEUZK0E6rYb53y7ISg8IndXLQ/6u3\nuwb9yj6gyadbdBqrjqt3GJZXWZdUmvVTHBSRUzKlR/t8e9pd7/d4RVHha/t/l+1dZR9WeCZn\nQc19yYiyooqgsbyfVGKf51m4LiHJh6E/T/T2MVpwdmhs4GzQ2MFZwdnA2RHth+sV5UFK2eS4\nJtXuZy5E7NROnti9e3fag4SQNWvW/PjHP163bt3MHFsuzSmwQxrbiVH5jT/S4XxztdMmkmkN\n7MY7i2C7uCz/oLe3R5P+DSfAg7W1NYUwt0xphyAcCoUOB4MJLxVtYIwhVlpMV9vyzKtJmwEP\noQvhVlAZukYY5+Vul1NQ6DSCRyD05e1UT7KdbL+yvXvZ6KDyhTsH2AEwl/DzVkzrZOgM5Wa7\n5FjYrfu63z2b9ZRbUG769PqGHH2yHwCqU9S0oF4etoucxdDjCrClsaLq0wnXA+XFcuQZZa+s\naRThwZdDVwG+EnwlALhegZDNf6QQ6epR98UcHQ+55NmFkWezFsXyTtR83iUUUEIgiNK2wwP7\nuz0ixyypNG9e4FRENAC/ePPs0dRxfONsd9uqqltXZK1eF2V5d9vo6eEgQ2DWaWx6zqLVmHWc\nWc9ZdRqrTqPGhHwmFIqL73a4X28b6RidyDtsruy6d17GGHsAIKi8C/rm3PssFOzOS1wrVJIP\nchSsJacHJEXwENw7FZyNM2VZg9KbUh84b8AuGAyKky3TCCF6vZ7nz1l4dk6DHQAqy4eepa3v\nZdl8MtVhvN/CaGc3fQK6gsvk9wcC21wuAF7tpGvoPL3+i9X5O3RkSs8K0YOh4MFAwD/5LjkJ\ndgA+UuZszN4lk0510yUqItoPoRdCD6KDEy4SGbKTMAiHms92dxr6OpSHl+dmu5r5xrLq4qfN\nqlE2tmNSxsKGYtJ/vNaamZBNymnSfm5DY7lFAdk/qFSnqOJQLyvbhc9g6I/pDa1J8XZUfhqs\nBZnrZaRD2TYWAKODnCs+lEuEhXERtLXgK6CrgsahcGsUPArXC4VFCtNfhUPd/4G2qvg9+N/F\n4J8UbDgS0la7Su5T7KXIlETpt1462ToUSs5vZBjm4kb7VYvK0vDu9FDwx7szjFeiksPEf++W\npfwUemXOrWRK/+fts3vaXADK9aHvrHlDxyjd1lrXwXGtmh2qZ7u/CKorSDQG79vwvZUrrK5r\nQOVdaaf3XAA79hvf+EbejR577LHu7u4LLrhAlyL2nH55tm3bduTIkS9+8YslJcWkLwtTLP+l\nWc8wQmpnJiGkciGxOxH2TnIwTigTTmSABeIChjtJ7WKwhQX/K3j+eCQSkiSdFNdJcYEb+zK7\nRbFBq3Vm4W+R0uPh8Csez+PDI2/6fV2CEM2gfEkLLja2nIxI8ZVGU7awm04zM+cDYcBZoauF\naSmsF0BfB84KQiCF09YSARo9ooj1Wxsu0uo574jCtzGe05s+4BXAOjgZAAAgAElEQVTtTi2n\nmcFbdkKjhEbp5JvFVKoDwLPM8mrr6aFQIKocqgzHpPe73NU2vdM8wXY+Sc78+D7YkkUwhWfJ\nBEr1mQMSwycx9ESO2wZIAiJnYFwMho/EJEMyYipH0f8LSErVncbFqPt7UIpoT1buURThYVuP\nqrthvQSGZmjLwRqUA958OWwXQ+NAtK8YgmSNqLgThjyBnzzS1oCvQOiY4t/oCsXB6hL2uXn1\n0onB11tdE1O5AUpptyey+4zbG4lX23R6DYsE/bzVpfDt4Jg71tbOdxRvz37ORQhZXWsbDUX7\nPOEHluwr1ymcV0FawlfdAaLqejvpXM23ZWHH+oEXYaFvgHkVaARRpdoqvgSVd2d6GBn05/4M\nVAV23/zmN7u6um699daZPx61mmtgh0y2A4hBTxqWM81riL0KWi0iAYhxBapLKPHti4Yw0kNq\nFxc0Z5YQYmfZw6GxNqtUvOuJxS6xWJjJVVkBUXzD6/vt8NBbfn9fLCbmBAJJiziVRZbGYtTK\nceVKmDhT4bo0TUDeEpgWI3g0rTBcgEYvuUF4Y3mzvUxLKRhCACKP85yGYXKxHUUoEHdU6sgU\n7J1V/R2T2Y7QaNoGeg17YYN9wCcMB9J/lZAk04FBgYSplddo9aw/h93LB1pFgB2AdLALHcPw\nk/mbDKQwIh0wLQXRTKyXI39GSMkdlzWi+rNgjTDOh2Ul4m7ER/IfGauH/XJU3gXzytzlUyki\n0FbDdglYA6K9udg0+RKGebBcgJIrUHYrtNMxYFRbAV0dQunfR5egA4BoL8yrwOQJHbnDsf/a\n3S5KFFw6dlNKe8bwLlZl0x/s9b1zVqGquKHEcNvqamVwP3+UYLtasn+ZRSHPLlHmW4fWyKy1\nqVRtglsN230YrssqRgvDQhgXIO6GmJK7Yw2ovFvRNnIugJ2qVOyLL7547733Pv3002vXrp2F\nY1Kj2UzFQl02FpkJWWBSkp7K1OujfafR10o9A+m5m0lzZluYdbcUxHYAHhkcahfS2+u8WuPH\ny8rWW8YcN85EInt8vsPBUKb7nRpZWfYf6+tJdIx7Em2zs0R1mcpijGJnYqj5HHhn8hFKERek\nqCDFonTUF4lHaTwqeUZiVAnyKhqMVY0zm5BNKJGWTQvXTdqA0ueODr56ajj1KBmQBXrDUr3J\nPB4yp1a2fpFFw5/Hi9lUNNWEbPAAhp/NjDZ5YLBDKQ6nrUbVJxM29A7Sjr7/UU7CZnrCBU9g\ndFtWmzrOAvtGWC+e0vhXWYB7J7y7JyePCLTl0NVD3wBdI/iygqtdVUroRN//pAYvx8AOgHUN\nHDcpP2tcP97d/u5Zd2q4TlEMIRqOROPpnxcBHrhyXsP4qIapOBeee8X60fcrxTuNP3Uu2N49\njwCfWl9/xQK1bZi5E7IfUp1ahVsROAAxAF0FbJcqjBoDMDdSsapueAcHBy+//PJLL7106dKl\nTU1NBsOkZe+hhx5auHBhtud+MERMdjVsl+p+oiCNjThtxFmPlVch7Kf9rfLhVycStfEJtqMD\nZ+T9LzFrryvoEnxNif2/+yNpi4wtGnre5VpmNJ4Ih3d6vX1R5QiQSvkk6TWv9/rxKKlTz8fS\nX3AWZV6OcCsi6fakHpm3j2xH9b3JenBCwOtZXs8CcFSMDRnT94T7zihYSQ12hSx2jck247Sa\nA+nGNiBk45Jym1X75JEBWZJZwjRpdYv1Rj3DGpIz7TggJJ056mteYuF15/NiNrsacz/x78Xo\nCwky8yCd5pXZLtqHgd+h8i7QuKt3u4NTOv8tqxWcfk2LYZwPz264X5kEXnwp7JthWauyEC2X\nGB1Kr4PtUvj3QnSBtUJXD139tNiO5JeuAbVfQPePEknhCaoD4DsI89qxng8lHev3qaE6ADKl\n0bjCe76mzt6QMoCrAHebuSYax/A2RaprDdif6WkBQIGELbNKtiva/eRDTZJhPgzzz/VBqJLa\nrtg9e/YwWeLbO3bs2Lhx43QfWB7NcsQuoSLjdomgHafgUks9g/Krv0JsfPGYzBKkeQ2zcktB\nR/jkyMihkAKsMCBu7fREoTSE+af6Ottkh7xzhneiH/2/USxutZdekm3ERQLsKEXbYW/Qo5C6\n4vXsorV2lp3VSRWZSnZC9IxG9h4brdfotNn9Yjgt07TEov2LZLsiG2b9e+F5I3tHZzUkj13K\nEmDTN4PVIXgcgEM3uVSDs6L+wVyDuUQfPLsgdIM1wrwG5uVFdqTOSbn6dsGl5Oena0DVpxSf\nIsryQ08fH/AJasBOURqO+adrFtgnN1icr2DnegE+ha47Qea++v6lwyktxgT4wsamdY1qjegV\n2W72w3USpTkMm5JjGBnRO1tHNM06byJ2O3bsOLetEnNEKuN2ClKiOgDEXsFs/qT82q8gKuAF\nbd9PdSaycH3mr7Jpi91+LBQRM/JKMqgtGkJG26yirCy7wmRaYTKdCIV2eNO/XXEqP+typTnk\n8fqxL+psEx5nge0yRTMtj+s9aOfZ9QrfMbuR94RihKBhofnE+145I60Ti0i9Z0L1C859qUQ8\nJo/2C74hYT6fh8vFqNxx3P8Xy3YFy7cX3iy+rwB0dSi7BXEvhn+j7B4cyWjJHBNB+R25qA6J\n2WJ/VcChng+a4APLRQgcUMg4C50IHYdxSeZznz8+OBWqA7BlgdOe4YpyXgbtIu3Z/Du3ti8e\nnmwcQ4GfvdXpMGnnOVVdqTLjdrNMdWddoUf3drUNhXgNc3FjyUcvqE0b4CGrmXT8oVRIFdh9\nSHVJqWG79IRsFqob22FpLbPxLnnXbyFLqdnYhOTjexidnjTkG+A4LivHXWw171EaMpZQDrxz\naDQrjMYVRlOjfmw2bZ1W+14gEMywCd0XCGy02up0CnYb54DwLCsQaUUkYw4gFeF6xVPxUcVw\nyFgwTENqm41dpzLalgFXf8Tm5K0l5yx/MRyKj/RFvMMx9UP/xKjcfszftMSi0/8lf2EpIl0I\nn0BsYJLP8KRNZMjZaxIMzSi9CYQF7/Q477QPP5prY8Al6CaCdrb1MC4q+tDPOymQAeFQchUG\nH1fY2v0KDPNBJl3jRkLR7UcGMqmOANcuLd/f7R3y56keseu5KxcqZyTPM7aTIxjZrhhC7hTq\ndg0odBaLovyDHW3/fONip7HgGQEzQXU54m1nXaFvvXxKiMkAonF5V+vokX7/fZc2LSw3pz03\n+eP5G7Q751LVFTsHNatdsZNFeH3ePtnMDtlcOzSXEJOD9p4AxntjU0QH24nZSVTPHKvm+X2B\noJizNyK1bdbIshtttttLnTeXOhYZDHYNl4ySc4ToGOZ4WKGEfDgeX2fJBayshiT+SVOd0JhX\nBNoahI4pVKWIATA8tApOfjoNm6i/ZowsjchCSKGiJeCJl1bqmXORkB0diLSeCESCBb93VKI+\nV8xcws+oactc05jvieSHfz/cLyNwELERSAKomOVf9gZY4wKU3jjhJcGZ9fo6hE4AuXpmIyJn\n4ETwpaj8tEofivNdrmAsq0GGphTRXsQzGldlAYwGuvrUx37+xtleTySzE3Zdo/22ldWXNjvK\nzdqBgBDKGAib1EdWV9eVZA2Rnk9Nsu6XEVFynOZMlsZ7RkK026MQPI6K8tF+/yXNJWqslVM7\nZKfX30TmbKmd/pTRkRT/nZFQ9NsvnUr7ECMx6c12lyTLCyvMDCE0o22IFO0BWaxc4djJwUCf\nL+IJxYIxKRKX47IM0IJsq+dCV+wMDkv5AKv4nGy2HTauYKIh+f3nFH5HqbzvGUbz16S8Qc2u\ndCy72W57XmnIWJqWQFxdXr3aZOKyVzyst1h2+3yDsfR7uzORyJFgcLkp/xnM68mMR+801mwJ\nWXjegb4Zmlz0Xz/fHPTFxWg6iIsxuas10LQkF7/OhALe+Kn2YFFdywAgxeWORNzO8BdBGKAS\nhC74DkDoylowp1KmJXBck9ax5OHr7OV3YOj3uSeguASDo/bjeU09znepDfM4rkHkv5Exwxre\nN2BemfB5BnCw13ugx5sZrjPwzF8trwbAEHJBvX11ne1At/elk8OZ08AaHYa1DbN9bz8jEt3w\nH1D+VemNDGv67AYjBd5qd2X+vs8b+a9d7Q9umZ932CCmO1CXI3maDLkFo+K/v9Lqiyh8fWRK\ntx8ZODbg/+zlqysyLrSzGbSTKf3zob5njg5KWfywjDyj4zkdx5q07Pwy86b5pRXmmRlrPR36\nMGJXpPLG7QoK2gEgpbWgMgY6M4N2oJR2H8dwJ0CIqSSvDUolzx8NhSJZXp0BWWwwXF9ScrXd\nXkMoG4+Cz3qCMoSUctz7QYVBDl3R6AarlVFxKZmNuJ22HEKv0gQYCfFhmJZm9hcng3YxArtF\n4x5UyPgIIYnXsQbz7N3/yDJtP+ITpDyAEgc9LYRNDKdRev+pTL2jMbONz+aBIsblgC8e9MUj\nIVGSZAAsq+aTnGOKuxA8CM8uhE7JsTDDTm3FsqxAyVWKfeh6bSm0ZQidyAWO1ksiupUqzWDn\nujR2sHqw+lTT41whukyxRshhRPvSH6cS5FBidH1ckv9jR1tY6ay7bWV1izOlS4CQKpt+Q7Oj\n3KwdDESD49bEpSb+s5c2GvJZo58fQbvR5xBTcsG1rIH1EiT87epsbSNBRW/L4UDUJ8RW1+aZ\n+jhdSsTnMmNsaaKMToyHv/va6S6XUqHquE57NK+cGnaa+MYMc77ZCdqJkvzfb3S8dmokR9lL\nXKKRmBQQRFco1jocfO3UyFBAqLHrzdr01eHDiN35rbxxuzzuJxliVmyR41Ha/rbSLyl19VJX\nLw6/Sqrmk7qlOQJ4HCHXlZRsHR5OO0utLLvWbLnAZDRxBXzui43GhXrDqUh6QtYVj7/h811u\nmyPlrgSOqzHwqEKHrNCHwccBdjziIo6ZuMoiohwYDXSNFuvq0ir9aL/C1aenPWS2a2bNSWSw\nK+LJuXyyGsZZpRuisSMHA2eF8OWWEoMS6Mui3HHc37jYbDBxACiFEJHCgXjYL4aD8VgkA/oJ\n4XVEo2O1WpbXMbyO1epZXsswzNzAPSkCOQQpADEMOQgpiLg7qydcEbJcAPvGbO5CHkmyGxah\n7DYMPaU8Q4IvR8nl03Ywc0cau8ujRBtqZL8cwaMKMzkCR2G5ENrap4/0jwSimeG6+hLDxU0K\nt+vJ6F3rYLDPHykx8ssqrZy6Som5XmwX6090WKdLY4fj6uRPLCFfvLz5m8+f6vMqXKl2nh6t\nsOiuX5LVU2a6pL7FQab0OzuHW4cUjBrSFI5J332tbV+39+82NhlSOipmIWgXjIk/2NF2ekh5\nCmU2yZS+2e56u8O9rrHkr1ZUVltnxVFItVTZnSQVi8X6+vri8Xhpaem5CpUldE7sThSVm+0K\nAjsAoFR+eyvtPZl3Q2ItJfUrSP1S8Mqn1P5A4CW3J0JlAjTodOvM5oUGQ7ZYPTXmmk/fH43+\nW08vzQhXGBj2n+rrjOqumLPRTuE/APdO9Zv7YuOJM1ZnMq05dbouGlaAKqNNM3+lbRYCWpGQ\ndPJ9T5hRfqM0WsZZo7c7tQxDZEp//HrHcFAwssxmc4kxyww6hmNKKrSRgBgJibJY+PtPoDex\njnKd1aktLKAnBRA+AzkAogdnBmcFawZrzOfLSCEFIQYg+SH6IQURDwIhxIO506BJcZr8S4iC\nrOuyOeMkNYYFwQMYfiY9bkc4VH8madJ23huGacaiPiPjkaHiV1b/Xow+r/C4tmbAfOdDT58Q\nufTzgQF5YEtLvX1GHMKnke2mmRQHfotIh8Lj5R/J7CMeCUX/6dkTfkHhG8EQ8g+bm9fMWNyu\n0K7Vn73R8fSRAadWyeh7XCPRSZ91hUX3lS3zF1WYk4/MKNiNhKLffbW13zuluCBDyLpG+83L\nq2pseswNuxO1YHfixIkvf/nLr776ajw+ZsyxYMGCBx988NOf/vRMHl5WzR2wSygH3hXMdpIo\n73mEDitV0WaKYUnVfNKwgpTVI2PpFSl1iaKJEKOKEF1utvv9yMjbSs22m2y220rVNnbMPNtR\nDP4RQq/6JyTZzopISJ53ums9qAJ8VDYaKxtmdhwFpTh9wDMaVjhbtAbGWaW3ObWps86O9Hn/\neKAPgIFlLreUmIubrqVOrIZxlOsclfkG6SbK3UInIfQoZC0JB40ZjBkaS4dccjyqlyhquGgN\n43dSNyv7EA+oBLhsKhjsOCOsG2BapmbbsYU8xdN4TI4tsE7iwmlhu3NjKptBdZjKykpl9P0M\nseHM3zw/vP7xswqtrBuaHR9dU1Pky+XTdKGYJ8UoYBr2GWnHwKMKj/NVqPlbxXuhtpHgt14+\nLYoKwWOthvnHaxY2OhR8D1KxrIjPtFCqe/JQ36/e6kz8PxvbpVFdQixDPrG29qNrapI3kzPE\ndh2u0H+81upXKv4rQgwhFzbYbllevaKpYVp2OBWpAruenp4VK1bEYrEtW7Y0NzdzHDc6OvrG\nG2+0trZ+//vf/9KXvjQLB5qmuQZ2mF62E1zym3+growKlRzSmUjdEqZxJUzF367lYLuAKH6z\nqzuaUQ3NgDxcX1emUTunYcbZLu7BwGOKlsXZlMp2A56VA54Vips1LLGUlBXsKaBew32R3tZg\nOAPPGI5ZsNrGZcQ2ZEr/6/X20WAUgIFlNplLLFnidtMlQojVyZdW6fWZbRmiB6FTiLRCzHV3\nntAeuugdOmnwPAepHP5KeKuIt4p4rIqzvFRoAuxYPYyL0s010kqCCAPGlHk7lE0TS3joODyv\nIzYMjR22S2BWGLQ4RSZLVrjPNttp7JhMdQkVv7JGOjDw28yHPTHtA0eujEqTzliTlv3HaxcZ\nZ7JOceoc5smwf5rabil6f4lYv8JvKj8JfVO2p71z1vXT3R2KF1O7QfOPN653mvNfrNR/rIVS\n3ettI999tU1OoYsk2+l45oallc8dGxBisiLYJdTiNN67vmFVra2I41Sz/cFe7493t2fOppui\nGEKWNdTfv7GpbmaiziqlCuwefvjhrVu3vvXWWzU1E/dSlNKvfOUrP//5z0dHR3mlwfAzqjkI\ndphGthP9iEXkfc/RwWw+qNlEiLOW1C0jNQvBFTMUKwfbveL2POtW6MlabjT+TWUBhR0zznb+\n/XDvKugZCbazIkIpc7r/+nBUocyAsGT+CpvROiPwFI/Kx/e5g0pfxpoWo71MuUj5YI/nyUNj\nS4KBZTaaS6wzzHYJGa1caZXebOMJRAjtCJxSXpmU1EYr/0zX5Nk/YlXEUwFvHXFVw0MK6HUl\nnNkB83LoW2bCdqSg9XsqTJbaujh7bKcUrkuqILabRD8j2xE+k7nNK/2NiQFZSd25tnZd44xX\n+EyF7RSpLn3PkgcxNzQ2cCpmQoSOY+gJhcf1zai8O/dTtx3pf/KAws3/SNTQVGr8/q3L9Pna\nShLK/ckWYRp8pN//8DPH41I6Mzm1YZYhD2xuWVFjGwpEv7VjMG9l26pa26fX1c8rM6k5/dSH\nJHe0Dv/mnW45C/wwhJSaeSEmRUQ5rhQWza3RmOHxT104v+xctlCoArsbbrhh4cKF3/ve99Ie\nHx0ddTqdBw4cWLVq1cwcXlbNTbBLSBHvCg7aiX4AdKCVnj1MBztQSCkkAHA8qVtE6leQkqrC\nnpid7URZ/ufubsU/5O+rq1v0aqtHZyUh+wcIhcQ7U9hOEK0ne26gVIGQOJ5ZuNrGz4D9b/tR\nv280mhmuM9o0TYuz+q1IlP5w1xl3aAwCdAxzuWWW2A4Az8cc5la7/gzLqI2PhqH7tbwxjAJu\nOSrhvY3Zb0SurjoA0JigXwjjAs44g/Y0swN2mYYUs8F2OakOqsFOAX1EL/p/k5lkF2X2X46s\nd0XHrhvNpcZ/2NwyO606RbNd5l9nNyY/GopwO7xvO4QjiZ9d3AVw3gSSPXJGJfT9BLFMayqC\nmr8Fn+fSTYFfvNnxxpn0m+1EGOzCBvs3rlukvjRW8fMtguq63OEH/nwkmMV38KtXlF3e4kzs\nWZTpo+91P3mwLxtgJUSAjfNK711rK88Zg0w71GynKwWe2N/7zNGBbPvRapi/29i8qmZsbxKl\nkbgUiUtCTIrE5ZGA8NzxoW53rpTC0ob6792iqrpj5qTK7uTRRx+tr6/fvHlz+pNZ9tvf/vY9\n99yTGsmbHZ1zu5McUnRCKdT9JGF2T8wOUruEaVhBeD0N+xFXXeMpS/AM0c7DtPckEUVidUL9\nep/F/YQhxMyyh5Vm0fbH4xdbLCovITPvfkKga0S0G1IBFVc6VopKrA4ix0Q5TvSHFWyNZYn6\nPbGSct309oq6h6NDXWEA8ckFbIQhjYvMbIZ3a1IMITzLnBoam5whUtobFSp5XpfPECexc4OZ\n02gZWQbNYt2UW5LEBiNl7lADx8b0fNZhJ6l6lq4aQmHgFYSui5YuJX2MYjsq4WBognU9bJdC\nWw1GO2ZWPDMqyDUj1Qy2IGW6ihS9qwLE6pGd6pBhOaso5YAWo4Mcy7Q+YQhtsXhLtEKlPmTV\nxu5Y5TTyGjCafB02qmQ38nqeFeLKeFGc+0nyr0vsPPEPAKiI4CGMbIP3HYieCPgIeAOJG+R+\ng9hpcKyOxLP8RcH9CBxWeNy0FJZ1eY+HAKtqrCeHAqMpdwLJ5GafV+j1Ri6os6s0103Yl4SE\n4MEeb7c7bNZqeL3aKbRJuUKxB58+5g0rTMgEcOfa2ptWNBFZGEuYErKq1ra0ynK41xvOaQXQ\n6Q4/c9wjiuEmh1GrFIbMBFDF01WS5Z+90fHa6ZFsL2TRc1+9asHiFEu9xDXWyHNWvcZh5OtK\nDFcsKGtwGPr9gi+i8GcS4OHrVpaaZrBoR41URezuv//+t99++7333ktLuW7btu22224bHh4u\nVV0+P12ayxG7hKYat1OwZKN0qJt2HaH9p5AzI6AgrYG54HpS0Zx/y8QrZQnaUeD7vb1dgsL1\nfYXR+BGn06LaSGXG43ZURrQHcR8AEGas1oqw4xayHBgWQhe876YW5PlivBURAF2jF7v88xR3\nbLLz81ZYyDR1yUoiPf6eW4zJmeG6inqDszpPHFSi9D93tnlSrqRawmyy2u2sQlSM0zJGM2ew\naAx6n148RqRhQA/TQkm7IBaVoxEpLkhRQY5FpZggxaOy+hSoQeuqchzQc7k6xI/S2heocv1i\nXi0hvTcwJ6AxghjBmcAawZrBmsA70yvnAG4mfUMLDfYUGmzL4R87g3G7fOG6pHLE7XKlKWkM\n/f8LUYWjBGHAGcFYwJlhmA/D/PxPyZBd44UkQFsBhveEsr6fBX2Uib8uJT4HAJDC8L8P/16I\nCmMJHSQEALo6VH8WrCH9k6Ux9Pwo+cSJqXSERcND0JSqdBIORsWvP38yad2cVrVWY9P/v2sW\nNCj1UqRJpnT74YHH9nVFYjIADcfcfWHt7atq1F/mgjHxwW3HOkaVb6evXlT2D5vnKe4tEBV/\nuPPMWx0KdT6pcmrDOp65bnHF9UsrdNzEZ5ctrJh6rsYk6UC396WTQ23DWe/2q2y6B7fMVzmc\njQIHer3bDvWdHZ0UvVtTZ/v2bXla7GdBqsDu/fffv+iiiy688MJ77723paVFo9GMjo7u3Lnz\nl7/85Y033vjEE0olAjOsuQ92CWXi3dTYDgAQj9Lek7TjEPUOFnIshMy/kFm6SWW1eDa264gI\nP+zrVTxp9Ax7S6ljnerQ3ezNk80hMQDPHoRS/GViEgBKmTNDWwLhCsUnOSp19QvNir9KVWIi\nrTXnHXPX6YCrXwCQBnZ6I9u8XJXHyt5uz9OHJ5W4cYRZaTA16Q0sIXojYzDzejNrNGs0PIP4\nKHz7IHRO2gVfBtsG8GNd+nGJto0GO4eC2ghxyByr1CasJOownym3Hh/PzBJoqyKU9wfcZk0k\nznCP0MuiSglulbrCbrvAnP89T2jm2K6ILJ56IMu7ls8I26mmOmQBu9yVZ2MKHcXoywUeGWBc\nAMd1BZRLim6MvGAnXQDAaOG4GpY1ALLhndpPM9PGMu6C7x0EDufu0xpjO20Naj4H1ojUj9iz\nG56dEzyXlO0SlN2e+K9KthvwC19//kQoKin2IvAcc99lTdcsyuXBcWYk+F+vn8mEnrX19i9f\nOd+iy/+1PTEQ+PfXTmcb7HtBvf0b1y3iciY6Xjg+9Iu3OnJ3MyQ6MMw69or5ZfPLTC3lJr0+\nV1CJxj1H+nxvd7gP9HoSY2qzaUG56UtXzDPxhV2gKHCo17vtcH/7SAgAAb514+I1LVlbXmZN\nau1Ofve73913331+/yTUuOGGG7Zu3Wq15rLJmCGdL2CHDLabBrBL7tk7SDuP0p7jeWfXJkUq\nW5i1N0Kj7qYkC9v9enDwkNIsioTm6fUfLysrVdcnOyfYDoDQDc9ORMcNb2MSAEnWnu6/Vogp\nvwlVTcaK+lx9T76U2uFsbBfwxtsOepFBdSBoXmZNeAvnlSTT7+9sy8wL6DjmgSvnT/jyi274\n3kekI2HVEYbWDaNI2RjhZEri4ERtVV+8os8vjobj0ng+jIbFKoFbqDNYlUKAmWJZoarklK3c\nRA0L3+oSXz41LMsyATHO0zEGhT2wkCWoShUxhHykrLReqwrZztOgnZqFfPrZTqkTNnmZsmfE\n4NPYThXVAaOhqND9aI1BVcp+knT1KLsZRMVfHe3DyHY7Nxk9LatQegMIhyx4l/5pho7D/z4k\nD0AAnUMfdxEbALA6gIDhQVjE/Qi3qZxfN852Vaj+HLjxOxMphLPfQmZqm+HR8P+Sm6kf/3Vy\nKPCvr7QOhrOe91cscP7dpubUQFdCkbj02N7u7YcHshW6lZr4r2xZsKwqe6WvTH//fs/v9/dm\nG8bV4jT+xy2qOjkG/cIj73btaRvN9s6m2aa4YsZau35RhXlxpWVRubnGrk9ctWRKjw0EXm8d\nOdnTla3aL1UXNdrv29DEFTIQNk2He71PHe636jQPXDHvfPKxAxAMBnfu3Nne3h6LxZxO58UX\nX7xw4cIZPbgcOo/ALk006FHLdvnAbnwzkQ600c4jdKRTVS9xB2EAACAASURBVI+Fyc6sv5VY\nnGr2rch2o/H4t7q6pezXNQ1hri8p2WSz5p1dOFfADgCVETgI71uQY3YS9kS1AGKS+VTfdaKo\nfLlsWGQpqVBGZF9GR1gm28mUntrnEUISMsCutFpfmZMa0/Rup/tZpXLgzQucV8wvg+iBf78U\nbh+hln7Y+2Hrp1YP1DZtkWj8euZII8SRQIs/UqPo85emCCe3iZETrrE0E+/U6qqU36jgmSCN\nghiIxqBhjQxjzHVXb+DYu8vLrSq4ak6BHdTRmPpVfDrZTilcl+0ClYS8JNuppDqZ0h+/3i4J\nff9n8fuF9DiPi69A+a1gcn4jwm0YfQE0btdmBI10NSi/A5wFuUN3UhCjzyJ0KvFIMpbmovnz\nmLk1znYVqL5vDNqGt8O7W2nTq+C4NvUB9WfFK2di39vRlmODOrvh4WsW1JdMvI3vdbl/srsj\nb6SWZcidF9besbomsxVjMCD8+yutJwcVMtEJlVu0P7xthV3ppi6b2oaD//tu18Ee5aR/ku0y\nw5NmHbe4wlJq4t/rdCfrDnPbIwO4bmnFx9Yo/GlFKBIX9RruPAO7OaXzF+wSco37PJNQzl4z\nlWyXUCRAu47LnYcRylXqBACchll9HaldlHeX2YJ2z7vdL7kzm7kmqVan+7jTWaPNEx2cQ2wH\nQAzBuwfBE3YSSrBdKFba2ne1YpMsYcn8FVajNf2alUl1SaXiXf/Z8GBnCBlUp9Ey81baWHWz\nksaOWqLf29kayDCjr7DGr1oYHYgKfbAOUpuoMIdYlVjQdaR9PWkTJYPL3+IONiq+IamSQduE\nyOFQEDoYF5gU/5hLbBbGJb16aiiW4inA6BjWrNFVaRWfUq7j73SWcSquwucd2xU0nX162K4Q\nqksVIxUWeNtzZvSJA30A7mo+cVFpYe3qY+IdKLsNbJa4UeAA3LsAqkB1CXEmlH0E+vrET5l4\nZ6enHa4nM9utpk51CY2xHV+GmvsBEWf/VcGLmzWh8eHMmlGVJ4bM2bYf7v/lW505mky1GuYL\nlzVvWVjmDsV/9kb7G+15ytpStarW9pUr59tSEG3n6eGf7OnI0fdg0nL/edvyWnsx47YO9nj/\n991OxZI4pzacwwAvc+Nsv2IIufPC2qtzJqmL0FwHux/84AeRSOThhx/+wQ9+0Nramm2zL33p\nS/PnF1PiOhWd72CHFLZDDrwrCOzGROlwD+06QvtOIVf3KSHz1jJLN0JFByUyCI8C20dHd3m9\nuaGMAbnSbrvEatURAoAAeqUVcW6xHQChz+7+M+KeBNt5wvVnhzYqRqo4DbNwzSQDlBxUl1CC\n7RLTwyBTZIBdwxKz2Vrwsv1mh+vF42M1l4yWMZexuhIuUoixSF6VkuB15HAlPJKsHQnMG/Uv\npDRP8iIsS21mccguixlxmnIdf5ezjCXEK8SfPTKQ7O1NiC/X6SqU34TFJuONKnrh5xrYISeN\nFUR1efemVjmTsLmlnu1c4dh3Xj6dqJ3iGfGu5hOrSoqaP6uxwHk7NGkfPYVnD/z7Ej9kBTsA\nhIXjGlgvTH9cDGL0uUSV7Rh+JY+8CKojHEyLETqVVns3sWe+FHwZgicUnlv2V7BtVNxr3tMj\n2UBwuM/3b6+c9mTpS03owgb78X5/KGcjqqJKjJoHr1ywssYaiok/2d2+qzXXsGaeY/71piVL\nKou3H6LA7raRR9/r7vdNaeSXItvxGuYLlzXNxPi1uQ52mzZt8nq9hw4d2rRp0+7dSnFjAMCu\nXbs2bdo0I0eXXR8wsEM2tisG7MYVj8mHXqXdR3NsQpx1zEU3Q1vY9SsJeWcjwuMjw4Oxgtck\nADrCEEII4OQ1l2qtq0zn0s5RQbFh+9D/Jq/OfZ7V3aMXZW4VFiWdkV2w2s5yBCqoLiELw7Qe\n9IZ8cWRQnc2prZ1XzFsRl+T/2Nka1TGGMo7oNTNEyoTgQrRvQBtHxK5A5ZmRNWVc/ltnkaH9\nBqnTJAa5sfeHI+STleWlKR7axwf9zx0dSJ2AqW/QazKioQltttvWqmikyMF2EqVCTNbzTNEp\nmGkM2hVBdXn3mV/FhuuSUsN2FPhRRlW+QxupMgRbSuTNzQYiBxEPQA5BDCQ8nnKJ1cN5G7Tj\nLU1UgusFhE4nfspFdUmllNwBQPAYRp+HNGnhT0BYwVTHGmC5AJaLwJkQ6cbg1rQ/J40a06Up\nQcNXJw5sstSDHQBPOP5vr54+3Ft4OaMKMYTcuKzi3U53tj6JhJxm7VevWrC4Qm23Uw6JMn3x\n+ODv3u/J5qKSV5lgt6jC/MmL6mpnZjjEXAe7WCwGgOf5WCwmZ/dg43meKcoWaCr6AIAdZoHt\nAHr2kHzoVcjZb850Jmb9rRM+xpzSDVb2Y4gbLK97vM+53TlK7tRoGWu6tdSh3i1lFmQXjmHo\nz8kf24c3DfsUktdhUTLZ+XkrrH7VPoWjg5GBjrBBBCaDXbbpYXkVkKTDoeA+r794QChENoRq\n/IPvdpbKlNTw+tUGo0GFSyIFRnRSj0kc0kmKLa6CKL1ycnhfpyfhs0JYYphnYLUK/EQIud1Z\n2qTLE5RTBDuJ0hePDe46MxqNy1Y9d+PSyuKmHUxj0G4qYJdtn/mVEa4r1ERdDdi92eH6w/sK\ns5s5lvnqVfPTLWdpHKIfsQG4doBmWcUZLZw3Q1cHWcDwdkQndq4K7ADoqlF+B8Bi9HmElCJn\nhYp3wHoxTCvApNyHCL0YeLQAtqv8BMwX5HiRHCdJpt+HTOnj+3oef783t/evotbW2/u8kakE\nyS5tcXxxU4tZO50X80hc+vOhvqcO9ed2vMumBNtV2XTrG0vWNzoqLTMYz5/rYJfUr3/9a6PR\n+NGPfnQWDkilPhhgBzVsNzWwA0BdvfK72yBkuabEAYZlLrqFNK/Ououcx0CN1oFY7PHh4U4l\nfzv1ckiaWxyORcbpKWqZFtm9L8I3luWhlDnVf4NXybg4LEqmBkN5napSkqggtR32Uamw6WGK\nkihtF4SDgWCXIMxyMpsCoisu9AtUpgyYpUbjAp1RJelEOdRVGxzlOlYJYXu8kcf2doWiEgCG\nZ4wLjYqWgXqWubu83JbvTiCN7USJ/uqdzmP9k87nj66p2dBcsBcrpontpkh1ivvMrylTXUK5\n2c4djn3n5dOCkoHFLcsrr1hYlvWZ0V4Mb8sawCMc7JsQPITYpFTgZLAjubpWOROonBaoK0a6\netguhnGBsqmy0I/BRyFNGpqizHbaKtT/37zOzNlOlWxGbgd7vP/+Wqv6QFeJUfO5DU2XtZSG\nY+IPd53ZkzHTIq/0PPP5S5uvyvHJTk2RuLS/23ti0H9iwH9mNCyqy5A4zdrr5ms3NJbUq/Dz\nm7rOG7C7+eabzWbz1q1bZ+GAVOoDA3bIy3ZTBjsAEILyu9upa/zuNvObTghz6cdI3dKse8jH\ndhTY7fU+53JHafFjlfVxdrXJdENJCT/rMWBF2VmK/kcgjL1vIuWPd98SjqUHeEIsjchy81Kr\nwZyHMyhF+1FvJKhw05l7elia3GL8eCh0OBQOicXcv44dDCBHZVDZzMacmjABtCQOQIc4AC81\ndCGP8bgUl2OjcTkq0ZhsFslqvbVco5YwCENspXxJhS7T1eVov+8P+8fec8bMmpqUL8dlOs2d\nznJNzlxqKthFRfnnb3ZklmMzIJ/Z0LA8u6FDDk2R7aaF6tL2qUqTwa44qksoG9tR4Kd72k8N\nKvgi1ZcYHriiJU8SPDaMkacgqh0eM4nqzCtg24DhPyE6rPLp6dKWwX45wIKKgAQ5DipBjgEU\nVAAA1gxdPbT5ZmRHBzDwqGKqd5Kq/xbG/K1sUDphck/9cofi//bq6SN9eWKrDCHXLin/1Pr6\nVCO3548N/vyts+qHpS4oN31ly4Iq60wWt6YoLsqtI8GTg4HjA4GTQ/5MfrXouEtbSi+f71xc\nYWYIKWjY8VR03oDdiy++eO+99z799NNr166dhWNSow8S2GEW4nacBbIkH3qVntiTfRueuebz\nxJb9pMzHdgDcoviHoeGTkSJvhfVxFoCd424vddbr8rTTUiAgihwhhilM9c4v0Y+Bx+zy2M1r\nVLQc6741Jk0E50Ls2DdI1GDeijzdrEPdkeFehTeHMGTeSqs20wd1snySdDocPhEJDQlFlptI\ncZmGJDEkiRFRDo1dsgmw0EmurTrjYCZ1LB5D7Wvy4qjqDgwOpFpgW7warVhANllvYksqdFaH\nNvWt27q3++R4O0WORopFRsONDkfuF0uwXTgu/WxPx1mX8pmp4Zi/39TcUFJMzc1Uiu2mEeyg\nnu2mj+oSUmS7t8+6Ht+nkIRlGeahLfMq1Sz/ogfDT44Nj8mnCbCzX4aSzQCBHMXIduU2hRwi\nDGyXwL4pW7lbwYoNYeDRtKkbk9hO34zaL6jfX+o5o2aWq0zp1r3df9ifdSRrvcPw95taFOvh\nOkZD33n5dK83z6RmhpCPrK6+88K63BbEM6oBv3BiwH9iMDAUiJaZ+PWNjtW1NjbleD4Eu3Q9\n8sgjr7322lNPPbV06dKmpiaDYdLl76GHHpp9Q7sPGNhhhurtMgrmaMdB+b3tkLJggaWUvfb+\nXPbFKtgOwN5A4KmR0XCOwr7sSrAdAbnUatlss6UZW8iUDsTinYJwVhA6BUGgMgHm6w03O0pm\nsD4v0omhp5KZnVDU2TpwlUwVlnOdQ1PTkrX1IRwQ24/5FBNEFQ0GZ1XWTG5Ykk5GIifDoX4h\nVmjKlYdoRzDix4BbQ0NUTrn/1rBMnV2/sMKyuNJs02kAQOiG/y3EJs69IPSv0KVttIBLFQe0\n+DT1QQ1byLEyHGMr5R2VOp2eBeAT4j/adUYYP1p9vV5jU+bLC6ymS8xWXfYQL6dDICr+dHdH\n7vXJqGUeuGJ+meohj6IwEQ4seqj8tCsv240Ik67eU6c6KIGdJxL/zkunIkpJ2JuWVV61SHWq\nTgpi+Mm0lGumxqiOMCi9ITFqYlwUnjfg3qnSTBjaMpTeDN10jz6PjWDgt4pjxwDiqP8MdPXq\nd1Yo2CV0oNv776+d9kUmfdw8x3z8gprbV9XkALJIXPrR6+27WrPOV3WatV++cn5xAe9Z1uyw\n3XkDdps2bdqzZ0+2DokdO3Zs3KjcpD1z+uCBHVSyXUK5CU+xAWJc1N0v73kcQWUXOlKziNl0\nZ9Zqj7zDMMbZLiiKL3g8h4LBQKFjbcfZDkAlz9/udJZy3ATMRYSo0jB4A8N8xOls0as1TBIp\nPRAIno5EACwy6FebTHkSQ9534H0r+dNosKVr5GLFDUtbjDaHwuIqybT9iDcaVjp4C9e0xJr5\n+oIst0UiJ0Lhrmi0UL9JAjSSkSZp8Eyv4ZjHmXxVo5attxvrHYYGh6HSolNwkKYSAocQOAQ6\nvn7wlScMG3f4I+FC0r48SE2QrQ9q9IVE7wAYLFxJmdZaqn2/15sclUYYYphnYLNENHmGWWE2\nrDVZzEqA5RPi//1ue+4mvoRKTfwDV8xTWfSdCnaYS2wHJbxL0sCk9snpoLqE0tjuv9/sONGv\nwDF1dv0DV87L61s+SbKAoT8j1p9jE7s2CoZH2V/DqGS8FW7D8JOQclcAM7BfDPvl0xaoS1N8\nFP2/Vbh+Ghej4o7Efx0ZYyGyKfFpqqe6hEaDse/taD003i27ps52/2XNKjOnL50c+tkbCvO+\nLmtx/N1090nMnHKDXer7ORUEPG/ATpIkdi5dtvABBTsUxHbIwKycPDdJ0bD85h/pgLJNObPy\nGrL0MrUvmiFFT2OR0pgsA6BAZLx71BWPPzk6mumWkgQ7ACwICxJTgrk0EZArbLaNNmveRaM3\nGtvumvS6Sw2Gj5bljiJQDG1DpCP5c8fwRk9I4T6b0zDVS80aPv0uqK8j5B5UWFoYjsxbbuUn\nI0tAknZ5va3hiFR4U5sR0RWkp1Ecfm/AechVLgOlRm1dib6+xFBfYnCqjEhJIYTbQKPgndA1\nAiQsSa96vadChSXZCUiZwNQGOadQiOEywHBMSbl2R9/oyfHxFYyGMS40kuyhBZaQxSbjOrOp\nJMVFxROO/fqdrl7Vh11fYvj7y5v5fMOFxPFPco6zXVqqd4aoLqEk27131v3Yvh6FDRjmoStb\nqmyF29XSOEaeQeSs4i/t2ig4E8o/Dp1CY9OY4i4M/SFryd0MBerSj8GNgd9MyiwzPGo+n+HM\np4rwXMFYoWCXUNtwcNAvVNv0TaWFdRJ0ucPfefl0l3vsq2Tg2c9f2rRlxvokZkiKxJb5Tv5F\ngF0OlZeXv/vuu42NjdN1QCr1QQW7hFR5F09RsiS/+j90pFvhV4Qwmz9FKrO/sUWxnfKeZHm7\n270nw+g4le0K0gK94bZSR7aqu7gsv+L1vusP0IzUzCeczjwNuZKAwceS12WRak/03hxXmjZm\nKdGWzZuU8Ar4Yp3HlafuZHbCxih9ZGjQGyts3SVAPRldSbpbNEHWtFrSz+/xRkVRrrDpCp1s\nnUNtkcjLHk8RHRureOPSiNYzEpNV12InFJGlUTHuFmMuUQxoZU1znjI4Aswz6NdZLJU8PxwQ\n/vfdrsRAjlCm0X8WLa2y/O0lDTkiuGIKn6d13U4X2+Ud1VXcCyUXsGmnuoQYyeeLxL/98qmw\n0sD165dWXLu42DWPSnC9mJz3lSq72YyKO5O2fFklxzCyHcHjaYcM28UombFAXZpEL4afHrs/\n5EtReiP0Ddm2zYN3GnveUWDTrrgk72wd7RgNOoz8FQvKHMbpHls880olttxkXDTbnU9gF4lE\ntm/f3tbWFhuPc1BKT548uW3btn379l1wQS4DnpnQBxvsMDtsFwlIL/wEESXg4A3sdffBlN3f\na/rYDsCpcPh3w8PeyYtN0Wxn57iPOsuqtekXnbZI5BmXK9uSVqXV3leZr8ctNoyB3ycdtvxC\nVdvAlYob1s4zaUvG4kaSSE8f8kpKS53FwdcvSK9Zfsvvf9NbgLmogcSXoXsF6bFzgGk1jAtB\nZjB0JMjyDq/3eDCk/o7QouE+VV6uYxhJoj5XdLQ/opiSVqMgkb162a+VfRrZx+dyDizXaPo7\ngiH3xOKXynY8x1h03GiW3oVLmh0fW5M1fiNODrxOO9upHMBa6GvNNNUB6Bzqf+pQfzKok6oa\nu/7LqpOw9nFimDz7i8LzGvyHJ21pLUfFx8Cq7Hqh8L4F9+tjX2FtBUpvnPFAXaakEKgIzpLX\n3yQX2ylNDflQasSIXpXBzuLY7rwBO7/ff9FFF506lX63RAi59tprt2/frtFM5+QiNfrAgx0y\n0rKpmi7Uo6Pd8iv/o2hfTOxVzNWfBZflk1XRxlEQ24Ul6Y8jIweCE71jRYMdAA7kBkdJ0gI3\nJEkvut2HQnmsE+4pL89fpRc8itGXkz/1eC4c9ip0DjEMqVpqTvQBdJ0O+F0KAMFqmPmr0u2I\nRUp/NjCgppqNg9SEkcVMfwuGWE4L40qYlsxS4AHwSVJrOOyWRG9M9MmiPy5lyxpzhHykrLRW\nOwl/gr6Yayjqd8UxhYyBROioXjplFUNsVsATI6JwVpDjMlLATq9hPn9pk92g+f6ONm9EmXJu\nWFZxjdIQSTEjnZ5pgzwVtlNPdYW+VmIxmyGqO9Lne/po/6nBoEOr0KHCEPLglnk16pKw9ow4\n0CS88++D713IURAO5iX26qtAClx9pAhig2C00FbmRatzLmW2U5oa8qGmXecv2KlaBn760592\nd3c/8sgj69at+8xnPnPVVVfddNNNTzzxxLFjxx599NHZp7q/EDk0mmxsR42TbjiK5jxSWses\nukbe/7zCS3j65fefY9bdovxMzpKX7UjIp57tDCz7qYqK5cHgH4dHIrIEIKKRimY7EXS7y9Ul\nCDc7HMfD4efd7rCKsRC7fL78YGdahugAAkcSP1XbDwTCFZFYhvO7TN0d4YrFJt9IVJHqANS0\nGDOHTBwNhXJTHQPUJ3iODulIDKweprUwLS14eZuarCybOtSLAgFJ8olxnyR7xbhXlLxiPArq\nYLh1FksFn75Um6y8ycrH47JnMOoeFuLRYgJ4LCXlYc4WZd+sjCq21ADg9Jy+WR86FQJgJFyI\nikaeuX9jc53dAOC+S5t+sOuMooPu80cH7TrNRZOHUmRSHTK6KAB4JKkItisU6VKflfflZojq\nZEoP9HifPtLfMToWpXNF9Zlsd/XiMpVUpyi7kZ9gO8tamFdD8oM12oubQ8jqoZ/t2qGi5RKl\nHHE7p1n7IdvNnGTONmsmKdMrVWB38ODBu+6665577gGg0+lKSkpWrly5cuXK7373u/fcc8/2\n7dtn9hj/gpWD7VKVynmFQh5ZdAlxD9CzBxR2e2YfLa0hLVnMC6eb7QCsMZmadLqtQ8OtkTCy\ns52VZRt1ukadrkMQDmePwx0MhU6FIxHVhsldgtAlRPP656FkM+LDEAYBMBAbyt483Xe9TNMR\nLRwUfT1R70hUr1SJryvlLfZ03JGpvNc3CigN0QKqiXsRBhai30CiAMDpYboIpqUg577ShQAW\nlrWwbG0hz9JomLJavbNGH/TH3INRvztWxFw6rURavNxxW1ZDOFbLahx83BUDYNVzX7isOWmi\nVmXT/83FjT9942zmyEQK/O79Xqtes1DFvMups11xVKf+5aYd6SRK3+1wPXN0MNNEJo3tqq16\nxdinojLDdamPj+EdYcFN/+z2Oat0tptcTfgh232oTKkCO6/Xm3Sq43k+NL6UfuELX/ja1742\nMDBQmbc46UMVK4dGg5xp2TQVAXnMRTfL3kHqUTAUkPc+w9gqSWmWMhR1bDd+YBmEx40/Ik6U\nlNk57gvVVa97vc+43CKVI5qxBc+h0czT61v0+hadzjEeJF4PS92Q/4Xsk2rVU11Cr/t8n9Tl\n6/MiHJy3Y/RZRLoAGDTuKvvBXrfCQDbXgLJxmk7PLVxkTQzU8iUN00XPafcRr9SUuf0y0ruB\nnLZgfG+MFqblMC+fC0g3dRECs5U3W/l4THYPRl3DgmI9Yg5VhthTNpJjWjFfoRXdMZte8+n1\nDWXWSW/agnLTXRdUP7q3J/PJMqW/eqfzvkubEv2DiuG6HEpltRzUNUWkS91PtldxoajIVhaJ\nsrznjOuZYwMjKhxkGEI+cWENO02+tamhu2wI+IHUBNsp9Yh8yHYzp/M0aKcK7Kqrq/fs2UMp\nJYRUVFQcPHgw8TjP8wzD9PT0fAh2My2Vobs0JSAvP95xGuayj0kv/BTxjLVLluQ9v2Ovux+6\nqa4NeQgvhe0IcLnNtsJkOhgIRmSpnOfn6fXZpoJeWm6p1mp/Pzzkm44F8kwk3B+NVWU0XqSL\n1aH8dvgPwvMmaKzMetwXqQpEKtS8BCGoX2RJjkm1GjS+cAzBo/Dte09al7m9BuImctKAKJBA\nuqUwLQczS3N7ZlManimv05fV6v2emHckGvSJKltoeUpsXeKQk3IG5ZOE5YitRv+ZBTU2vcIn\nu7ahxBMRnzk6kPkrIS7/cGf7ukb79QuqjHyukFhm0C5V2SBvuqgudW9peOeRJKUQcJHa3+t9\n7L2ukUCegRmJoB0BbllRmch6q5EaVpuUlv1LkkuUwFmzjTT+kO1mTucj26kCu7vvvnvz5s2r\nVq3av3//lVdeedddd61atWrDhg2///3v4/F4bW1B6ZcPVaSKYzsA1GjLz3ZmB3PJX8u7tyoU\ns4d98pt/ZDbfA0ZpfVARtEvTGOFxFpp69k1mOwAlHHeFXVXvUpNNex9X9eTIaJuQZ/TN2AEA\nK4zGZUbjY8PpvlaJibcfK1djzkRgWQ19M1wvEKGvseytEz03inL+lamywWiypvzlos8aeNnn\nG+ykziEoOBEuJ70GRMHwMC6EafX/Z++846Soz8f/fGZmey/Xe4PjaKcUqSJoEAUVa6JB0WCK\nmkSj8RuTb/JLovmWlK/BgiEaTVTQ2FAUFVHgEEGU4onHUQ44uH63vdeZ+f2xsOztzszOtrs9\nmPdr/4AtM5/d25l57/P5PM8DePprlcYECIFGL9boxQAQClIeZ8jrIn2ekM9N0hRrTK6SFHd2\n2DAFLi0SEyqG5Ya4USKWEMBiYIsnFFq9wc9OMHQ9p4De3Wk91uu+orFoZpUuSSFrHmRX5hi3\nH3U7G0lSeAprITgweQIv7ek60M33Cje+SLl0YkmtMZ0ubdxcULG6cxAaALCEQgZhUXsek15x\nwazDt9zJ008//dRTTx09ejQQCFx11VXbt2+P3P/DH/5w7dq1uRwhMxdCViwb6ekdn2lZ6uuP\n6W+2Mz8mU6P6aVjdNOYaKBn0Ojs3dxxOocZHIgEfvc1ub0koiReHgSCuMxprpVIAeGFg8GSC\nCyKAn5aVFfA/e9IUOPaAY4/VU9U5OJ/7uQqJbXzVLiSrBlktSMvB9Q3YdwIVBIBn/ZeeAmPc\n8zGA7+OfapW1oGoG7DxXOm4oina6Qh8dGDDiokIi/tJOA/2e3eQlKQCQlMokBQx/vpka5UKN\nDpjyWAGAounndp36po/hm6w4m2tcopFdM7mkSsf6h+AI2o0KWbE6kqLeOzSw8WB/kCnLJA4E\ncFGFdnlzSZ1BydhDlg0+uhakqC9drs+czv5AUCciFmo0l2q1+Z7XmhWIYX9HNrcTgna5g0/Q\nLmJ1BSq+bQlzRzoFigOBwMaNGwcGBiZPnrxw4cJcDCspF7LYQe7cjqap7S/SfcfYN4FQUS1q\nuASVNwI+PNybktsxNcmgFdoM3S7oo4/5fG8MmRiX1mGA5mnUizQa4mxzvJN+/wsDA4nPbFYo\nbiooSG3fgQGwfHCqd6LFzZpwhyFyQvkmKXH2PSIMzo6zH7TPwBWkP37YTSLbNQXVKfQUOd85\nPOR6e2/PMl1h4uW81es84vMCAIYjxUQlSgitEQh9v7REjePAYmAhklq9/URcGTbF8AoyCKC5\nQrtkQpGSqY1SdLNRo0pJbrJO5mJ3qN/5zz2n+x3JFxhiCM2q0V07uaTi7NxrFsXOHg7vcDh2\nOZy+4bWZFmi1NxqN57/bEfF/R8HtRh4Ot4sN1I1V9SnTJAAAIABJREFUscsHLnCxi5CG3iV3\nu4CX/HANuG1JniaVo5ppWMMMUJ8NMvEXO+5WtpKMztJBH+0Mh181mboDw05wxWLx9QZjYtXi\nZ/v7uwLxp0IM0ANlZXpRijXh6HDYuudIe3kgzDz9VGHYW6g+zPjQ63DJQagAAGq4291ZUlQk\nuiAnntjZ0NqrdmJFCUE7BxneE3QWqyRFaolXiR2hGFxkskp5tY41aAcA7gD5+LaOoZiro4Kp\nNKCUwC5vLLqkWpdYcTey5VijGi23y9DqbN7g+r3dn3cyN5WOBcexS+v010wuLUq4pPF87xxW\n1+0PtDjs+1xuiiU55jKt9kZjfKj7vCLB6qIw6p3gdjmCTzsyWzg8Tpdar7ZcwFfsWlpa1q1b\n19PT4/fHny5Xr17d3Nycg7FxIYhdhFy4HW3tpT76O5B86iMgVFiNGmag6imAML5ulzT+FHam\nVCQljqCPDtP0VpvtC6c7CJQCwxZotbNUKsbVUUe83nUJK+0AYKZKda2BbaUyF+6h7mPtksSj\nSi0baCj+GJguTjZQ/BWuigpd1O2qpdJvF6YYOLwAIGl6b5tF4WL4a9ZN1shVBACEafq5gQFn\nKP47jBD6XkmRkRABu9t5AuT6vd0H+xzAYnVRilWya6fGz8wSUgajGhW3S1vsSJr++PDgm629\nvmTpyWIRtrDBuHRSiUHObGZpix1J0wc9nm12+6mEK04iC7XaG85Xt2O3ugiC240kcW7H2M0l\nH8SOV0zio48+WrJkCUEQRUVFUmn86TCQEPAQGDHSyKhImkuB9GXYzOuoz9/iszF6qJMe6kSH\nd2ELV4KMRyIFv1nFSIJFenonliHwwZV6/eU6nZ8k5TjOseB9vFxeLBYPBOPz7A643JdpNGqW\nVFwOlIUVRS7nQNewqxGOhaoLdzNaHQDshobY6ycmxSJuN0uTvILaBQiO0Iwmw+F9NpqM/zxt\npkBE7AiE5qnVH1jio000TX9qd3BLgEKC/2BedXu/c9NXQxYP18ltwOX7x67O66aUTK88V4Qi\nGFIlFpSlcE2u3S5bSRInLZ7ndp3qYmoLFguG0KLxxhuby9RSrtWofN54nNX5SHK307XDYedf\ne2+73Y4BLD//3C6Z1QFLOkXcbKDgedkimiE7Ag36MoHXdevll1++6qqr1q9fr9NdQGUhxwo5\ncbu6aZjPSX39Cc+OT7S1l9rxEnbFD5IkyfJcK3Z2I0n0LnLWY1qWJ5ahoI8mEFImMzMEsECj\nec1kirs/DPQup/MqPXu3XHZKalR+L9jNZ9wOQ2Rt0Q4R5mZ8sgfE+6A67k5MihUAUSXJs6X4\neQOOI41ebDfFX67s5mBJtRzDEABMlMu/cDstgfjTbofX1xMMlIsl3HXpxunUP71MtfOEuaXD\nHCZZA1cUTb/zdZ8/RM2rSxLfzaLbZcvhEjlt9f5h85FAsiSJugLFnbOqag1ZiEzEWd0hj+el\nwSEvU5NDbrba7RhC6UXZ8xQeVhchcv7nyJZlXPUl2F7aUIQ2P30uCkNN/ETMZvPKlSsFq8tb\n0kiAj2tKlgiatBBf9gBqnANiXgULaHMPtedNADo7K/1jNhItgBfzqObcWY/l9CeW8V2rN1Eu\nZ/wA9zrdnrQqU2AYqpusbpiqLalRVNQrJ12iVldMA2UT4Ayn1z1QH2L6fbWoQDjcuNAVMnyY\nVJhyWs8EXzGEFqiZv+Q77LwEi8DQwoaCny2sm1jCuSoU4MP2gU+ODgIAhasAIJyQBHNmeBkL\nGYVrcmd1APDiF6e5rU4hwb43u+p3V0/gb3X8B2wKhf4xMJiG1UX42GbbZGEoWDMm4W11UVL9\neV+gksTeUt3dBYsFlHludcAzYldXV2dKCGkI5BW5iNuBpgCbvgwuWkJ3t9PH99IDJ9kmE89s\n8NRBWm1EU65gfjhV4YsJ/p1rTZbK+S4St0v6NAyhS9XqtxMuCUGg9rhcl2vTrEuk1ovV+mg0\nYjwoxgNNQqAXfJ3g74SAGQBCQOyBusTX6ghiolyOIXSuL4XAcJQakUiKhRIUymYKaI1nrlIN\nMlmZVNzrj59n7/EHjvt99VLWqiURPwMAjHRpZeLbplccH3K/1zZgZp+Z3X7MbPFLb7xIyV3o\nLu24XU59LsKBHvvRQea4MgAggHn1htumV3DPvaZEXLjuDZM5zKNVjBzD2eTvI5sNIbQ0rUD7\neUDS0B0HsW4nBPPGOrwidj/96U///ve/nzx5MtejEciEXMTtAABwAlVPwa5YhV//MNa8BORc\nL6EObqdPtjI4XIZhPEKNAjSr1bHbnliGEm+JT5uqVGqY2jF97nAGErqI8iFM04c8nk9sts8c\nTnv05x3CQVoJugVQcieUfx8Mi/fJFvmA4bfyfLUm4gcauVCMlBWtkWGq2m0PhWKW/C/QMH83\ndjgdFNMyAwpXRa0OYgyvvlD504V1V08sFhOs58wdxy0vfdFF0jSwB+0gRUWLhOhGwOoomn5t\nXw/boyUa6SOLx/1oXm16Vsdn/Afd7sNe1r7PESqk0pVFRf9VU72EXd02W60fWpNn8uY1qYfr\nYkmvGFYsQgCPjfyP1UXgFbHbvXt3VVXVhAkT5s6dW15ejmHDTm2PPPJItJOswJiDI26nO7tA\n7cy3WaFFky7Fm+bSvYfpjn10fwfTCjya+uItTG1AxoqUqxYnMlwHkcfOaqIJjSs4iHW7SEiP\nQGieRvN+wvXAT1NfOl3ztSmcZwdDoVa3e7/L5T1rhFtstotVykVxqRiEhlJO3u3oBYg/Uygw\n7GLluXkujVwkxO0Y0ReKTT0Ja/xpsJsCBWVnonEVEmmdTHbCF1+G2uwPtft8k+TnlhnE+lws\nFK7CSBcA4AjNrTVMLFVvPNh3LCGyZQvKAGBflz0QplbNriJwLOynCCmzBbLF7UZA4NjYdcLS\nY2do3CIVYzdMLV3SVJxY2CVDYsN1YYrawD6LigAmyhULtJrGs3+vpXo90PRmG3NVpg+sVgRo\nif7CXcyQeYMKoUfZmIaX2L344os7d+5ECH366aeJj951112C2OUJabeUTXQ7XYyF6Aji3C8V\nDEcVk1DFJLr3KNXyEoPbkSTV8hK+5F5Q6s64Xfbq63K5XVpEp2tnKJU77HZ3Qnxul9MxW60i\nsCSxbXc43Orx7ne7TAmfPwX0Pper1eWZqVYuUKsVZz/YNq+X8fffLLUmbneC2zEiluJyNeF1\nxn+GNpM/KnYAsECrPun3J9Z12ulwNMpkBEJsShcl6nYAoJWKbp9R+fbXfbHNtSJWF+GbPuea\nT0/+aH6NhMC53S7Z+xs5wiT1Zmtv4v0YQv9vyYQqfRbagnHPQW+22RhPXDIMn6VWXarRGBM0\nZanBEAb4hMXt3rdaCIArBLfLgBy5XSQcOBatcayE64DnVOy2bdtIkgyzsGDBglyPUoA/mXcS\n1BGEjkeZD1Q2Hrv4aubH/B5y+78g6ANCnfWuCazrAtOdv4gE8AgMm6thUEY3Re11sy48iky5\nvjw49Kee3s02a6LVnXsmULudzv/r6dtqs/lJEgB2OpjyeQG7RKVMvF+Yk2VEz5RCEfBSXte5\nU3CBSDxRwaAmzlD4cw9roC6O2KdhCN3QXDaXPQ22w+RZvf2EO0AC55xs/rDlyKDZHb8SEQDm\n1euzYnWJxIbrhoLBT2wMBzUC9JPS0huMxkSri3CdwbCIfQnsRqtlK9Nm853M5mFjycM52egG\nhdnenMIrYhc79+r1ekmSVKmEClv5SyaJFGxKNyxodxY0YS5ymeljXzC8wGGidv4bW3gHYAxr\n1zIkR3G7S1TKHXa7P2H5dovdfsrvRwDS4evwwhR11OtjbF/GRhCo7Q7H505Xk0Len1A8DwCm\nqZVyptV+IMTtmFAbJKjTy1HQLsI8jeaIxxuOCdo5QA4AOxz2aSqFlN9XNDZuhwCubipWioiP\njgzGhuuidNt8q7cfv29BrU4m4ojb5QPeUHjjwf7E+3Ecu6G5LBd7TMyZIJmysuZr1BXSJJf/\n641GCqDFzixwGy1mNYHPuICvVnkVt4uTufyc7WVLIhlD4TrgGbEDgO7u7pUrVxqNRoVCsWbN\nGgBobW19+OGHw2Pq3V44pJdIwSdQFwc24xpUNp55g/0d1IEPU90gT5jjdpn92BVj2GwNQ3zR\nQ1GHvN42r3efyxV7a/V4UrK6KH6aOsAUBcQAzVVzBTiFuF0cOI40eobPxG4OxuZGaHC8WX1m\n2aID5BGrAwAvSbU4HPybKsaF9y5tMC6bXMK29GzA6V+9rcPEFAlLisUTOGXx+MNpFv5Iife/\nGYgEF+O4srGgQJHNsArj7HOr2x3p8BuHEsd5JrfeYDQuYInb0QDrB4eOJ6ywvKDIk7gd40by\nLW6XqJ6R29iyOuApdhaLZfbs2W+++eb8+fOLi4sjd/b09DzxxBM///nPczk8gZHDIBIhJdeS\nFGbtQxg279tIW8T4EvrIbvrYnqwMj2HPWXW7yITsLJVKzPvXTtaZopBrk7l11O0I6ZnbBY42\nWUG7CLNVmgCujCpdlM/szsdOdz3b3/++zfqVxz0YDJKcRbnj3O6Suqo7ZlZgLHJn8YSe2N5h\n8Qb5T8i6A+G/bO346RsH//O99ntea93Q2htOKy+bJ3Zv6MPDg4n3y8XYdVNKc7HH2HBdkKI2\nmM2MT7vOYGALXceBAG40Gi9lSX8mgX6uf2CIKTqej2RvHjaWUXc7jpfnj9txjMSgFEdvIzmk\ntOF1DVuzZk0wGGxvb3/77berqqoidy5btmz16tVr1651OjNOfhTIASkF7TIK14uk2GW3g5R5\nLQ61dxPddzz9jXOStO9tSohlSIHjM9QMS9zSg0jFERHAfJaLUxwauSjW58ao22nkoqwEIJVq\nMSFh+JztpnPXcgpXSUWaeWrmjzdIUV3+wOd251tD5qd6+x7r6v57f/8mq+WAm7lCddTtIv+Y\nUa3/wbwaAmeWO7sv/GTLCacvzMftPKHwHz8++tXZtIxgiHqrte8X7xw6POhK+tr02HCwl7Ei\n8dLJJUpJyvH7pMQF7TbbbIyxkBqp9BLO0HUcCOCmgoJ5LIePlyKf6e93j7WgS3bJ3O3SJqm6\n5YPbcYwh7qMbE4bH68Kzb9++FStWRJUuyooVKwKBwJEjR3IwMIEswFPXYp+WTtAOAJR67NLv\nMi+noylq5yv08X3gy8nFCXns8XqX2a/eeWo1ARlVdiAAa1Yo7ioq+nVVxfUGA2OFvEQaZPIi\ncfKTRaQUX9wqpTHndlGly9ztEAJdAcP7d9mCoSAVW5dujkalZK9CFyVMUd3+wB6Ha4PJ/Jee\n3m+YiqvFxe0mlajvm18rETF/bSzu4JpPT3qCJLfbuYPh/9p89KQ5fl5ywOn/781HX/rydNZn\nZgdc/pZjDAEzjYy4qok5Bp8hsZfDwWCQMbkBA3RLQUGqRyACuKWgYBaLDlpCob8PDOQ09pn/\nZOh2OdWv0XW79Paez3rHN6LAmC0hyjgBUyDXGESipLe4l6TndqiwBrvkeubXhPzUng3kW/9L\nfbCGPvgJbenh7mCRBgx6lxZiGVIRxAx1mqutKyWS5QbDLyvLbyooqJPJCISmqVQ/Ky9fqtcr\nkxVMuZRpeV/i8KL/1inEOhyP3goUuAbH4m7pvYtcEydzmbudrvDM6TUQVpy7hRRm87AtixG2\nSJta/YsQRb05ZGa8Isa5XUOh8qeX1cvFzJ95r8O3dueJIMnqdu5g+H+3HD1tYVhtBgAUTX/U\nPvTIxraDvdnpNhvhjQO9JMVwJN7YXCbh92skJc5cBc/+7nrDZKYYcya0mnJJOhdaBHBrQUGT\nnLnX2Sm//8WhoaycdwIUFebXRDs1cjMPG8vIux3/l4yW23HvN+knlp96x+vUP378+A0bNoQS\n3uHatWtxHG9oaMjBwARGE263Y31V3cVoIkftG5q29lIHt1EfPkO+8V/Up6/QJw5AMJvrms/p\nXQanSLEMLdZqOfpNJaLG8cs0mgfKyn5QUjJdpZIMdzgCodlq9UPl5Ut0ehliPuLKJZJqaZKw\nW1zPDAOBx51QxFIklg57DpvkRdfnjfAqPbbp1/TcLhKNo3CVSKEllNpAOP6Kbhnwx90zTaks\nkKS2L5KmP7QyF0uLo0onf2jROJ2M+ZdPp8W3dmdnmKIS3c4bCv/p42OdCbG6OEyu4B8/Pvbk\njuPuQBZmFU9aPF90MnRoKFBLLmswZr59bg643UeZciZUOL40g6bkGELfKy4qY/HCVrf73cya\nyQ4Fg0/09v785MkHT5z8S0/Px1bbmFm9d5aRdLtUXS0f5mTTI9/mZ3mtorjjjjuefPLJefPm\nPfDAAy6Xq7Oz84033nj33XdfeeWVFStW6DI4DgXGIoylTyJgzYspl5nuOpRkEwEv3dVGd7XB\nFzgqrEE1U1HVZCCyc1REQ3e0JM0ZVYUCX1lcdNrv7wsGE0MaIaBDZ3+vyxFWJpXUSKVJ9yTC\nsHka9QyV8jOnc7fdGYBzV3cM0BLOgyhR6bieLEVBP0M4IeJ2EfOzDV86FnG7cLwFZRlue0u1\nmEtcwMxQLPXY41/ud5MeV1gRU/cER+hmQ8ELgwN+MoVZuSNe70m/vzaZeQNAkVrywKKGx7d1\nOHwMB8ixIc+Le7ruml0VWwDFGwr/75ZjJ0xJumlF+aLTdnjAtfKSqlnVGXVEfW1/D2PQ6TsX\nleHJostpEHvN82Oqt82nGJ+23GiUZRYslGDYPSUlf+npsTOdoz6x2QpEojmpLOCLctofWNPX\n56NIAKCBPu33n/b737VaisXiqQrFFIWyMllxljwhwxooPCsMjwlLyzBcl0ieuB1KLMjOyLvv\nvnv33XebTKZzr0To29/+9vPPPy+X56SCJTe33377unXrOjo66uvrR37vFwi0mzVQwZX+HQ5R\nHz9HW1j7TjKDE6isETXMRCV1kNkSt5iROAGAVqQTvYu0o8gRHpLc5XTud7k8FFUsFi/W6cbJ\nWAOESa3OwlRQI9HtxCzyGSd5udC7lAJySfWOsaQwSVIHd1nohEVoBeWyiob4bBg3SR5wubsC\ngb5QwBnitXCtWCq+r6SU5/ey3+7/a0uHN8jsjnNqdbdOr0QAhBRL1epimVapvXNWlV6ezoWk\nrc/xP1uOJd5fY5Q/tmxiJoefKRTcYrd3+HwihMolkkqxpEIimWpQSWNk8dWhod3W7rgX2kAx\nXi7/dWXlmb3z7hDISE8gsLqnN8BUjQgD9KPSkgkpXrZO+vxr+/sjVseGjiCmKpVTFYpaqRRL\ntQNb7udheZKG8yVKXqIwxUoS9y5GrLhdUvVML7qZeY+AzOErdgDg8/l27NjR0dERCoUKCwvn\nzp1bU1OT08FxIIjdyJCm23md5OZnwJtWurTaiNVOR3UXgSwbZUXz1e0i0Mkclk+sjlHsIMbt\n2JQuFka9iwhZnGnFTd0mFcE0plk53I6jUcSpdqd1MP6SgIvQ5LkGjqushyR7g4G+QKgvGOgN\nBhzsnndDgfFiJd+M6VNWz1M7TgRCzF+hyxsLrp9S6g+Rf/604ziL1eEYYlwAF4tCjN2/sGFi\nSWrxJxrgN5sOMc78/nLxuEmlaRqGiwx/YLN97nAm1ovBpViJRFIrlVZLpXqCWNPXl/gcDKH/\nqq6uiJ1Fzczt2j2ev/cPMC7jkyLsZ+VlpbxX8h33+db29TNqIiMKHG9WKhdptYX8r/F5I3YR\n0rYTkysQK0xsbpTJ9tN7YRw5sjoYc2LX0dFRXFwczaLYunXr7NmzRyVcB4LYjSBsbpekZqPL\nQu1+kzadTnOvCEOlDah+GiqbkGnvCna3i3iShT3ZcATcjgOeM7BsYpcGsXoXl3gLADYP847Y\n3C6TrAhGt+Nu/+W0BY+3MqhAzSSNroBvWMtDkcd9vjeHzIl/eCWBPVheLmZZJZnIkQHX3z7r\nZJOzJU2FxwZdJy0+F8VwHEnF2H9cMc7lD/9zzym7l+tAk4iw3y5prDIwZwwwsqfT8tSOk4n3\nTypV/3Ixc7FxbgI09YnNvs1uDzKlnWL8um4s0etXFBbG35uZ233mcLwWM8sUi44gHiov1/Ao\nyX7E6322fyCUeilyHNAyvX6RTssrepdnYgeZCQofK8pQgDIxPD7TxGNa7PiepB588MFx48Yd\nPXo0es+qVasmTZp06FCy1VQCYxy2RIokbSpUBuzKH+LXPYRNuxoV16UsZzRF9x6ldrxCbvgf\nqvUjCGfgLoQaCDUKxF9fuVeqjTr819VlcVVHJMGW9VGFOHKLuz+SgRFJjIi9ZTKSuJfHVi1h\nQ6UVi5gcwpqQQsGBAsOnKpSTlQye5A5TOx0pBKEbi1Wr5lSz1S7e3D500sKcOSQWYQ8tahhf\nqJpeqfvz9ZOvbCrkMINAiPrz1g6rl+8BQtL061/1Jt6PAL4zrZznRmK3tsNh/93p05ut1kys\nTksQNxqZMjYyLF2k0bA1k7WFw2sHBhjX4cVyyOP5e19/GlYHACTQG62W1b29HC2kz5B/Vgfp\nmo0lFBqZmnmRnhDpvTDpc0ax7F9W4HXUbdiw4a9//et9990XW8rumWeeEYlEK1euzNnYBPIF\npNQx6l3yFmQqA5owD7tiFX7zr7FLb0O100CaQmgBAMDvpdt2kO8/BRlXM0EBGghN5Bwa60kc\nzhRnVyNG7H4NBD7CDqrD8XoNV1Jw1PBib5ECe1kcRtTtkipdBITAUMyQ3+CwBoK+1CrALdbr\ncSaX2ulwOphKFrMxpVR96/QK7g9FhQ07iMQi7D8ub2gqPjO7KhcRd8ysemTxuEI169XI5g09\n2XI8zC8dpOWYadDJEOq4pEZXczbsR9K0ORyykmGOJhw0wH6P+w/dXW+azO6MC+zdVlgoy2LG\nxtnDHACWG43NCuZzTo/f/7tTp18zmawsenfQ7X62fyCcWW2mTr//f7u6d6bSuS5/SNVvUnp+\nVuSJv95F+4MlfeZYtzrgORV75513ms3mTZs2xd2/e/fuuXPnHj58uLGxMTfDY0WYih0t4mZm\n02iiR9sHoeco3dtOm7pTKGinNOCLvw/ydNLZzu1aoYXYUHnozHvhmI2NMJJzsnFWx/NVWZyQ\nhZgoYNJPJhG+nxWh1hFE3FybbfjuHN4QT6uL4PeS7V8wlPDQGCV1k1P75nxss+2wM8wDNqsU\nNxkLUtrU1qNDb3/dz/2cyISsWIT9fBHzmrkgSb7xVd/mQ4MUyxl7Xp3hnvm13Hs5bnb/6eOj\nnkC8AuIY+tP1k4pVUgD4zOl412LxndVEOY6pCUKN4WoRocJxDU6oCJxA6BObvdufJBTKM1zX\nKJf/ZzRngpGUJmRjo19hBwCEKWp1X99p9tFigGaqVVfqdMaYSbQDbveLA4OMS/QAoEwiMRJE\nu9fHP5jXKJN/t6iQuWdgXkbsYkk6vZgPeQaMk7NpRPUyFLt8mIrlVe5kYGCA0Z/GjRsHAHZ7\nNts6CeQ5kdBdVO84Sp+wbkFbBNoiNOlS8Njpzq+o4wfAzaO4lNtCbn0e/9b3QZp+yy/ksUfc\n7gwiHQBAyGYgcG6DEcvQ6K63G0li53aTfjKJRMQ06KOB4HKpM+He4Zc0XdwJiQizLexjRCrH\nFRrC44j/QjrMAYc1qNGnMGe9QKvZ73a5w/GX7a9dntkqTZkkhU1dPr7QFyI3tw9xPEeFEX6M\nYrM6ABDj+HenV8yq0T372akeG8Mc7mcnLOVa2TWTS9h20dpjf2LHiSBTA7HLxhkjVveh1fqB\ndZgZe0nKSwYHACDFipM8rQ5H6M7i4iSRXkLD1+3iDInQQNhBYNgPi4v/r7eX7YJNAb3H6fzS\n6ZquUl6p0xWKxXtdrpcHh2gWq6uUSu8rKZHjeIiiDnu9X3s833i83AmzAHDE5/3vru6bCowz\n46r9573VQbIKKWmbUIaFV+KIrcOSks+dByG6OHgde9XV1bt27QonXL/feusthFB1dXX2xyWQ\n38TOzCafkGVDoUWTFuLLH8Kuug81zEhex85hoj55AQLnsvl0BJHq3vUBd/xdIl6FGEdmWja9\ncF0WSVyxl9owIrNghEas0gKAWIYx3krUEqkcl8qTbDmNr1ZBKXM6V0+Hmy3WxYgYYZcztamg\nAeLUhw/LJpXMr+MqO0fg6Ofz6pPmt9YZlL9Z0ljAMi37+oHeAz3MP7M/PW5+fNtxRquTiLAb\nppQBwGabLY23xkiBWPSdwsLLtNoqqZRxUjvKVXp9OY9Oerzsh/E5hAYAVARxT0mJjHOlLwX0\nly7XH7q61/T2vTw4yGZ1NVLpj0tK5DgOACIMm6JU3l5U9N811feVls7TaLj7B/oo8uXBwX+M\nzca1jPaT+Yq6rEtV0vnWyJhjb9kdQD7Aayp2//79s2bNmjNnzp133llZWSkWi00m05YtW/7x\nj39cc801b7/99ggMNA5hKjZPiIbu0piTjScconuP0h1f0AMnOaZoka4Uu2IVSGSxV32ee4++\nJHHJoCUU4hMVyGncLqVCxIlkZTaWLRUjSdwuxahD3M90v5dr4ycdSVoyxELTcPQrmzchaAcA\nJTXykuoUlnhSNP30QP+Qn+FTvbWoYCJL6yrWgQGs39u1p5MhxxzD0A/nVkesjuAR6Op1+H73\nfjtjnTypGPvdVRMqdMPsdnP7wLovu9m+uNdPLbnpovKPbLZNmXVliKAi8JvLiy7TaIizPhei\n6a5AoNPv7/T7T/r9vYFA1LDnaTR3FxcT/Eu+cRyh3N/AsAMAjvl8z/T2kRmsmauXyX5UUiJh\nXw5IA+x0ON4xW7inaJU4fq3BUCWRFIrFhIg5vSM/iT1ys6VEIzl3OQIalw9TsXzLnWzYsOEH\nP/iBZfiRv3Tp0nXr1mlZ0o5yiiB2+UM23S6Cw0Sd2E8f38vWcAwVVBqu/D4Q8T/LuAcQF/5h\ndjtIvqAnR26XodVBNsSOO8GWwe3SmkViO/Gx6Z3FHXSQKXy1PK7w0f02hss3DpNm6sXSFD7Y\n4z7fvwYGE+/Xi4n7S8u4Y1GJkDT93K5TbX2nrBSZAAAgAElEQVTDUmtxHP1wTnVTTKyOj9t9\n1WN/fOtxxhhkgUry2NImlZQAAIqm1+3t+oh9FrhcJ3t02YQWpzNzq5Ng2OVa7U3lhVLONIgQ\nRXUFg/ZQqEwiKeYTq4uF7djk8z0MOwDgtD/w4uBA8jRVJhpl8h+UFIu4kzwIDQAMhEJr+/os\nPnPSbdqRskAkKhWLS8XiEomkRCQqk0hUOWjUm+eMjAyNTHBuLIkdAASDwe3bt586dcrv95eW\nlk6dOjWyxm5UEMQur8i+2wHQ1j7qkxcgyBCt0QU9qHQctuReIOIPIbYBME7qxbndsMOeU+9y\n4XaZix1k7HZJK6cMc7usWl0siYaXqtudPuqy9DEsltcWSmonppZF8dLg0DEvw5dwiV4/T5Ny\nKk+IpJ7bfaq93xX5r0SE7p5VM6EkPkGEj9u939b/yj7m/i6NxcpfLR4PAH/b2fk5U0PYCOU6\n2S++NW5vwJOh1eEIzdWoby0v4lMWLlMSD0z+38OwAwBImt7vdn9kY23zaoMzsVgdnKsdPVGu\nuLuEM7g4fBgUTb9vtX5iOs2WfhG3r1gUOF4vky3QaGaoVKOTlj/i5FqGRnK+dYyJHUVR2Nkf\nK2az+cSJE01NTSpVNtoDpI4gdvlGztzu+bi4nS545myLyhqxK+8BpmtJ3Bg4lmrlidtlxeog\nM7HjWQ/vjNulu+Kb/1kvVu9SFTsyTLXtsZJMjR/qmzVqXQqBIlMo9FRvX2JsTIpjPysvU6Re\nPZsGaOt3nrZ45GJieoVOLWP+cvJxu7Wfndx5nNnJ5tcbrJ7gobMGmcj4IuWDlzfs9rjey8Dq\nEECzSnmNwdCoTbGMUSbEHpipfg/PvpYGOOB2b7ZaB87qHaNjAYAOPFMUirs4pozZx9AVCLzS\n19EbYC2ly7bTCE1y+fdKSorzQBRGgNz50AivohtLYvfII4+cPn361VdfBYB169bdfffdgUDA\nYDC89957s2fPzvEgGRDELt+ILYOSTbczd1OfPB8tUBy1ugiovAm78oeAJ3E77jX4sW7HcApg\n17tsuV1iWsbIi11KVY4tkGZicnqnvIjhpep2pj5f99GERBkAiRyfMFOXUivP96yWLxwMhjRL\no1qmN/DfTqokdTuSov5ny9HDAwxvk5tpldqfLKhrcTreZbe6BTrtFVqtI0y6yLAjHHaGSRdF\nRv7hIMMkTddIpYt1+osMo/HbPnJUpvfrIuaIpgG+drtft4e62IuhXKJW31NSQiCUXrAwTNOb\nhzq32OyJ2RjcVhdBhNB1RuMyvT6FlYhjk1z40KgkRowZsXvrrbduvvnmP//5zw899JDD4ais\nrBw/fvw999zzr3/9y+FwtLa2jsBA4xDELg/JlduZTlNbX4BwKM7qIqCaZuzy77F1trCFw3wy\nK0fR7bJodRHSc7sUxE6kg7TOmJl3EAr6KP5uR9Nw9IDN62R4flmdoqgyhV6IHpL8a2+vP6EC\nMIbQT8pKC3J2HucTtHMHwr9+v93EVHOYjUsbDHfPqdlut2/ktLobDUZulchiy5ORZrgX0gAH\nXK53rNZOX/yi3nkazQ+Ki+N/BqSuladcgy+ZhkzDJ3/5iF2EMolkVXHxOBlX2fDzgOwq0Wil\nu44ZsVu5cqXb7X7rrbcA4OWXX77jjjsOHTrU1NR0+PDhpqam3t7e0tLS3A91GILY5Sc83S5R\ntrhFkO7t0Hy8Fpi6agIAqp+BXXprYi5FSkTdLiWxg8zcjrGEysiLXapWd2ZHKZ43Mz/fRSpU\nRb4qYX/ywrAeR/joAYYsVETApJl6kSSFz/kzh3MzUymQcXL5HUUJHU4zgKTpz52ufR6XjyQL\nCfF4vfxipVLNFJOOctrq/f2HhwNMpUwSubG59Ibmsk/s9o1m1qX9l2o1NxkLzlurY6fV7X7H\nYjnu8wEAhtBVOt13CguzFSgLBW0brdZP7fbo+YK/2AEAAlio033HaJSf16kV3GcJtnNO4qtG\nsYhJPogd3wLFs2bNivx727Zt48aNa2pqAoC6ujoA6O7uHnmxE8hPkFLHUbuYI3gWfYjR8PRV\nE+hv3U1teQ5ohsRJ+vhesqsNjZ+NTVoAKqaOkzyg3baI2xlEoviTAmd91OzWLs68dp1BKU7J\n7dKzOmD8oDj2kr2TXeR7RUixpG6n0BD6Ymlir1g6DD0nPDVNKaQ+zFarvnA7bcEzX04CkDKI\nfCL6mNf7hct1SZaWGncHAu9YLYNnC6x0hv1tJu8Gk7lOJpumUjYrFEomw6vSy++dX/vE9hPc\nhfowhO6cVXn5+MKtnFY3/0K1OgBoViqblcr+YNAWDpeJxdnNBRGJdTcZsUvV6i9drtP+wHFS\ngoJB/icOGmCbzbbf5bq9qGjWKC1tHy2SnmfOy1p0mcDri6vVaiOFTkiS/OCDD26++ebI/Q6H\nAwAULJ34BAQi1+CUysxGnpyod6hqMnbF96hPXmB0Owj66G+2kW3bUek4NGkhqpoEkPIv7ajb\nMcC/9j1vRqsRbQSKiFYpSqFKXBwpuV3mFKgkkaAdf7crr5PbLQEqIYvCNhgoKA0ptXx1E0do\niU736qAJAWqyixocIowGQHBKGX4fLEc83uUFRu7itNwEaOpju/0LuzNuoIoQ5hFRx32+4z7f\n68jcIJNNUymnKBTK4WsPplfqbrio9M0DvWzbJwjsJ5fW1pepXh4a/NLJmlExX6u5mdPqzlel\ni6VELC5JtQ4LTwhNITiWGQyRf4coqi8U6g8G+wOB3mCwPxjsDwaDFNdX2hEOP93bu1OpvLOo\nKHdrAEaR2F4Ugq6lDa8r7vTp0//0pz9dccUVO3bsGBoa+s53vhO5f926dXK5vLY2SYNCgQuK\n2KAdpNuXIlbvzlUVrmnGLltBtbwEbJEJmqZ7j9K9R5G+FE1aiOpnJNZD4SYycoNSx3BOYXe7\nNIJ2uZiE5UmM0kUa70gAzrXNZYWlP0fkLMx9Cs7F3ATPXnaEGC+tlvd0MKzO7OpwTZiu578k\nvUmuqJE6i7qh1HP2K01DtYugELTqfU/29F5l0E9TKtOw9Xav5z2r1RViLuMXcTsAoGn6mNd7\nzOt9HaFxMtnFKuVUhSLaTWH5lNI+u2/3SYb5YoUY+/Gihm5x+JXTXSF2b5gnWN0IEHMaEWFY\nlURSJZHA2QgcDXDa739xcLAjYbVfLF+73Y94vbcWFl4xGkVkc43gc5nDa42dzWabN29ee3s7\nAKxYseLll18GgPXr199+++3333//X//615wPMwFhjV2eE+t2Wd7y0T3Up+tY3S4WsQyNm4VN\nXgQqrm5OjFglLImf2UikYIvVZVHsEmdjY30uAkPjHTa949d1jfGMnHWri231beIx6UzTcGSf\n1ecepk1yAgcAfY20sJxvFgUZptq/toec8fpFA/1Jmd8logCgXiZbXmDU8g7dOUnyPYvlsCdJ\n0DQidongCE1SyKerVJPkCgKhMEk9uvnICdMwi9XKiasurfjc73Jy9g6Zp9XcIlhdfkADbLPb\nXzOZvGSS/rNzNZpVRUVi7prJAiNLPqyx41vuxOv17tq1CwAuv/zySDW7ffv27dmz55577sFH\nYy2nIHb5Tw7d7tAOatcbHG3HhoFwdPGV2MVXQ4r1AnLkdiNgdRAjdok+F4GrnWKc3vGzunO7\nHq53ORU7AOCTKuu2h459da6JqvzsR00QWPU0FSFO/skHA+Txgw6/m/lC26cI7yk4Myoxhi3R\n65KWlqUB9jidH9vs3FNvUdjcLoIMx6YqlTOUqkIg/rjlWJftjCmWVSjU9crBUBL9navVfFuw\nujzDHg6/PDT0hdPJ/bRKqfSBsrLCPJAJgQhjSezyDUHs8p/ciR0A0B17qV2vsfUcSwTVz8Au\nu52tKgojtnCYVrDMdLC4Xf6IHQCY/MyxKO4O2eeI6F2KVhclonc5OsfFul3Qd8Z4uPXuVLvT\nOhiQJ3zIBWUyQ22SKhJ+L9nxtT3Evp6PBmgp9dnE555QK5UuLzDqh69DIGnaR1E+inKFw1vs\n9h5/CjVKIJnbRdCIiIuVSoUbrO5Al4zsoZJHNOdoNd9htzpB6UaXVrf7n4OD3LOTchy/t6Sk\nWZlmdUmB7CKIXfoIYjcmyKnbQdBHH91DfbMN3KxNk2JBlZOwK77P2KmCjay73UhY3VkVi4ts\nAX+ly3sYxS4Cm96FAuTpA85wmOGvozGIlaUSFUsihccRPv6NnbGJxbAhScmdxcPSb8UYVi2V\n+ijST1N+kvRSQPILzkUYL5eHKKozEIieovmIXRTEL6C9UKe9nr1enWB1+UCAot40mz+y2Tiy\nnhHAcqPxBmOS0oMCI4AgdukjiN1YIbduBwAUSZ86SLdtpwdOJH0uKpuAXfkDIPherrjEDsAA\nbohrnwoA7G7HkQabBbFLCK3F2s95o3RRUnU7nULcd9Jz+hhrQqhaJ1aUiDWGYd8Npy148pCD\n4reY+7Ni35A0BfdiHYkIv8ZgmCCTA4CbJA95vQfdni6/n07R7bgpkUpu0Bsa5axLDAWryytO\nBwL/GBhILKEcS7NSeU9JieK8LnSX/1woYmez2Xp7eydNmsTnfpIk+/r6gsFgaWmpjL3QtiB2\nY5HcTs6au+nDO+ljXwLJdR1GxXXYkntAzKuGeyTvUq8tYH44IdUgInmMYsdd3CR9seOcKjW5\nAuef0kXgELsIUb3TKc4ICkXRB3dZfB6uGVukQCU1ikgzWUu///RRF8+VnABgk9AtJd5MzqcI\noVka1be0WjGKXw7vJMk2j2df0H3K78/wlK0i8KV6/WyVmqOvmmB1eQhF0+9ZrW+azRxX7UKx\n+P6ysirJ+XnUjwkuCLHbtm3bc8895/P53nnnnaT3Hzp06PHHH/f7/WKx2OPxrFq16sorr2Tc\nrCB2Y51cSZ7PRR/eSbXvBC/romNkrMSW/hgkqZR9Z6tvx5JG6vfRtuGRvCyH69Jd+nY+EXU7\nRrEDAAcZjlrdmXvMgfZ9Sb543jApVxMKtcjUw3cFZ5QvC/098iSZjGwUS8XL9cZySRKjcomo\nAy73fre7m729KRsEhl2u0XxLr5MkiGMcgtjlLd94PGv6+tzsCbNiDFtVXDxXnUL9bYEskg9i\nxytN+vnnn//3v/+dxtZfe+212ILG3PeTJPnHP/5x+vTpL7300j//+c8VK1asXbs2UgNZ4PwD\nKXWRW5a3K1Ohi6/Gb30Mm3UjWxosbe6i3lvNYX4ML2HTUJHuzG04UhnSEXjkBmxWR2jO3FKC\naXcXOGLZsPOYQSmO3OKsDgA0RomxRMq9NTmBe51hDqsTS/HqJjVjAewmmySNyhMEhl2p199T\nXJLU6gBAFcIu12r/o7z811WVS/R6g5jXVQQBTFerflNVucxgEKxuTDNZofhDTU0N+3RWkKL+\n1tf30tBQeGyusxqjuEjyc5crTz5xXgvJ3333XZVKFa1LzJ/m5uabbrpp7969fO4PBAK33HLL\n/PnzI/VT5s+f/49//GNwcFCjSfHKJzCmiHW7rIXxcAJNWYTJ1dT2l5i7kFn7yI1/wZf9lH8L\nMq6+FBATQjsbw5PKkN9HA0CJ6txRZgmTcSZnEIkAYjbLUShY8LnhxM4y+3GGvzJjEePaiRqa\nAssgV7hLTuBelqpvUiXeMEUjkuAOi8Q2GJ+eogyhKjfRqUxeOTlKjVS63GhI41d+kUi8VK9f\nqtd3BwJful37XS4Xy5irpNIbjMZaaRKjFRgrGAnit5WV/xocbLHb2Z6zxWrt9PkeKCvLbmM0\ngTiGQqEDbner233Y6yVpurSmxpgHETtef/If/ehHq1at2rt374wZM1La+vjx4/nfL5fLly1b\nFv1vW1ubQqGorKyM3uNyuXp6eiL/9vv9o1I/TyCnRM0pK4aH6qdjIgn1yT+AMVPSZSHffQJf\n9hPQZLOJ+xn9itG72PsNZw951voFCYIo+Fx2wQk07iKtxxnuPem2JLSRjcLodnIN0TBZg4sw\nACirUdhMAUiYBG52SPqVlD/xgegAEJLhSIbjOlw0XaVokqfckjHspwjpuahbhURSIZEs1xuO\n+Lz73O6Dbk+0Np5RLLrOYGhWCIUwzjcIhO4uLq6VSl8aHGSLzHX4fP/v9OkHyspqBKfPKjRA\nh893wO0+4Hb3BYb9utvvcl2cB3VneIndwMDAwoUL58+fP2nSpNraWvnwRKpHHnmksbExu8M6\nduzYM888c++990pjvpH79u17+OGHo/+Vs+dzCYx1smV4qGoydtV91Oa1EGaqGeaxku8+jl39\nE2Qo47O1JEG7WEQ6AJCy/3JLHqERfC4VpHLc7+UbtAMAhZoY16x1O0I9x902E3M9uWjRu4jh\naQsk1U0qDDtj6mIZbiyRmXvjZ2xRCFaAfsBI+0hKiiEZjkkxTIbhUgyTYZgMQ6JkM6F8iHM7\nAMARmihXTJQrggXUYa/XFAwVikUT5Qo8xbrcwjzsGGKRVlsllT7Z28v2Q9ESCj3a1XW3sOQu\nG4Rp+qDHs9/t/srtdrL0MzzgYeheOPLwErsXX3zx008/xTCstbW1tbU17tG77roru2L36aef\nrl279t57750/f37s/WVlZTfccEPk39u3bw8JHeUuAOI6z6azhdJx2FX3Upv/BiGm8IzPRW16\nArv6PlRQxWdrKbidQN6j1Igap+m8rnBfp8fc72NbkiQn8IJyWd1EDUJg85wr+VtSJbMM+uiE\nM7y91z+jXB8J7I08YoRNVSgh5TigwJikTir9Q1XVU3197V7mxnQhivpbX1+n339rQUGqli8Q\nxRQK/aWnpzeQpKj4aZ/PHAqN+mwsL7HbunXriM17vvnmm5s2bfr973/f0NAQ99C4ceN+9atf\nRf59+PBhf+pJYQJjkSy4XUk9tux+6sM14HczPBzwUO8/hV39E1QouN15CFvQLopcRdRP0ZTW\nKvpOMutdWa2yctyZ6ZVoQobNExRJ8KJy+cCp+AsqFaIHur1ltbmdkQn7KQCIi9tliBCuG4uo\nCOIXFRWvm0wfWK1si/c3W609gcB9paUqYQlT6tAAT/X1JbW6yDO/cLmW6lPuTp5deJ0UYq3O\n6/W6XKxFPjNk8+bNmzdv/vOf/5xodQIXMpmLFCqoxK/5GchZEnGCPuqDp2hTV4Z7ERhFpPKM\nrlhyJVE/RTN1rrGgVBqNa2AYqp2ojlpdLDqFWKcQF1XIcBFDFGSwxxcKpFn3JCXC7I3OBC4c\ncIRuLSz8SVmZFGO9prd5PP/v9OkuHnYiEMfnTudJztLQsexJ1t53BOD7a6+7u3vlypVGo1Gh\nUKxZswYAWltbH3744TDnT+E9e/a0tLS0tbXRNN3S0tLS0hLJfmC832q1vvDCC9OnTz906FDL\nWXp7ezN/kwLnAVkIkumK8WseAAXLdoI+6sM1tLWPz5Zy3k5DYJSQKYn6KdqLLjXWTlTXTdJc\nNN9YVMG1lteokY5rYPq1QEJfQiQvR4T9VFb0TgjXjXVmqlS/raoqFLP+HU3B4O9Pn/4iZ6GZ\n85IQTb9mMvF5JkKoQSabplLlekhJ4TUVa7FYZs+ebbPZFi9evGfPnsidPT09TzzxRCgUWr16\nNdsLd+7cabPZAGDixIlbtmwBAJFIVF5eznh/UVFRfX19V1dXV9e5wIlEIikr47WwXeC8J/M5\nWdAU4tc9SL7/JDiYDlS/m9r0BHbNA0hXknRLwoTsGCLpbGwcEhlRVMG3SERxlXygy2tzB+Pu\nt/T7iyrkGcYR+ZOYTnG+Ekk8Ys0rv7CpkEgerapa09f3Dcsq/gBFPd3be9pguM5gkLCH9zIk\nTNN2krSGQvZw2BoOW0MhO0laQiF7OOwiSRmGzVWrbzAaibGw5m+Lzcb9ZZNg2CSF4mKl8mKF\nQkUQ+VCgmFfniUcfffTpp5/eu3dvVVXVrFmzli9f/sgjjwDAM8888+CDDw4NDalHPONG6Dxx\nwZKFaJnHQX7wJNgGmB+Vq/FrfsazBorgdvkGY24snO0OlyMGe3wn2xxwNn82irZIUts0oufG\ntN1uTITr4i6ZgtuxQdH0v02mD6xWjucggCKxuFIiqZBIKiWSCqm0MDMjoQF2OhwtdvtgKOQM\nh5OKxXSV6v6ysjw3OxdJPnTypJepz4eWIJqVymlK5SS5XBSjyPkgdrx+le7bt2/FihVVVfFL\ny1esWHHfffcdOXJk5syZORibgAADWYjbKTT4NQ9Q7z1B2/oZHvU6yXcfx6/5GWiLMtqLQD6R\natAuJQrLZP2dHp8nHKmQEtU7+2DAUx5WqEeuQmwuMipGHbYrpUEkEtyOEQyh2woLq6XS5wYG\nQhTzND0NMBAMDgSDX56dmZVhWLlEUimVVkulzQqFLpXKxjTAvwYHt9pSODPvc7k+sFpHPc+A\nm40WC6PVfUunu6OoKG+tlO/xr2KaNhblgZkKXIBkIU4mVWHL7gddMfOjPhf5/pPgMifdjLDY\nTgAAEIKKhnP1ReQxzX97TzAlYueYVJfc5W24ziASccc/8iE6krfMUat/W1nJ/yPyUVSHz7fV\nZnu+v/9nJ05s5m1pNMDLQ0MpWV2E102mE3lc3WIoFPqY6U3JcfwGozFvrQ54it348eM3bNiQ\nWDdu7dq1OI4LGawCI08W3E6mwpc9wBqW89jJd58AlyXpZgS3yys41rSlFIFIFUOxTKU+dwWV\nE3hE79z2EFsB5Jwy1rNlkypd7DNzPZixS7VU+lhVVWPqxfzDNL1ucPCloSGKx2Kt9UNDWzin\nfdkgafrpvj7GkFg+8JrJRDK9/esMhjyvGsNL7O64445jx47Nmzfv1VdfdblcnZ2db7zxxu23\n3/7zn//8u9/9rk4nLDMSGAWy43ZX/xTUBcyPeqzke6sFtxPgSWVj/LRGxO1OHXGyrfzLKWPX\n7VJ1NcHtOFATxCMVFd9K6zK9xWp9sq+PbTI3wqtDQ5vTsroIpmDw+cHBtF+eO074/V8yFS4x\niESL8955eInd5MmT33jjjc7Ozttuu629vf3ZZ5+95ZZb1q9ff8stt/ztb3/L9RAFBNjIgtsp\ntfiy+0FlYH7UbSXffwo8jqSbEdxOQK0Xaw3xc5pyAqfDcPKQgySTRz6yDh+3y9t52JQQ3I4D\nAqGVRUXfLylJIwt1n8v1393dLpag2hsm0/sZWF2EL5zObXZ7hhvJOusHBxmP2G8XFIjyPpmX\nV1ZsBJ/Pt2PHjo6OjlAoVFhYOHfu3JqampwOjgMhK1Yglky9ymUm310NHpaNaIvwa34GsuTV\niYQk2TyBI0KW0/RYtyP0zecMIV5vmNQXS6onjE6/Tu5cinwTu0wUTcil4KYnGPzQaj3u8/UH\ng3zmWKMUSyT/UV4elzb7ltn8tplrIbISx7UikZEgtAShIwi9SPSl08lYh0WEYY9WVVVIJPyH\nlFP2u1x/ZaqhWy2TPVZVxa11+fAbg5fY/fKXv6yrq7v55ps1GpbC/SOOIHYCiWSkd04T+e5q\n8DL/cESFNdg1DwCefJGW4Hb5wGiJHQCcanf2dzGXJjbUyQpKZTndOyMcYpdvVgeC2I0IYZru\nCQS6AoGuQKA7EDjt97uTLXTTEMTPy8trpNLIfzdaLG+wl+290WhcZjAkRrZcJPmfp05Zmf5M\nZRLJY1VV4pyV1uNPmKZ/eepUP1OLjl9VVjYlW7CYD2LH60P86quvvv/97xcXF998880bN25M\nzKIQEMgHkFKXvlepC/Br7mfrOUYPdVKfvspnM8KcbJ6T0xQKAKhqVKl1zLZkPen32JOfPCPN\nyqK3zIc0hhbbZXhRzIdr6piAQKhaKr1Uo1lRWPjLioq1DQ1P19f/R0XFlXo9WzjKEQ7/oaur\n1e0GgE1WK4fVLTcarzcaGecrVTh+b0kJYnqoNxB4cWgovbeTXVocDkara1Yqk1pdnsBL7DZt\n2vThhx/eeuutW7duXb58eUlJyb333vv555/nenACAmmQvt5pCvGlPwUZc+92umMP3b6Tz2YE\ntxt1RqzfQyIIQw1TNGIRw6mVpumhDm84xKxZbCaXFcNjdLs8DNdljuB26aEliCkKxe2FhXeX\nlOAsa8gCFPV4b+/TfX3/Zjew6wyGm4xGjh01yuU3GJjXNO+w23ePdqNVH0VtYJpfRgh9p5BX\n1fp8gJfYEQSxZMmSF154YXBwcNOmTUuXLn3llVfmzJlTX1//29/+1pZ69RoBgVyTpt7pirGl\n94OU2e2oXW/Q/R18NiO4XT6T66CdWIY3NGsYL44BP2nq8Matf+HpbRkaXv7H7bLlZILbZcIC\njebh8nIZy5QoRdMcTe6X6PU3F7AUGYhhudE4SaFgfOiFgYH+YHx3vpFkk8XiZFqtcZlWW87e\nhDffSG0+WyQSLV269MUXXxwaGtq0aVNFRcWjjz769ddf52hwAgIZkobeIX0ptvQnIGJaxkuT\n1CfPgyBtAslQGyTldcw/DxyWoKc/mMlka9p6F+t252W4LorgdpkwSaH4z8pKTYq/f5bo9Sv4\nxbQQwA9LSlRM2/dT1Jr+/nAqiR1ZxBYOf8gUqJJg2I0sUcb8JOVfrhRF7dy586233nrvvfdO\nnTplNBoNY+oNC1yApNqFDBnKsUV3UluehcTzi89FffR37LoHgUhyXaTdNiGRYhSRyvFRqR4X\npbxe6XGGrEMMi3V6TrgVakJfJM1k+zqF2OYZzdhGdsm6igkNxzKhWir9XVXVn3t6+phWmyWy\nWK//biozlTqC+FFJyV+6uxMN7pTP96rJdHthoZ+iTKGQORQaCoVMZ2/WUAhHaIpCsUSvr0ox\nizZEUe0+n5+iNDiuF4n0BBFX/+VNsznIVLTvar1em+Mwf3bhW+4kHA63tLS89dZbb7/99uDg\noFKpvO6662677bbFixcTo/GGhaxYgVRJdXqU2v8+vf8DxodQ/Uxs0Ur+mxIMb1TgFrtcp8cC\nQDhEffO51e9l2BFBYJPn6KXyjE6e6YkdIcXyLVyXuwCb4HaZ4CbJx3t6jvl83E9bpNPdlVbj\n1FeHhhjL4CEABY4nTdRtksuv0uubldjwH50AACAASURBVMqku+70+1scjs+dztguFwhAQxB6\nkUhHEEaRSI5h71gsiUakIYj/q62V8k7XzYdoMa/TymOPPfbEE09YLBaxWHzllVfedttt1157\nrXyMpIcICERINW6HTbuasvXTJ79KfIg+/iVtrEBTFvHcVHS/guGNJKMetCNE2LiLtIc+t5BU\n/NUiHKaOHbBPnG3A8fSLnaYXtAv7KWCeJT4PEeJ2maDE8V9WVv6tr+9Ll4vtOQu02vSsDgBu\nLig44vOdSBBHGiCp1QFAu9fb7vWWSCRX6XTz1WpRgnt5SXKXy7Xdbu9i6khLA9jDYXuyH3g3\nGo38rS5P4BWxu/zyy0mSvO22226++eY8aSAmROwE0iO1uF04QL3zF9rax/AQwrAl96CKpvSG\nIRjeyJBU7EYgbmfu9XV8w9y8pKBUWj9Fm+H2U3W7yPo8sSxfrlUjEOEQ3C4TaID1LH3D5ms0\nPygpyaQPgykU+s9TpzJvF6vE8Su02m/pdBqCoAGOeL0tDseXTmcos+V6ZRLJf1dXs6UJM5IP\nETteYud2u5VKJQAEg8He3t5QKGQ0GvV6fe6Hx4ogdgKZkILeuSzkhj9CgKFaOkgU+PUPs7aa\n5YdgeLkmH9zuRJtjqId5Pqt6vKqkhjlDkCcpiV1s1kWeuN3IXAgFt8uQD6zWV4eGYnVhrkbz\nw+JiLOP+Wl+6XE8ytXlIAwKhaSrVKb9/MEuptQ+Vl1+kTC2+nQ9ix+vAViqV7e3tS5cuVSqV\ntbW148ePNxgMjY2NL7zwQq7HJyCQC1LQKZUBu/x7gJiOlICH2vIchDM6g9BuW+SWyUYEOEha\n005HELkugFLTpFaqmU/3p466TrWzznPxIe0CKEHf6BdAGbGrYBZ3ZBCJ4m7Z2nI+c7Ve/1B5\neYVUCgAagripoOBHJSWZWx0AzFSpLs/STGCYpr9wOrNldRPk8lStLk/gdTrr7u6eN29eMBhc\nunRpXV0dQRBms3nnzp2rVq2y2+0PPvhgrkcpIJB1+C+5Q+WN2IxrqC83Jj5EW3up7S9i37ob\nINMTnLAOb3SJuF2OoncYhsY1a77ZbQ2FGVyqv8tDUlTtRObSd3zgudguUQGDPipP4nYjQObr\n7dgcLvH+8zJA2KxUNiuVdOYnuwRWFBYe8/m6mVbCjRYI4LaxU5E4Dl5it3btWpVKtWvXrvLy\n8uidNE3/4he/+N3vfvfjH/9YPHYK9wkIREnB7Zq/hczd9MkDiQ/Rna106xbUfGW2RhUZkqB3\nWYR/FoWOIHLkdhI50dCsObzfxrj4ZajHF/SRDRfpCCLrF80zsAX2sut2cYrD7TcjH+vKxO1S\nGm30yeef4eXiCypC6GdlZX/s7o4LtuEIGUSiApHIKBIVikQFIpEYoR0OR6vbnfbSOS1BUACM\nVYhjWazXRxvjjjl4rbFbtmxZY2PjX/7yl7j7zWZzQUHBgQMHLrrootwMjxVhjZ1AtuA7DRoO\nUu/8H23tYXoMYXNuQpMuy+awopsWDC9LpJQhmyO96znu7j7uZntUpRGNn6YTidPULI6gXdLp\n2gzdLqn0MPrNaE1ipipbWRnn+Wd4WSdE0wfcbnMopCEII0EYxWI9jjPO9vYHgx/abDsdjhBT\n2TlGCISmq1QLNZomhQIBhGjaGg5bQyFLOGwJhaL/dobDSoJYoFYvYW+by00+TM3zitiFw2GZ\nTJZ4v0qlQggF+BUwFBDIT/jG7QgxduUPybf/CP7ECzNN7X4DC3rRxVdnfXixYxMkb8TIUeiu\nrE7p95KmPuZECpcjdOgL64TpWolspIuDphe3438NizwzVm5G8fqXOJikT87WTiMIkseICKFL\nVCo+zywRi79XVPQdo/FTp/N9q9XG+XmWSiSXqtULNJrYXhcihIpEoqI8kLBcwOv0UVdXt2nT\npt/85jdxU64ffPABAAgxM4GxDl+3U+mxy79HfbAGaIbYD7XvfUTT2LSl2R/fWYR1eJmQalm7\nXLgdQlA/RSOW4r0nmeN2Pk+4bY+tcZpOoU7Z7dhW2vHMruBwu6zLTT6YTVLTyp168tlyPnxE\neY4cx5fodFdotXtcrk1Wa8/wJXpSDJuuUs1Tq9n60p7H8Dp33HXXXWvXrl2wYMGqVavq6+tF\nIpHZbN62bduzzz570003GY3GXI9SQCDX8HQ7VDYem7Wc+vwtxkfp/R9QoSA2a3luFqLE7Egw\nvLTIB7cDgMpxSrEYnTrqYlwIEwyQ7V9ax1+sVevTaSMb53bp5czmOpyWD9NVsSRK3qiPMK8k\nOJ8hEJqnVs9Vq9s8nu12e08waCCIWWr1LJVKMtYKC2cLvi3F1q9ff++99zqdztg7ly1btm7d\nOo1Gk5uxcSGssRPIBTzX21Et6+hjn7M9iiYuwObenGu3G7ZHQe9SIdV2FDlab2fu9Z1oc1Is\nZ2AMobopamMJwxoYbjIUO7EMG3WnEWBEMLwxQT4cPnyj/d/97nevu+66bdu2nThxIhgMFhQU\nzJkzp7GxMaeDExAYYXjG7bAFt1EAbG5HH9pBBbzYZbcDlqSCWrYQEmnHIsYymUiCHf3KTpIM\nbkfR9PGDDjJMF1Wk1rwxNmiXqtXpCAJCAKN/YRJgIKWlgQIXMiks41Aqlddee23uhiIgMGZA\nGHbZdymxhG5rYXycPr6Xoils4coRczsQ9I43eTIhCwAao6Rppv7oflswyJDcR9Nw8pCTIJAh\nxbhdxO3SsToAAPB7SbaqztHPLWnZZ4EcIeidQFIu0BloAQE2eIsRwubchCYvYnuYPrGf2vIs\n5L5dVfx+hSYWPEjVS3LXmkKpEU2apZfKWbd/os3pc+f8WxT3Bv1ekvEW+4RcD0mAg3yY7xPI\nWwSxExCIJwW3m30jmsZa4oTuaqO2/B3CI/3bWuhRNraQyIlJl+iUKuZLNUnSHa12imm6loOU\nwnXpaavgdqOL4HYCbAhiJyDAAP8JTWzaUmzGNWyP0j3t1LuP04d2gMucpaHxRdA7bvInaAcA\nIgnedIleZ2S2MY873HnYyfhQ5uS6T65A7rhwOtUKpIRwSAsIMJNCw7GLlmASOfXZ6wAMYRXa\n3EWbu2AXgMqIysejysmofALgI3ToCQvvOMifxXYAgBNo3MW6E984fN3n0lo9xJm1d0M9PrVW\nXFCecpIsNxlaHcdqPIERI/MeuALnGYLYCQiwkoLbNV2KIZz67FXgqB/kMtOHzfThXUCIUek4\nVDUFVU4CxUhUC6LdNsHtGMkrtzOIRfqLDK0es9N65jqtCGNwVu86250KrUiuzNpJW4jVnTcI\nbicQC98Du6WlZd26dT09Pf7hxZ0BYPXq1c3NzdkemIBAXpCC202Yi+E4tWM90MnaF4aDdFcb\n3dUGCKHCGtQ4B9VNAyKdQrL8EUJ3bKTqdjkiolkIQ00z9Pu3m0IxebJRvTt6wD55jp4gMl1C\nk0WlE4J2eYLgdgJReB3eH3300ZIlSwiCKCoqkkqlcY8KvWIFzm9ScLtxszBCQm39J2PPMQZo\nmh48SQ+ehN1vovppqGkBMpRlNNakOxT0jomU3C7rQbs4zZLI8MbpurbPLXHBX0UY83jDnW3O\nhmZtVnYkcJ4huJ1ABF7H+csvv3zVVVetX79epxOuBwIXIim4Xe1FGC6iPnkOyFSu/SE/fXgX\nfXgXMlaiCfNQw0wgcrgmWpiZTWRU3I7NtPSFkopxqq6jrrj7FWHM1xMc1HuLKvlWLR4BmROC\ndvmD4HYCwDMr1mw2r1y5UrA6AQE+oKpJ2DUPoMKaNF5Lm7uona+Qr/6a+uKdnCbSCjmziaRk\nJxkKk44guLdQ3ajSFUoYHzK1edwO1ot3ZMvRWyaD5E8+zGULRBBSZQV4HfZ1dXUmkynXQxEQ\nyGf4B+0AABXWoOU/B7ed7m6juw7RvUcgHEz+sig+N/31x+TBT1DZBFQ/DZU3gVydzqCTIYTu\n4uATt4v6n8575p6Uonc8ZQshmDBNu2+7OeiPHw9F0X37XdMuMxJioV6VADNCg4oLGURzJPGd\n5ejRozfddNPGjRtra2tHYEx8uP3229etW9fR0VFfXz/aYxG4gEgzyhUO04PH6Z4j9OlvwD6Q\nzhaipVLKJkC2wzCC28XB6HaM8bzYZ3LrXXrBM4c5+PUuM+NJ2lAsnTRLn8Y2c4cwIZuHCG43\nwuRDuJTXuWb37t1VVVUTJkyYO3dueXk5hg37mfjII480NjbmZngCAvlFSnG7cxAEKmtEZY1w\nyXKwD9Cn2+juQ3T/Cb45FhBTKgUXoZJ6VN4E5Y1IX5rySJgQMiriiMbt0pucjTW8DCdDNUZx\nVaPq1OH4xXYAYBnwdx93V9QrM9m+wHmPELq7AOEVsbvssst27tyJEGJ8dOvWrQsWLMj2wJIg\nROwERpHsrE7zOumju6nDu8BtTXMLci2qmIAmzE1vPV8igtulQa6Xl9E0tO2xWAcZig8gDE2Z\nrdcWMC/FGxWEoF0+MzJ6xxayukDkMh8idrzEjqKouCjdqCOIncDokrXMA5qm+47Shz+jOw+m\nEMAbDjJUoqZ5qGFG5sXwBLdLlRHIGwgHqX3bTQEfw44QgspxqsrxSgxj/uE98ghul+fkVLB4\nas15LHn5IHa8dI3D6oqKijo7O7M3HgGBsUHWBAghVNaIXXE3fttj2MzloEhns7Sli9r5Crnu\nV9TuN8GVbvwvsikhVTZFRsBjCDE2caaeUd1oGk4fdR1oMbnY82QFBGKJpM3mwj/4bzMf7Oc8\nhu/6D5/P984773R0dASDZ5L7aJo+fPjw0NCQxWKpqcnOTJCAwIWLQoOav4VPWUSfOkgf3kn3\nHmPsPMtF0Ee3bScPfYqqJ6OJC1DpuPQGIiy5y0NUOlHNRNWJb5yMj3qc4dYd5srxyspxKpYl\nMyOHUNZurBC1q6zEz1J1tfOs5F5eqSovsXM6nZdccsmRI0fi7kcIXX311VOnTs3BwAQE8p00\nEym4wXBUexGqvQicJrrza7qnnR44kVqtY5qkO1vpzlakL0UTL0t7flaohMKfkWlKVl6ndFqC\npr74po4RKIo+ddhl7vWNn65XqoUOEwIpECslIylbY9rt8srk4uB1/K9Zs6arq+uf//znrFmz\n7r777sWLF1977bWvv/56W1vbSy+9JMrjtycgkFNy4nYR1AVo6hVo6hUQDtL9x/8/e3ceF9V5\n943/us4s7DsiCIggigooijEq4hJNo0bMZjYDLtEuaZs+NtFW7/S5+/SXxldiG5eqjW1jkjZm\nMRpjjMZbExdUNIoE4oJsLiAisq8DzMw51++PyU0Ic2bmzDBnGGY+71f+IOc6y7emJh+vlVVe\nI5XXWONd6S9gDVXs9Ifk4gFu6lN0eKoNJSDbOZuREwI1bXXtLSaDfluLPj+7dthov6jhvv3Y\ndYdOu4HLtlW0NqecAZftnDnPdZMU7PLz87OyspYtW0YI8fT0DA4OTklJSUlJ2bBhw7Jly/bv\n3y9vjQBOzBB9ZJyaplTT6DE0egwhhHS0srtl7M41Vn6ZaMRH5XrraBOOvUMrrnLpz9jQdYds\nJ5FjOu2USi5lWmhxflPdXfF+O0KIwLMbV1rq73YmTAj08um3rjtkuwHNqrzVx6wz4LKd85O0\neKKpqSksLMzws1qtbm9vN/z861//+uDBg3fvWtGLAOCSHJR+vPxo3HgufbHiufXcwt/S4amE\nSvpvJys9L+x/kzTX2PBNLKdwKko1l3h/8KgJgUqVuX97N9dr807U3r3V7rDCwMVIjGt26cEa\nEN1gZODUKSnYRUZGnjp1yrAxSnh4eH5+vuG6Wq3mOO727dsyFggwQDi0Z4tSGh7PzX5esfhV\nOmG+lAPHWEMlv+8Ndj3Phq8h20nhyA6qwUO975szKCTc08w9vJ6VFDSXXWqWsKWVLHCA7EDn\nyBzj/JnJ+SvsJinYLVmyJDs7e/z48TzPz5kzZ8+ePW+88UZOTs6qVat0Ol10dLTcVQIMCP0w\naukTwE18WPHsq9yclTQywcLNuk7h2DvCif9Yd3AtIQTZzvmoPRRJkw1dd+Ym09250X4tt0Hg\n+yfcIdsNdOY3RrFv1hlAycnJSdqgmBCybdu2rVu3FhcXd3V1zZs378SJE4brP//5z3fs2CFn\nheKwQTE4s/6KQayugl07w0ouEN7cnBUaEs09uIL4D7L2/ZhvZ5Hjo0xnu744v6mpzlxYDxzk\nkXh/kFLZP/vMY7KdCzCeBidTDnPO+XYDK3RKDXY9dXV1ff7559XV1cnJybNmzZKjLIsQ7MDJ\n9WcXV0erUHCEXT5pbic8lSc3I5PGjbf23ch25vVXH9XdW+3Xr7TwepP/xH38lclTQjy8+iFj\nIdi5hp6RS+6g42zxzsWDnUaj4Xnez89PpoIkQrAD59e/w5es/Ipw8j+ky9z0eTrifi79WaK0\n+t9ZiHdm9Fe262zXF+U3NZvuuvP0ViZPCfb264elssh2rqE7b/VX0OmXwDewUh2ROMeOEHL7\n9u2lS5eGhob6+Phs376dEFJQULBmzRq93pqtUwHcCfUNMvzVP1+PSVI8sZaGDTNzDys9LxzY\nSFrrrX05ptw5IU8f5bi00KEJJv/U3anRF5yua23oh/80YrKdazBEnH4MOjIdhuZiJAW7+vr6\nKVOm7N27Nz09PTw83HCxsrJyy5Ytq1evlrM8AFfQbwnPN5hb+BJNnU9Mb1bL6ir4vevZzQJr\n341sZ0o/9k5RSmJH+yWMDzT1D1ynFb7LqauvNrkNHoB5zpCrHBnvnOF/r7UkBbvt27drtdrC\nwsLPPvssJibGcHHBggWbN2/esWNHS4u0jVIB3F53wnNcyOMUXOrD3E9+Tjx8TN6j6xS+els4\nu5cI1nWrINuZ0r8jj+Ex3mMmBXMK8XDH8+zq+QbHb3GHTjuwLwdEroGY6ojEYHfx4sXMzMzu\nSNctMzOzq6vL+AxZALDIkQmPxiQrHv89HdT7t3APjF05IRzeTjparXoza2tEvHNCoRGeKWmh\nKrX4v+EZIyUFzTcLrftn3XfIdmBfAzR4yU3qHDvR1RI4JRag7xwU7/xCuEdepuMeJMT0sOyd\nYv7T19m9G9a+G/HOWL8vF/ALVo1LDzWzDLaipLX0O0dvX4xsB/Yl37DswE2NkoJdQkLCvn37\ndEarUXbs2KFQKEaMGCFDYQDuxRHxjlNw9z/KPfQz4uFt8h5Nk3BgMyv4ytxWKSYg2zkbHz/l\nhBmhvv4ml8FW3WwvymtkQj+dTQFgJwM3hMlB6skTJSUl06ZN++ijj1pbW2/evLlnz56srKzV\nq1c/99xzQUHY+ADAPhwQ72jMWMXjv6chQ03ewXjhwn7h651E12Xty9F111O/d9oRQtSeinHp\noQGhalM31FR2XD3f6MijKdBpB3LAMRjdpO5jd+DAgZUrV9bW1v7wJKVPP/30zp07vb1N/+lf\nNtjHDlyevAmJ1wvn97MrJ8zdExDGPfhTGjzEhtdjo7tuzpBjBJ4V5TXWVplcDBsQqk6aHOzI\noymcIfWC27K4H55bBDtCSEdHR3Z2dmlpqU6nCwsLS0tLi42NlbU4MxDswK3IFPJY8TfCmY/N\nnT+mVHMzMunwVJs/gYTnDMGOEMIYKbvUXHXT5GJYv0BV8tQQU+st7A7BDvqdqXg3oFMdse1I\nMWeAYAduy84hr6maP/ov0lRt+g7KTV9MR03t+6fcNuQ5SbYjhJQXt966ZnIxrLefclxaiNrT\nQuRijPA6QdnnCIhsB06iV8Ib6MFO6tkyu3fv/uSTT+7cudPZ2bsz/+233544caK9CwMAcT3j\nkR1CXmC44rHfCdnvsxv5Ju5gwumPOJVHX/rtvn/R/1brbgnP01vhJNkuJsFPpebKLokvhtW0\n6vNP1Y+dGuzlK/KfBr1WqL3bWVvV0VyrFQTm5ascMTYgKMxD9qIBZGZIcoZ4N9BTHZEY7N57\n773ly5cHBwcPHTrU09OzVyvHOW5aBgD01J2Q+pTwVB7cnBXsu2PChQOEieUPJgjH/80p1TQm\n2fav9HyfuyY8ZzAk1kep4oq+bRJdDNup0Recrk9OC+leS6vt4uuqOmurOpvrunrGwY42/ZVv\nGsZNC/EPNrkyw7xODY9OO3AeLhDpDCQNxT7xxBP+/v7//Oc/nWfjOgzFAojqS8Jj1WXC1zuJ\nxsRZMpyS+8nP6NBEm99vipvEOyfptDOor+4szDW5GFal4hJSAzs1fG1VR0u91sx/Jbz9lKkz\nB5k65cIiBDsAu5PU2abT6ebNm+c8qQ4ATOnLgRY0PF7x+DoaYWJnSkEvfPU2u1vWp/rEuMkm\nKU4VYkLCPcdOCVGqxP8ToNMJV75pKLvU3FxnLtURQjSt+vKSNpvLcKqwC+AaJAW72bNnZ2dn\ny10KANiRjfHO2597+EUamyLeymuF//k7q7nVt9LEuUm8cx4BoeqxaXZYBnu7tK2tRW/z48h2\nAPYlaSiW5/nly5dzHJeRkREREdFrUt2YMWP8/f1lq1AchmIBJLIlLQm8cPSfrOKKeKvai3v4\nN3SQ6S2O+8a1R2adLcdoWvWXztZ3dfSpKr9A1fgZg6iN47HO1ZcJMNBJCna3bt2aN29eUVGR\naOuJEydmzpxp57osQbADkM6WbMfrhSP/YJWF4q2evlzGKhoU0cfCzHDheOds2a5To790tqGj\nzfZeN0JIXJJ/dLyvzY8j2wHYi6RVsW+88ca9e/d+97vfxcXFeXj0Xtw+atQoGQoDALuhvkFW\nZzuFkvvJT4XD28Un1XW2CQe3KDJ+SwIH26VCYy68ctZ5dj8x8PRWpqSHXM6ptziiSinx8VOK\n3lZ+rTU0wtPLR+oWWgAgE0m/CW/cuPHaa6+98MILclcDADKxJdsp1dzcF4SDW1hthUhrRyt/\naKti4W+JX4hdKjTFULbrxTunovZQjEsPvXKuoblBa9xKKfEPVg8a4jko0kvtqbh0rr7xXu9z\nhHmeleQ3jZsWalsB2PoEwF4kTZuNiIjw8vKSuxQAkJUtyylUntz8X5s8Lra9kT+0lTXe7Xtt\nFhmWVrjM6gonDDFKFZc8NSQk/IedSiklQWEeI1MCpswdnJIeGjnc13AoxchxAQqlyHy6pjpt\ndbnGcRUDgBhJwe7FF1/8xz/+UVtbK3c1ACA3q7Odhw+34DckKFy8taVW2PuacOI/Jne/szeX\niXdOmO0USpo0OThlWujwZP/RE4OmzgsfOzUkYpiPyuNHpXp6K2NH+4m+4caVFm2XjaPMTjU8\nDTBwSRqKvXTpUlBQUExMTFpamvGq2LVr12KaHcAAYvWwrKefYv6L/IFNpLVOpJUxVnqev5lP\nE2dwE+YRlSPOmHKN8VlDtnO2QBMQqg4ItXCYxJA439o7ncbjtjqdUPZdy5hJA/ufC8CAJmlV\n7MyZM0+fPk1NrGU/duzYjBkz7F2YBVgVC9BHVvd7tdbzBzaRdrNPeQdyExfQhMnE5q0vrDHQ\ng103Z8t2Umha9XknagWxc8kS7w8Ojeh9+KRETtiRCTCwSBqKPX78OM/zehMcn+oAoO+sTkV+\nIYoFvyHeZjet1DQJp3bxe/7Myk3sgWdXrjEmSwjx9FYMuEDj7accOlJ8f5PS75r1OsHB9QCA\ngblg9/HHH+t0OkJIr7FXUy5evGifogDAIazOdgFh3PwXiael7cqaqoUjbwlfbmMNVTbX5oYG\nXLaLHunr4y8yn0fbyd+4auOcy4HYeQngVMwltnfeeWfmzJnXr1+3+Bae57du3Tpt2jT7FQYA\njmDtUlkaPETx2BoaYXkKBKu8Jny6XvhiE7tygrQ19aFGs19xlU47g4HVdcdxNGF8kOio+91b\nmsaa3luiAIADmAt27733HqV01KhRy5Ytu3jxouhsvIaGhp07d44aNWrNmjV/+9vfZKsTAGRk\nXdedXyiX8Vvu4RdNboPSjTF2t0w4u5f/8BV+z6tC3iHSXNOXOsU/4lrZjgyorju/INWQWB/R\nptJLzQJveQ63MXTaAfSFhcUTOp3uL3/5y1//+tfGxsbQ0NC0tLTBgweHhIR0dHTU1dUVFxfn\n5eUJgjB79uy//OUv48ePd1jdWDwBIAfrQpLAs+JvhItfkI5WK54KCqdxE7jhqSTQxBYq1nOZ\nVRQ9DZR8w+tZ7rEa0dNmh470ix0jvjGKRQMo3QI4FUmrYpubm99///2jR4+eO3euvr7e8Iha\nrR4xYsScOXMWLVrk+EFYBDsAmVjdAabtEAqOsssnCK+z6jkaPITGT6Qjp1hYkCHxbch2/aeh\npuvy2Xrj65SScWmhFjdPMQXZDsAGkoJdT3q9vqGhwdPT09/fDv8uthmCHYB8bBncbGsS8r9k\nRecIs3I5JOVo9BiaPItGJhDSp01SkO36UVFe473bHcbXPX2UqbMGKcVOqpAC2Q7AWlYf2KxU\nKsPCwuQoBQCchCEhWRfvfAO59MVs9DT2zWesqsSKB5nAKq6wiivEfxA3Ko2Omkw8bRy8c0me\n3ooBke3ikwMaa7q0Xb1jfWe7/vrl5oTxgba9FmfIAlhL0j4mAOCGbOgAo6FDuQX/h3voBRqZ\nQKiV/3ppqRUu7Oc/+INw/N+s2vJifGOut4rCYEAkG6WaG54cINpUXa6preq0+c0DItcCOA+r\ne+wAwH1YffiY4amYJBqTRDpa2a1L7Ma3rKqUMMn/beb1rOwCK7tAgyLomHQ68n6isuIMA9bW\n6JIDsgOi3y4syqv+bmfNHZEB2dL8Jv+gQR5eNiZUq/rt0MkHbg7BDgDk4eVHR6fR0WmkS8PK\nL7Mb37LKIiLoJT7NGu+ynE/Ihc9pwlQu+QHiFyxrsc5vQGS7ESkBzQ1a4xWyOp1QnN80dmqI\nzW82/G83k9ic/xcHwDEQ7ADAHNs67X7Ew5uOvJ+OvJ/otexOMbuRz24WEL203Wt1XezKCf7q\nSRqdSCfMpWGxFp9w1U47MhCynVLFJYwPvHyu3nhVXmNN153rbZHDLR1bYpZob5yT/5oAOJjV\nwU6j0fA87+eH2c0A7sIO2c5A/kEIsAAAIABJREFUqaYxyTQmmaQ/zcq+ZYWnWF2FpAcZMyyw\noBHxdOxsOjSZiB530H07sl3/CQrziIzzrbzeZtx042prwCBPX7FTyKTrme2c/JcCoF9Ind18\n+/btpUuXhoaG+vj4bN++nRBSUFCwZs0avV7qwAoADFx2zklKDzpqCvf477nHfk9HpRGlh8Tn\n2N0y4cg/+E/+P1Z4mui19ixp4HD+CWSxiX6i6U0QWNHFBtuOo+ipU8Mb/urjewBckqRgV19f\nP2XKlL1796anp4eHf79ZfGVl5ZYtW1avXi1neQDgLOToA6ODhnLTFyuy1nPTnqbBkVIfa64R\nznzMf/AH4eIhU0O6rrpC1sDJsx3H0VH3BXMKkV7V9hb9rWvWnFMCAFaSFOy2b9+u1WoLCws/\n++yzmJgYw8UFCxZs3rx5x44dLS0tclYIAM5CrvFNlScdM51b9F/co6vpiPuJQtpQXVc7+/ZL\n4fPNRIds53R8/JSxo8Vn7FReb2uqlTbDEgCsJynYXbx4MTMzszvSdcvMzOzq6ioqKpKhMABw\nRrLOXaNhsdysJYrM9dz9jxEfSctgWX2F8M2n8pXkzDy9Fc4c76LifYMHiwyyM0au5TXpdVae\nUAIA0kidYye6WkKlUtm1GAAAQjx86Lg5imf/H/fAcho61OLt7NpZdrdUvMmlO+0MnDnbJYwP\nVKlF/iuj7eRL8pscXw+AO5AU7BISEvbt26fT9T7he8eOHQqFYsSIETIUBgBOykELTjkFjZ/I\nPf57buFLNG682XMsmHDqQ2JiIZebZDvnjHdqT8VIE4eJ1VZ13rutcXA9AO5AUrBbsmRJSUnJ\ntGnTPvroo9bW1ps3b+7ZsycrK2v16tXPPfdcUJBrbisAAKY4cjMRGj6cm7NS8dT/paPTiUIt\nflNzjZD/pcNKck7OGe9CIzwHx3iLNpVdaunUYF8FADujzHgfSTEHDhxYuXJlbW3tD09S+vTT\nT+/cudPbW/w3rayysrJ27dpVWloaHx/v+K8DAOmXzrDONuHySZZ/WKSJKrjHf0dDokSfc9Vt\n7UQ52z4ger2Qd6Kus10kwwUP9kieYvtxFKY4YcAFcBipG0UuXLiwvLw8Ozu7tLRUp9OFhYWl\npaXFxlreBR4AXJUhLTk03nn6cvctEFrrWFlu7ybGs1Mf0EfXiA7auvCWxcYMscZ54p1SyY2e\nEFhwps64G6HhXldDTVdwmNSNDAHAIklDsW+99VZ2draXl9fcuXNffPHFl156KTMzMzY2tr6+\nfsGCBQ0NDXJXCQBOi/oGOTgzcVMXEU+Rk6lYbQW7fNLUU+4w2a4npxqZ9Q9RDx0pvvvJ9cvN\nTOjrlsUA0E1SsNu9e3durtGfjwnRaDSHDh0qKSmxd1UAMMA4NN55+nKTHxdtEXK/IK11Dipj\nIHCebBeT4OsfKLKRgqZVf7ccqygA7MbCUOyqVasKCgoKCgpu37598ODBnk2MsdLSUkJIaGio\njAUCwMDhsMFZOvJ+WpbLKq/1buC1wqkPuYdfJETk2AO3GpDt5iQjs5SjI8YHfnuy1nhA9lZh\na1iUl1IldfstADDDwm+k2bNnx8XFMcaam5srf+zOnTtDhgzZsmULli8AQE+O6b3j0heLHjLL\n7hSzkgumnnK3AdluzjAy6xugCosWWWyn0wnlxW2OrwfAJVnoscvIyMjIyKisrJw/f/6qVasc\nUxMAuIDubCdXlvIL5iYuED12Qjj3qSJ6DPESn9Tlzvq99y5ujF9dVQev791rd+dG+5Bh3l6+\nUtfzAYApkrq+jx49airVDR48+ObNm3YtCQBciqEDT44+PJo8i4aJrc3vahfOmTxnzG077br1\nY9ed2lMRHS+28EVgN67i2HEAO5D6x6OOjo79+/eXlpZqtVrDFcbYtWvXampq6uvrse8JAFhk\n/xl4lNLpi9mnrxPWuwuKleWy4RNozFjR59xzsl1P/dh1Fz3Ct7qiw3hr4rq7nY01XUHY+gSg\nbyQFu5aWlvvvv7+oqKjXdUrp/Pnzx40bJ0NhAOCa7DtES4OH0JQ5LP+IcZNwZo9iSAJRiQcF\nZDtCiKe3wvHZjlPQ2NF+1/JE/ulfv9KcOiuMiqx7AQCpJA3Fbt++vaKi4t1337127VpaWtqf\n/vSn/Pz8devWLViw4IMPPlCpRFawAwCY1z1E28eAxU2YTwLDRRraG4TcL/ryZndgw7Bs39dh\nhEV7BYSInA7X3qKvrsDWJwB9IinY5efnZ2VlLVu2bNSoUZ6ensHBwSkpKevXr582bdqyZctk\nrhAAXF+fEp5CyaU/K76/ydWT7N4NU89hsp2B9JTWM9L1MdsNTwwQvX6rsEWvF/ryZgA3JynY\nNTU1hYWFGX5Wq9Xt7e2Gn3/9618fPHjw7t27clUHAG7Gtm48GhFPR6eJNDDGTn1IeJw0b4HF\nlGb33VL8glVhUV7G17Vdwu2Sdjt+CMDdSAp2kZGRp06dYowRQsLDw/Pz8w3X1Wo1x3G3b9+W\nsUAAcFdWxTtu8mPEJ9D4Omu8KxSIzMD7vhWddv/LTHSz9rpEcYn+CoVIP2tlWVtHG7I4gI0k\nBbslS5ZkZ2ePHz+e5/k5c+bs2bPnjTfeyMnJWbVqlU6ni46OlrtKAHBbUuOdypNLe0q0heUf\nZY0YWJCkV1az2FHXl2zn4aWIEtv6RBDYzcJWm18L4OYkBbtZs2Zt3bq1o6NDoVA88cQTM2bM\nWLt27bRp07Zv3/7zn/88IiJC7ioBwM1JiXd02DgamyLSIOjZyfcJE5+5hU67Xuw1i06K6BG+\nak+Rr9RWdTTXaeX+OoBLosz43D5Lurq6Pv/88+rq6uTk5FmzZslRlkVZWVm7du0qLS3FgWYA\n7sZcFNO08HteJV0iKyu5KU/Q5AdMPYetT/qiL3umVJdrivObjK/7BqgmzBxk29Yn/X54GkA/\nsuX8Fg8Pj6eeEh/yAACQm7mNjr39ufsfF07tMm4RLnyhiEkm/oPkLs8N9WU/vMFDvatutLc2\n63pdb2vW3avQhMeInC0LAGaYC3br1q27fPmy+ed5nn/99dexRzEAOBj1DRLNdnTUZHr9IrvT\ne0N1wmuF0x9xD78ovjEK9ivuG5uzHaVkeHJAwZk646aS75rbW/Qxo3yVKkmzhgCAmA92xcXF\nFy9eNPzMGKupqSGEBAQEKJXKpqYmnucDAwPDw8N5vt/OkwYAMEK56Yv5Pa8RfVevBnanmBWf\npwmT+6UsMCUgVD1oiFdtVUev60xgldfb7lVookb4RMX7chyOpACwzNwfg/bt21ddXV1dXV1W\nVhYfH79+/fq6urqmpqa6ujqNRnP48OFhw4a9+uqrEyZMcFi5AADdTPax+YVwExeItgjn9pL2\nZtEmrKLoo77MbItL9DOV23Q64WZha96J2oaa3kkdAIxJ6t9+8803IyMj161bFxISYriiVqvn\nzp27bdu2FStWaDQ4AQYA+oepbEeTZ9GwWJEGbYdwbo+ptyHb9ZHN2c7TRym69Uk3Tav+8tn6\nS2fr21uwxR2AOZKC3YULFxITE42vJyYmtrS0FBYW2rsqAIC+oZROX0w4kdkm7EY+u1Xg+IrA\nvOiRvp7eFtbzNdZ05Z2oKbvUrNfi2DEAcZJWxapUqpycHMYY/fHS89zcXEKIUmnL0loAALsw\nuYoieAhNeZB9e9i4STizWxExkniIrLjEKoo+snkVhVJJx6UFF33b1Fxvbgc7xsidG+33bms8\nvBRqT4XaQ6H24NRenFqtUHsqVJ6chwdHsN0JuDFJmSwjI2PlypUZGRnPPvtsdHS0UqlsbGzM\nzc3dunVrZGRkUlKS3FUCAJhhKttx4+cKNwtEjp3QtAjnP+OmP+eI4tyPzdnO00eZkh5aX91Z\ndrmls93ckKtex/Q6valh2ZHjAmIT/W0oAMAFSAp2zz//fHFx8aZNmw4dOtTzekxMzO7du9Fj\nBwBOSqGkMzLZ528aHzvBis6x4ak0cpTxQ+i067u+7GwXEu4ZFOZx92b7raI2vc6WIVe1F3rs\nwH1JymSU0g0bNqxevfrUqVMVFRVdXV0BAQFJSUlTp05FqgMAZ2ByQDZsGE2czq6cNGphwqkP\nFU/+gSjVxk8h2/UvjqORw30HRXrduNZaU6Gx9oAkD7FjygDchBWxLCwsbNGiRfKVAgDQFyYH\nZCc9wpdfIa1GW+C21gsXD3GTH3NEce6nL512BmpPxajxgZFxPtcvN1t1dKzaCxsag/vC//sB\nwNUp1dy0p0Vb2OXjrLZcvAlbn/SZXc5s9QtQpUwLTZoc7OkjtScCPXbgzhDsAMB1mNzWLnoM\nHXG/SAMThBP/IfreB5V+34hs5zRCwj3ve2BQ7Bg/i/GOUqJGsAM3hhlyAOAWuKlP8JVXSUdb\n74amauHiQVMDsphs10d9H5Dtxino0JF+Q0f6dbbrtZ1CV5eg7eR1WqGrk9d1CrpOvqtL0HUJ\nSmWvjbkA3AuCHQC4FFMz7YiHDzf1KeHYO8Yt7PIxFpNEI0aIvtDwNsQ7m9kx233/Qh+lp4/J\nVtsW0gK4DElDsW+99VZ2drbx9fr6+gULFjQ0NNi7KgAA25kckB2eSmPGijQwJmR/QPRm98XF\nsOwAoVRhihG4NUm/AXbv3m04ZKIXjUZz6NChkpISe1cFACALbsZi4iV2JmlLrfDNPvPPItvZ\nzC6rKABACgtDsatWrSooKCgoKLh9+/bBgwd7NjHGSktLCSGhoaEyFggAYD2TA7Keflz6YuHo\nP41bWOEZNjSZDhU5F/uHezDlzlZ2H5AFAFEWgt3s2bNbWlry8/Obm5uN56MOGTJk7dq18fHx\nspUHAGAjk1sWDxtHh6ey63lGLYYti18RPUP2h5uQ7QDAiVkIdhkZGRkZGZWVlfPnz1+1apVj\nagIAkBWX/ixffZ20N/Vu0DQJZ/dys5aYfxzZzjbotANwAElz7I4ePbpq1SpB+GGpUV1d3fnz\n51tbW2UrDACgr0zGL7UXNyOTEJFdMVjpeXYj3+KbMd/ONphsByA3qauH1q5d+9xzzxl+3rVr\nV1RU1OTJk2NjY8+dOydbbQAAcqFRo+moKaJNwpmPSYflP7Ui2wGAE5IU7D799NMNGzZMnDiR\nENLc3PyrX/1q7Nix77zzTmJi4gsvvCBzhQAAtjMzZspNfZL4DxJp6GwTTn0oY03uDZ12ALKS\nFOwOHDjw2GOPvfzyy4afW1pa3nvvveXLl+/YseO7776rqqqSuUgAANuZzHZKNTczi4gdU8DK\nL7HSCxbfjE472yDbAchHUrCrrq5OSkoy/Hz8+PGRI0eOGTOGEDJ8+HBCyO3bt+WrDwBAPjR8\nOE2aKdok5HxCJOQ2ZDsAcCqSgl1gYGB9fT0hhOf5L7/88sEHHzRcb25uJoT4+Jg+2wUAwAmY\nG5C971EaFCHSoO0Qst8nhFl8ObKdDdBpByATScFu4sSJu3fv3r9//+rVq2tqap555hnD9V27\ndnl7e8fFxclZIQCAnJRKOiOTUJGcwe4Us2s5Ut6BbGcDZDsAOUgKditXrgwLC3vsscc2b96c\nmZk5bdo0QsgHH3zw8ssv/+xnP/P2NreZJwCAMzDTaUfDhtGUOaJNwtlPWc1N2YoCALAzCxsU\nGwQFBeXm5ubk5BBCZs+ebbiYkJDwt7/9DatiAcAFcKkPC7evsbqK3g28Vjj8luKRl0ngYPNv\nwK7FNsCWxQB2JynY7dy508fHp3sE1mDixImGDVAAAAYEkwfIEkI4BZ2RyT7bQAR976audv7L\n7YpHVxNvf/PvR7YDgH4ndbuTgwcPyl0KAIDczA3IhkRyqfPF29rqhS+3Em2Hxfdjsp21MNMO\nwL4kBbtf/OIXx48fz83NlbsaAIB+RFMepENGijaxhirhq38R3qg/z/hOZDsrIdsB2JGkodjq\n6upZs2alp6cnJSXFxcX1Wi2xdu3aUaNGyVMeAICdmRuQpRz30M+FzzexhkrjRnanWDj5H+6B\n5aJ7GgMAOANJwe7f//73qVOnOI4rKCgoKCjo1bp8+XIEOwBwESpPbt4v+c//StoajBvZ9TzB\nJ4ib/Jj5dxiCI+bbSYdVFAD2IinYHTt2TKFAVzkAuAhznXaEEJ8Axbxf8Qc2kq5240Z26Wvm\nHUDHPmDxK2Y+gcwHADKRNMcOqQ4AXIyFaBUUzs37JVGoRRuFb/axkvN9+Tpra8RUvF4w0w7A\nLiT12P3xj3+8evWqaJNer3/11VeTk5PtWhUAQD+jYcO4OcuFo/8iTDBqZMKpDznvABrVp1ko\nGLHtBQOyAH0nKdjl5eWdOXOm55X29na9Xu/r6xsVFaXVauWpDQBARhYGZAmhMWO5aU8Jpz8W\naRP0wlf/4hb+loZE9bEMxDsAsCNJQ7EHDx5s+rGOjo7c3Nz77rvvz3/+c2pqqtxVAgDIwWKc\noqPTacpPxNt0ncLht0TXWNgAI7MGGJAF6CNJwc6YUqmcOHHinj17fvWrX3V2dtq3JgAAh7GY\n7bhJC+nIyeJtmib+8Hais8+/AzHxDgD6zsZgZxASEhIcHHzt2jV7VQMA4HiWsh3lpi+mUWPE\nGxurha/fEZuHZyPEO3TaAfRFn4LdvXv3KioqVCqVvaoBAHBGnIL7yUoaOlS0kd2+Kpz/3L4f\nRLbr+Vd/lwMwkEhaPLFt27aysrKeVxhjjY2NR44c8ff3HzFihDy1AQA4iMWFFETpwc3/Jf/5\nRtJcY9zILn3NAsLo6DQ7lsTaGrGiwqBntsOyWQDzJAW7vXv3Zmdn97pIKU1NTd26dauHh4cM\nhQEAOJTlbOfpp5j7Ar//r6IbFws5n3BBg2l4vB1LQrYz1h3ykPAAREkKdgcPHtTrf3T0NaXU\ny8tLrRbfvRMAYCCynO0CwriHfiYc3EoEfe8mQS8c+afisTXEf5AdS0K2MwWb3gGIkjTHztfX\nNzAwMDAw0MPDo76+/t69e1qtFqkOAFyP5Q1QwuO59GfE27ra+f95i2g77F8WiMEMPABjUhdP\nHDp0aNKkST4+PvHx8aNGjQoLC4uIiPj973+v0WhkrQ8AwMEsZ7uEKTTZxFmxTfeEr3cSwZ49\nSW6+kMIixDuAniQNxR4/fjwjI8PLy+vRRx+Ni4tTqVSNjY0XLlzYsGFDYWHhF198IXeVAABO\nhZv8uNBSx8ovGTexymvC+c+4KYvs+DkMyFqEkVkAA0nB7p133omKijp//nxERETP61u2bFm1\natWtW7eGDRsmS3UAAP3B8mQ7SrkHlgmfv8ka7hg3sssnWMBgOibdjiUh21lk6LdDvAM3J2ko\ntra2duHChb1SHSFk5cqVlNK7d+/KUBgAQH+ynKJUHtxDvyBefqKNQs4edqfIviVhTFYKDMuC\nm5MU7IYPH97S0mJ8vb29nVIaGxtr76oAAPqf5WznF8z95GeEExv6YLzw9U52LYc1VBHG7FUS\nsh0AmCdpKPY3v/nNzJkzT58+nZ7+w8iCXq9fu3btihUrwsPDZSsPAMCp0cFx3PTFwsn/iLR1\naYTTHxJCiMqThg0jg2NpWCwdPIx4+PTlixiTBQAzzAW7jRs3lpSUGH5OTU2dMWPGhAkTRo8e\n7eXl1dDQcPbsWZ1Ot3TpUsyxAwBXZXmyHSF05P206R4rOGLyDl0nu1NE7hQxQgihJDCMDoql\nkSNo3ESilPSn616Q7QDAFMpMjxHMnDnT+MAJYydOnJg5c6Y9i5IgKytr165dpaWl8fH23Ocd\nAMCY5QFQxoSv32Y3C6x7r5cfN30xjRlrQ0kIdgAgytwfFo8dO2Ym9hFCGGNdXV2enp72rgoA\nwIlIWiQ7a5nQtpHVVljx3o5W4cg/adJM7v5HicK6rjt02gGAKHOLJxQKhdIslUrl6+urtGko\nAQDApShV3IM/J97+Vj7G2JUTwhebSGuDtR/EQgoAMCb15AkAAHcmqXvMN5B7+Dck0Or1ZKzm\nFr/vdVZ+2ZbKAAB6QGcbAIAkkhZSBEUonvwDqy0n1TdYzQ127yZpb5L09q524cg/aPID3P2P\nEE7qTmwYkAWAXhDsAACkkpLtCKU0bBgJG0bJA4QQ0tbEam6yezfIvZus7jYR9KafZOzyMeHe\nDW7O88Q32I5lA4D7QLADALCCpGzXk28g9R1P48YTQgivZ/WVrPgsu5Zj6nZWc5P/9HVuZhaN\nSZbyenTaAUBPmGMHAOAoCiUNG8alL+Z+8lOi9jJ5W1e7cOQfwtm9hDfTvfcDrKIAgG7meuzW\nrVt3+bKFybw8z7/++uvjxo2za1UAAM7L6k474zcMS1E8NkT4aidrqDRxC2NXTgj1ldzcF4jK\noy/fAgC3Yi7YFRcXX7x40fAzY6ympoYQEhAQoFQqm5qaeJ4PDAwMDw/ned4RlQIAOI2+ZzsS\nEMY9tkY4v59dOWHqFna3VDiyg5v7K4sHVGBAFgAMzA3F7tu3r7q6urq6uqysLD4+fv369XV1\ndU1NTXV1dRqN5vDhw8OGDXv11VcnTJjgsHIBAJyEHYKUQslNXcQ9aG5YllWVCMd2EgF/fgYA\nSSTNsXvzzTcjIyPXrVsXEhJiuKJWq+fOnbtt27YVK1ZoNBo5KwQAcFJ26SSjsSmKx35Hg6NM\n3cDKLwkndxGz5wARzLQDAEKIxGB34cKFxMRE4+uJiYktLS2FhYX2rgoAYGCwzwBoQBj36Bqa\nNMtUOyu7IJzdY/E1yHYAICnYqVSqnJwc43Njc3NzCSE4UgwAoK+USm7qIu6B5aYOjWVXs1ne\nIQcXBQADjqRMlpGRsXLlyoyMjGeffTY6OlqpVDY2Nubm5m7dujUyMjIpKUnuKgEAnJYdFlJ0\nvyp+IqdSC0ffJkxkUp2Q9yWn8qJjHzDzBqyiAHBzkoLd888/X1xcvGnTpkOHfvTnxZiYmN27\nd6PHDgDcnD2zXcxYbmamcPI/opPqhG/2cWovOmqKmTcg2wG4M0mZjFK6YcOG1atXnzp1qqKi\noqurKyAgICkpaerUqUh1AADEvtluxCRO2yHkfCLWyITTH3Jqz++PsgAA+DErYllYWNiiRYvk\nKwUAYECzZ7ZLnMF1tgl5X4q0MUE4/h6n8qTRo009jk47ALclKdj98Y9/vHr1qmiTXq9/9dVX\nk5MlnWkIAODa7JntUh+m2i52+ZhIm6AXjv6TW/AiHRxnl28BgMuQFOzy8vLOnDnT80p7e7te\nr/f19Y2KitJqtfLUBgAw8Ngx23FTHhM621jpeZE2Xisc+Yci47ckKFz0WXTaAbgnSdudHDx4\nsOnHOjo6cnNz77vvvj//+c+pqanmH29sbLxy5Uqvi4IgVFVVlZeX6/U/OuVaq9WWl5ffuHGj\ns7PTqv8lAABOwn6JinIznqMxY8UbO9v4w38n2g47fQsAXAE13p1Ouvr6+sTExFu3bnl6epq6\n5/jx4//61786Ojr279/fffHmzZt//vOfOzs7VSqVTqd7+eWXDeeSnTt3bvv27SEhIUqlsrKy\ncvHixY888ojoa7Oysnbt2lVaWhofH29z/QAA8rHbdsG8Xjiyg1VeE22kceO5OStNPYpOOwB3\nI6nHzpSQkJDg4OBr18T/dUMI2b1795dffvnkk0/2ur5x48bU1NRdu3a99957Tz755JtvvtnZ\n2cnz/KZNm5599tktW7a8+eabL7/88jvvvHPv3r2+VAgA0F+ob5Dhr76+SKHkHvwpHRQj2shu\n5LOic339BAC4ij4Fu3v37lVUVKhUKlM3pKSkvPHGG0OGDOl5sby8vLy8/KmnnqKUEkIyMjJ0\nOl1eXl5nZ2dnZ+ewYcMMt8XFxTHG2tvb+1IhAEC/s0PCU3lwD79o6jxZ4ewnpEn8z8A4ZAzA\n3UhaPLFt27aysrKeVxhjjY2NR44c8ff3HzFihKkHExISjC+Wl5d7e3uHhoYa/lahUERHR9+6\ndSstLW3+/Pk7d+588sknlUrl//zP/0ycODEu7oc1Xw0NDd1ltLe3KxQKKcUDADiJ7mxnS95S\ne3HzXuD3/5W0Gz2r1wrH3uMefVn0ODKsogBwK5KC3d69e7Ozs3tdpJSmpqZu3brVw8PDqk+2\nt7d7e3v3vOLt7d3W1kYImTdv3pUrV3bt2qVSqVpaWn75y1/2vO27775bs2ZNz6es+i4AgJMw\nJC2r451PIDd7ufDFZsKEXi2svkK4cICb8ri9KgSAAUpSsDt48GCvtauUUi8vL7VabcMnVSoV\nz//oGESe5w1Jbt26dcuXL3/wwQcJIdeuXfuv//qvN998s7vTLiYmZunSpd0lYZsVABjQbNgY\nhYYPpxPmMrGNi9nl42zISBojcng3Ou0A3IekYOfr62v4oaOjo6qqSq/XBwcHBwQE2PbJ0NDQ\n5uZmvV7ffRxZbW3tlClTioqK2tvbH3jg+/OtR48ePXjw4IKCgu5gFxcX9+KLLxp+vnDhQldX\nl20FAAA4CRuyHTdhvnC3jFWVGLUw4dT7iideId7+9ioPAAYcqYsnDh06NGnSJB8fn/j4+FGj\nRoWFhUVERPz+97/XaDTWfjIhIUGpVObl5Rn+tqKi4t69eykpKT4+Poyx+vp6w3WdTtfU1OTn\n52ft+wEABhCr+9Io5WYuJR4+Ik0dbcLJ9wkR2cQKqygA3ISkHrvjx49nZGR4eXk9+uijcXFx\nKpWqsbHxwoULGzZsKCws/OKLL0w9+M0333R2dpaVlTHGTp48SQiJj4+Piop6/PHH//a3vz3z\nzDNqtXrPnj2zZ8+Ojo7meX7kyJEbNmxYtGiRWq0+cuSIt7d3Wlqavf6nAgA4J6v77XwDuemL\nha/+ZdzCKgvZ5ZM0eZbdigOAAUVSsHvnnXeioqLOnz8fERHR8/qWLVtWrVp169at7j1Kejl9\n+nRjYyMhJDEx8ejRo4QQlUoVFRW1ePHiwYMH5+fn8zz/yCOPzJ8/nxCiUChee+21Q4cOZWdn\n6/X6mJiYX/7yl1ghAQDuwNpsR2NTaMIUViyyg51wfj8XEU9Do3tdx0w7AHcg6eSJhx56aMSI\nEdu2bet1vb293c/PLyeg/1VZAAAgAElEQVQnZ8qUKfKUZxJOngAA12Ndv51ey+97XXwHu4BB\niifWEWXvLQsQ7ABcnqQ5dsOHD29paTG+3t7eTimNjY21d1UAAO7Iun2MlWpuzkrRvetIc61w\n9lPjy5hpB+DyJAW73/zmN0ePHj19+nTPi3q9fu3atStWrAgPD5enNgAAdyQ929HgIdx94gdq\ns6Icdj3PfkUBwMBgbo7dxo0bS0q+X1Gfmpo6Y8aMCRMmjB492svLq6Gh4ezZszqdbunSpWbm\n2AEAgA2kT7mjY2fRymusstC4STjzsWJwLPEN7nkRM+0AXJu5OXYzZ840PnDC2IkTJ2bOnGnP\noiTAHDsAcHlSR047Wvm9r5GOVuMWGp3Izftl74sIdgCuy1yP3bFjx8wvrWCMdXV1eXp62rsq\nAACQ3G/n5cfNXCoc3m68gx27fZVVXKVDE390EZ12AK7L3Bw7hUKhNEulUvn6+nYfIAEAAPYl\nMYHR6NGm9q4Tzu0lAt/rIlZRALgqqSdPAABAv5CY7bhJj9CQ3nvXEUJIcw27YnlSDQC4BgQ7\nAABnJynbKZR0xmJCqXGL8O2XpLP3DDx02gG4JAQ7AIABQEq2o6FDaYLYdvHaDiFX5OxHZDsA\n14NgBwAwMEjJdtx9C4nay/g6KzrLaitEriPbAbgWBDsAgAHDcrbz8uPGzxW5zhg7u8d42SwA\nuBhzC1rXrVt3+fJl88/zPP/666+PGzfOrlUBAICNaNJMUpRDmmt6XWf3brAbBTRufO/r2P0E\nwIWYC3bFxcUXL140/MwYq6mpIYQEBAQolcqmpiae5wMDA8PDw3m+90J6AACQieXN7RRKbvLj\nwpEdxi3CuU8VQxOJUt3rOrIdgMswNxS7b9++6urq6urqsrKy+Pj49evX19XVNTU11dXVaTSa\nw4cPDxs27NVXX50wYYLDygUAAIshjMYk06gxIg3tjezSMVlqAgDnIGmO3ZtvvhkZGblu3bqQ\nkBDDFbVaPXfu3G3btq1YsUKj0chZIQAA9GYx23FTnyBUYXxdyD9C2hqMr2MVBYBrkBTsLly4\nkJiYaHw9MTGxpaWlsFDk8GkAAJCVhWwXGE6Tpotc53XChQOiTyDbAbgAScFOpVLl5OQYnxub\nm5tLCMGRYgAA/cJ8tuMmzCeevsbXWdlFVn1d9BFkO4CBTlImy8jIWLlyZUZGxrPPPhsdHa1U\nKhsbG3Nzc7du3RoZGZmUlCR3lQAAIMrcWgoPb27iAuHMx0YNjOXspY//TvSYCgAY0CQFu+ef\nf764uHjTpk2HDh3qeT0mJmb37t3osQMA6Edmsh0dnUYLT7OGO72us/oKVnKeJkw2fgQrZAEG\nNEmZjFK6YcOG1atXnzp1qqKioqurKyAgICkpaerUqUh1AAD9zmS2oxyduogd3GLcIlzYr4hL\nISpP4yZkO4CBy4pYFhYWtmjRIo1Gw/O8n5+ffDUBAIC1TGU7OmQkjU1hNwt6N3S0CvlHuEmP\niL4N2Q5ggJJ6pNjt27eXLl0aGhrq4+Ozfft2QkhBQcGaNWv0er2c5QEAQF9xkx8jCpE/xrNL\nx0lTtamnWFsj1lIADDiSgl19ff2UKVP27t2bnp4eHh5uuFhZWblly5bVq1fLWR4AAEhlso/N\nL5SOnS1yXdALX+8kep2ZdyLeAQwskoLd9u3btVptYWHhZ599FhMTY7i4YMGCzZs379ixo6Wl\nRc4KAQBAKlPZjhv/EPEOML7OGqqEC59bfC2yHcBAISnYXbx4MTMzszvSdcvMzOzq6ioqKpKh\nMAAAsIV4tlN6mJxOd+UkK79k8bXougMYEKTOsRNdLaFSqexaDAAA2IFotqMjJ9EhI8VuZ0L2\nB6S9Wcqbke0AnJykYJeQkLBv3z6drvc8jB07digUihEjRshQGAAA2BflZi0lHj4iLZ1twvF3\nCROkvAVddwDOTFKwW7JkSUlJybRp0z766KPW1tabN2/u2bMnKytr9erVzz33XFAQlsQDADgX\n8QFZn0Bu5hJCRA6cYHdL2XfHpL8f8Q7AOVHjE2BFHThwYOXKlbW1tT88SenTTz+9c+dOb29v\n2cozKSsra9euXaWlpfHx8Y7/OgDAgCCavYQzH7PC0yJ3UwX3yG9pWKxVn8B2dwBOReoGxQsX\nLiwvL8/Ozi4tLdXpdGFhYWlpabGx1v3+BwCAfsdNXiRU3zA+Z4wwXjj2nmLROtHjKEwxZEfE\nOwAnIWko9q233srOzvby8po7d+6LL7740ksvZWZmxsbG1tfXL1iwoKGhQe4qAQDABiZWyCrp\n7OVEIbb6rbVOyP7Ahg9hZBbASUgKdrt3787NzTW+rtFoDh06VFJSYu+qAADAPsRXyAZFcFMe\nF72f3fiWlZy37VvIdgD9zsJQ7KpVqwoKCgoKCm7fvn3w4MGeTYyx0tJSQkhoaKiMBQIAgAzo\nmOm0sojd+s64STjzsWJwLAkIs+G13dkOg7MA/cJCsJs9e3ZLS0t+fn5zczOlvRdSDRkyZO3a\ntVi+AADgzKhvkGhfGjcjk6+9TdqNptPotcKxd7lHXhY9YVYi4y8i6gE4gIXftBkZGRkZGZWV\nlfPnz1+1apVjagIAAEfw8OZmLxW+2GK8gx2rqxByv+AmP2bHr/WMegh5ADKRNMfu6NGjq1at\nKi0tbW1t7b547NgxjUYjW2EAAGA3poIUDY+nKQ+JNrHLx9jl40TalljWwmILAJlIPVLspZde\nGjlyZHFxcfeVFStWJCUlXb16VZ7CAADAnkxlOy51Hh0cJ9LAmHDuU+HARtJ0T6aSEO8A7E5S\nsNu3b9+mTZt+9atfxcTEdF/8+9//rlKpli5dKlttAAAgP07BPbCMqL1EG9m9G/yn61nBV0Tg\nZfo+4h2AHUkKdgcOHHj44Ye3bds2aNCg7ovz589/99138/LyioqKZCsPAADsxuTMNr8Qbvpz\nJh/j9cKF/cK+DayuQqbCCOIdgJ1ICnbV1dXDhg0zvj5y5EhCSFNTk31rAgAAB6Nx42nCFDM3\nsIZK4bO/Cuf3E14vXxmIdwB9JCnYDRs2LCcnR6/v/Zv5008/pZSKZj4AAHBCZpajcmlP0+hE\ncw8znn33lfDZG6y23P6V9fwO4h2ArSTtUfTTn/50586ds2fPXrZs2dChQ9VqdW1t7dGjR99+\n++1HHnkkPDxc7ioBAMBeTG1rR5Qqbu4v2KXjwsWDhNeZepw1VLH9b9KxD3Cp84lSLV+drK0R\nu6IAWEtSsEtNTd29e/fPfvaz559/vuf1hx9++N1335WnMAAAcDjK0XFzFHEpQvYHrMr0cZGM\nZ999xRef48bOoUkziVLs2Fl7QLYDsBZlkvco0mq1J06cuHXrVmdn55AhQ8aNG2eYY9cvsrKy\ndu3aVVpainMvAABsYGmsk7FrZ4VvPiW6Lgsv8gnkxs6hY9L7ckyFRYh3ABJZ8ftQrVY/9JD4\nPpYAADCwmByQ/d92OjpNETVKOPUhu2N264P2JuHcXnLlBDdhHh0xiXAKe1dKCLruACQzF+w2\nbtzY0dHxyiuvbNy4saTEZJ+8Ye9iGWoDAAAZWcp2hPiFcA+/yG7kC6c/Il3t5u5srReyd5G8\nw9z4h+ioKYRK3f1eOmQ7ACnMBbsDBw40NTW98sorBw4cyM7ONnXbM888g2AHAOCqaNx4xeA4\n4fRHrOKyhVvb6oXTH5Irx7nUBXTYWLv33hliKOIdgBnm5thptVpCiFqt1mq1gtD7iOhuarWa\n4+z/hzPzMMcOAMAupG8swspyhbN7SWebpLs5JQ0MI0ERNDiSBIXT4CHEL5RQanuhPSDbAZhi\nrsdOrVb3+gEAAFyM5QHZ7jvj71MMTRIuHWOXj1teVCHoWUMVaahi1/O+v6JQ06BwEjyEBkWQ\n8Dg6OJYQG3MehmUBTDEX7NatW3f5soWOd57nX3/99XHjxtm1KgAAcBzp2Y6ovbiJC0jyLOHK\nSXbpONF1WvEZXsvqKkhdxffjRD6BNP4+bsx04hdsfckAIM5csCsuLr548aLhZ8ZYTU0NISQg\nIECpVDY1NfE8HxgYGB4ezvNynQwNAADOyMOHS32YjJkuFBxhhadtPGSsvYl99xV/6TgdmkhH\nTaVDE61acoFOOwBR5n4X7du3r7q6urq6uqysLD4+fv369XV1dU1NTXV1dRqN5vDhw8OGDXv1\n1VcnTJjgsHIBAEAOtoQkLz9uyiLF4j/TcQ/avokd41n5JeHIDv6DV4Tz+0lLrRWP4tgxACOS\nNij+05/+dPXq1U8++aTX9ZycnPnz59+9e9fb21ue8kzC4gkAALuzPSq1NgjffslKLhDWtzEc\nSumQkXRUGh02TmJYRL8dQE+S+r0vXLiQmChyMnRiYmJLS0thYaG9qwIAgAHFL5ibkal4+v/S\nxBnEL8T29zDG7hQLx97hP/pvVnKeEMtdD+i3A+hJ0p+HVCpVTk4OY4z+eKV6bm4uIUSplPEY\nGQAAcBgrVlGI8h/EpT1F0p4ivJ611JLaCtZ4lzTeZY3VpLVeSkr7gaZZOPkfWnSWTnuaBg8x\nfy/m2wF0k5TJMjIyVq5cmZGR8eyzz0ZHRyuVysbGxtzc3K1bt0ZGRiYlJcldJQAAOEZfs52B\nQkmDIkhQxA+dAV3trKGKNN5lNeXsZoHE5bSsuox9+jpNnsVNnE+UHn2tCsANSAp2zz//fHFx\n8aZNmw4dOtTzekxMzO7du9FjBwDgSuyT7Xrx8KERI0jECDqGkGlPs+t5rOgsu3fD8oOMZ5e+\n5q/ncVMX0dgUk3eh0w6AECJx8YRBTU3NqVOnKioqurq6AgICkpKSpk6d2l+pDosnAABk5Yi5\na801QtFZVnKOdEg6zYJGJnBpT5HAcJM3INuB27Mi2BloNBqe5/38/GQqSCIEOwAAB3BEvOP1\nrPwyK/mG3S4kzOTxld+jCpo4nZu0kCjFj0RCtgM3J3U3yNu3by9dujQ0NNTHx2f79u2EkIKC\ngjVr1uj1Nu1LCQAAA4EjcpJCSePGc3NfUDzz/2jybMKZHQhiPLtygt+7nt0pEm/HIllwb5KC\nXX19/ZQpU/bu3Zuenh4e/n0feGVl5ZYtW1avXi1neQAA0M8c1wfmF8JNeVyxaB0dMtLCnS21\nwpd//+EU2h9DtgN3JinYbd++XavVFhYWfvbZZzExMYaLCxYs2Lx5844dO1paWuSsEAAA+hn1\nDXJcvAsM5xb8H+6hXxAfs19kvHDyP6y+UrwR2Q7claRgd/HixczMzO5I1y0zM7Orq6uoSLw/\nHAAAXIkjp6/RmGTFk6/QpFmEKkzexOuF4+8SvVa0EdkO3JPUOXaiqyVUKpVdiwEAAKfm0K47\ntRc3dRH3+O/o4DiT9zRWC2d2m2pEtgM3JCnYJSQk7Nu3T6fT9bq+Y8cOhUIxYsQIGQoDAAAn\n5ch4R0OiuEde4qZnEk9f0RtYyTes5BtTj7O2RsQ7cCuSgt2SJUtKSkqmTZv20Ucftba23rx5\nc8+ePVlZWatXr37uueeCgrC2HADA7Tgw3lE6aori6f+m4eL7WwlndpOmajPPI9uB+5C6j92B\nAwdWrlxZW1v7w5OUPv300zt37vT29patPJOwjx0AgFNxRHjqaOU/XU80Iiv2aFAE99jvTG1u\n9/092OIO3IDUcyMWLlxYXl6enZ1dWlqq0+nCwsLS0tJiY2NlLQ4AAAYKQ2ySN955+XGzlglf\nbjPex5g13hXO7uGmP2fmaRw7Bu5AUrDbuXOnj4/PM888M3fu3Llz58pdEwAADFDdyUmmhEcj\nE+i4B1nBEeMmVnSWhcfTkfebedxQlZQMiggIA5SkYHfgwAE/P79nnnlG7moAAMA19ApGdsx5\n3MSHherrrLrMuEk487EiLMbMYbLSi+m+R3rC6/la5ELoL5IWT/ziF784fvx4bm6u3NUAAIBL\nMqy06P6rT+/iFNwDy8UXyeq1wtc7ib73Hg59YVhXayoLdrf2ugHLNaC/SOqxq66unjVrVnp6\nelJSUlxcXK/VEmvXrh01apQ85QEAgAvqme1syUC+gdzMJcL/vEVI7/V/rKFKOLeXS3+2jxUa\nkz6Ma3w/gMNICnb//ve/T506xXFcQUFBQUFBr9bly5cj2AEAgG1sm5ZHhybSsbPZpa+Nm9i1\nMyw8no64zz719Xq5lTEUKzbAwSQFu2PHjikUpg91AQAA6DNru/G4SQuFezfYvRvGTcLpjxRh\nMSQgzJ712Qpdd+BIkubYIdUBAIAjSZqKxym42cuJh49Ik75L+Gon6WqXozbb4AwMcAwLwa6q\nqmrJkiUhISEKhSI+Pv61117T6/WOqQwAANyc5XjnG8zNXEIINW5hDZX8Z38hzTVyFWeTnost\nzPzV32XCAGYu2LW1tc2YMeP9998fNGjQjBkzNBrNH/7wh6ysLIcVBwAAYD7e0ZgkmjxLvK2l\nlj+wkdWUy1WZbBDvwGbmgt27775bVlb29ttvFxUVHT9+vKKi4te//vXHH3/87bffOqw+AAAA\nYjbecfc/SgfHiT/W0Soc3MzKL8tYmWzQgQc2MBfsTp06NXbs2BUrVhj+VqlUbtiwQaVSHT9+\n3CG1AQAA/Ih4vOMU3OznxSfbEUL0WuHoP9nVbLlrkw/iHUhnLtjV19cnJCT0vOLl5RUVFdXQ\n0CBzVQAAANbwDeIeXEmUHuKtTBByPhHO7zfe924AQbwDKcwFO0EQ1Gp1r4tqtVoQep++DAAA\n4DCiY7J0yEjukZeJT6Cpp9h3XwlfvW3fcykcD/EOzJO03QkAAIBTEc92IZGKR9fQ4ChTT7Gb\nBcLBLaSzTc7SHAHZDkyRtEExAACAs6G+QSL5xieQy/g/wtF/srulok+xmpv8F5u4pFm9N0kR\n9ESnJYQQtScJG0ZDo0R3UXEeONMCRFHGTE44mDlz5unTp1UqVc+LWq2W4zil8odEePTo0enT\np8tYo5isrKxdu3aVlpbGx8c7+NMAAOAkTHZc8Xrh5H/Y9Tyb30yDo2jqPDpsHKFOHe+Q7aAX\ncz12KSkpUl7h7+9vp2IAAACsIN5pRwhRKLnZy4XAwSzvS9vezBoq2Vf/okERdNyDdMR9hDrp\nzCX020Ev5oLd5s2bHVYHAACADUxmO0K51IeZl7+Q8wlhNq75Y4132cn/kIKj3PiHaPxEy/FO\n4ElHG/H0IQrHzXRCtoOeMMcOAABcFh2TzvkECsfeIXqt7W9pqhZO/Jt8+yWXMpeOuI9wPc5P\nb2tgDXdJwx3WUEUaqlhjNWE88fCmY9K58XOJsvfOEjJBtoNuCHYAADCwme60I4QQGpPMLVgl\nHHmLdLT26TPNtUL2++Tbw9yoKay9iTTcZQ13iLZD5M4uDcs/wpfmcmlP0pixffqoZMh2YOCk\nkwYAAACkM59paFiM4tHVJCDMDl9qrRNyv2CFp1l1mXiq69bWIBz5h3D0n8RRW5NgDxQg6LED\nAAC34BeqeGItu3yCVd8ggv5HTR7eP/ys07LKIsJ4e32W3fqOryziJj5Mk2b+aAxXHui3AwQ7\nAABwBeYHZAkhROlBx8+1vHlJa71w+QQrPN07/9lM3yV8s4+WnKfpz9DBcfZ5p2nIdm4OQ7EA\nAOAi7BNo/EK4qYsUT/83HZ1GOLt1f7CGO8KBjcLpj0iXxl7vNPktjMm6MfTYAQAAGPEL4dIX\nk/FzhYKvWNFZ+/TeMcauneFvFXBjphPfYOLpR3z8qVcA8fK1+ygt+u3cFoIdAAC4DssDslbx\nDeamPU3GPyR89zW7dobwOpF7PLxp8BASHEmDh5CgcFaWx66dJqZPdSIdbULvbZMp8fKhXv7E\ny594B9CgcBqb0velHsh27gnBDgAAXIqdsx0hxCeQm7qIpPxEuHKS3C4klJLAwTQ4kgQPocGR\nxDfwR18Pj2cjJ7PTH7H625I/wEhHG+toI6SKEMIIIRcO0MgEmjSDDk3uy5lmyHZuCMEOAABc\njf2zHSHE25+btJBMWmj562Ex9LE17Gq2cPEg0XXZ9DHG7hSxO0XEN4Qbk05HTyUePja9B9nO\n7WDxBAAAuKB+TjOcgiY/oHjqv2mspFPXTWqrFy7s53f9l3ByF6ursO0dWEvhVtBjBwAArkmW\nfjur+ARyD/6UVVwVcnaT1nrb38PrWck5VnKOhg6lo6fREZOIUmXVC9Bv5z7QYwcAAC7LGdIM\nHZqoePIPNOUhQvu69JXVVQinP+Q//iO7WWD1s22N6LpzB+ixAwAAV9b//XaEEKWam7SQJM9i\nNwtYUzVpbyIdrayjhbQ3E73W6rdpmoWv3ubuy6DjH7L2UZu77nr9GjpDYgZRCHYAAODinCLb\nEUK8/OiY9N5rXPVaomlmHa1E00I0zezWJXan2LA01iwm5B6gHa3clCesXTbb/UshMZyJ/tIZ\nLiLeOSEEOwAAcH3Oku2MKdXEfxD1H2T4O5o4gzTXCFezWfE3RNdp/lF25YTQ0cLNXEIUtvzX\n3GLCs/grhnjnhBDsAADALRjyh5PGu54CwripT5JJC1npRXb1JGuoMnMvu54ndLZxP/kZUXna\n/MFe+czaXyLEO6eCxRMAAOBGBkz+UHrQ0Wncole4hS/RuPFmFl6wO8XCF1tIR2sfP2hYXWFz\n8MXiDCeBHjsAAHAv5rOds6UTGj6chg8nbY3CxUOs5JzoPayugj+wUTH/18QvxMHl9a4E+6r0\nN/TYAQAA/ID6BjljNPEN4mZmcpMeNXlDcw3/+V9ZfaUDaxKHrrv+hWAHAADQm3PGO5ryIDcj\n0+SwrKZF+GIzu1vm2KLEIdv1FwQ7AAAAcc6Y7RKmcD9ZSRQmTp7QdgiHtrIb+Y4tShyyXb9A\nsAMAADDJCbvuaMxYbt4vidpLvFnQC8feYUXis/EcDNnO8RDsAAAALHC2eEeHjOQWvkS8A8Wb\nmSCc+oAVnnJsUeIw5c7BEOwAAAAkEc12hszX8y8HFRM8RPHISyQgzEQ7E8584iTZjqDrzoEQ\n7AAAAKSSEuMcF+/8QhQLX6IhQ000M+HMJ6woxxGVSIBs5xgIdgAAAPbnoHjn5cc9sopGjTbR\nzIRTH6Hfzq0g2AEAAMjFEdlO6cE99AsaN95EMxPOfMKunZG9DGkw5U5uCHYAAAAyckTXnULJ\nzX6ext9nopkJpz9mV7PlrcEayHbyQbADAACQnezZjnLcrCU0fpKJZibk7EG2cwc4KxYAAMAR\nDNlOxkBDOW5mpsB4dj1PrJkJOXs4ytEx6Va/WdvBrl9kxedZYxXx9udGTqGJ001upCeZ4ZfC\nqfaRcQEIdgAAAI7TM8fYP+RxCu6BZQJVsLILYs1MOLObYwJNnCHxfay2ghWdYaW5RK/9/lJz\nrZB7gBQcoQlTuZSfEG//PpbM2hqR7ewIwQ4AAKB/9Ao09sl5lONmZQlEYGUXxZqZkLOHVl+n\nYcNI6FAaGk1UHiJ3tTez0m+E4nOkuVb8K7ouduUEX5RDR0/jxs4hPgF9KRnZzo4Q7AAAAJxC\nd7jpa8KjHDdrqUCIqWzHrud9P1xLKfEfRAcNpSHRJDSahgxh926ya2fZ7ULCeMsf0mvZ5eP8\n1VM0YQr3/7d333FNnI8fwJ9LgCCy95A9RFBEtgIKKuJARUVtrYp7tWirRazb+tWq1TpwVKri\n1jqqBWdFrbhRRJYgKiAyBCHIXknu98f1m29+KKMQVvi8X/xB7p67PHdJLp8899xztl5EQa3J\nVcZpWXFBsAMAAGhfxNAb759sR9Gvn9RXjKZJUR5dlFdHBGwcAY9OustPfkCZObD6eBNlrSav\nCfGu+RDsAAAA2qPmNuBRLJbnVAEhDWQ7caH59KvH/NdRlHEflssYIq/a9DUh3jUDhjsBAABo\n15o+Et4/Y6DUNb5dC6BpOvUZ//wmOjuluWvCUMZNgmAHAADQATQx3jUwvt2/WZOKDtVrYKMu\ng60qE1zeLZbb1CLe/Vs4FQsAANBhUPIq/zroMNfJKqjR8bcIr+pfP6U0hzK1pyxdKU0jQghx\nGk2/fCh4foOUFtS3FM0XRJ6kCt+zXMYQqrmtSDg523gIdgAAAB1JUy6toFgsRx/SZyjNzST5\nGfSHDJKfSXOz67/0ldIyoSz7Uab2RErmf1PZUpSVO9uyH/36iSDmOinKq2cNdPwtQVEea9CM\nzw+q8i8JNxkJrx4IdgAAAB1PU5rupKQoTSOiaUQxD/k8mptN8t/R+RkkP4MuyCYCHiGEyClS\nZk4sy371Xd/KYlMWLmxzZzothn52neZm1lWQzkgQ/LmV5T2fKDT9cora60QDXt0Q7AAAADqk\npmQ7UWwpSsOAaBhQxJUQQgR8UvyBFggoFe3GnjylKMrEjjLpQ79NpJ/8SXOzP1uK5mbzL25m\nec+jNI2bXttPV4sGvM/BxRMAAAAdlTgzDYtNlLUpVd1/3yWOogx7snwDKaPedRapKBWE7aBT\nHjevip/HXGCBaywYCHYAAAAdWHtpr5KSYQ2ZTdkPr7OAgCf4+6jgwTlC0y1UBcQ7gmAHAADQ\n0TV9oDsxo1j2I1gDphBWnR296ITbgpsHm3JxbqN18niHYAcAACAJ2ke2I1R3F9bIRaSLfF0F\n6NQY/tkNdG5qi1aj02Y7BDsAAAAJ0V6ynZYJ2zeQqGjXWaKkQBC2QxB9mdCClqtG52y6Q7AD\nAACQHO0k2xEFdfbo76luPeosQPPp6CuCSztJKbdFK9LZ4h2CHQAAgERpL9lOpgtr2AKqt1c9\nReic1/yzG+hXUS1dl84T7xDsAAAAJE17yXYUi+Xsy3KfRCh2nWVqKgW3jwgiDpCq8pauTmeI\ndwh2AAAAEqi9ZDtCqB6urOELiJxiPWXo1Bj+H5vovLRWqI9kZzsEOwAAAMnUjrKdniXbbzll\naFNfoZICwZ/bBdGXiaC+O9iKhQQ33SHYAQAASKz2k+2IrALLey7L/QvClqmzDM2no6/wT62l\nY66TipKWrpFExjvcKxYAAABaCdXDna1jIbh5mC7IqLNQGVfwJIxEX6GMelE93Ci97oRQLVcl\nJtu1owTcPAh2ACGFwNAAACAASURBVAAAkoySV2lf7VLKWqwx3wtirtHPrtZ3ezEBj06NoVNj\niLIWq4c71aMfkeK0XKUkJt4h2AEAAEi45mc70cQjhpjIYrPsR9DaZoLbR0n5xwYKf8wVPDxH\noi9TFs4sK3eiXPe4x81GlxZ29GyHYAcAACD5mpbtPptymInNj3eUXnf2+OWCyJN02vOGS1dX\n0Al/8xPuUJqGlEFPom9Naei3xCnajt50h2AHAADQKTQ+2zUm1ogn3nG6srxm0ymPBfd+J7yq\nRixA03npdF46eXqJyMpTuuaUQS/KyIbIdGlWNT59mg7bdIdgBwAA0FmIPayIJd5RFs5s3e6C\n+Aj65SNSXdHYxSpL/+mER7EpHVOqmxUxsKZUdZtTE1EdtOkOwQ4AAACaRQzxTl6Z1dePOI6i\nXz+lEyPpgnf/YlmaT2en0NkpJOoiUVBn9fKgrPoTVt33uvg3OlzTHYIdAAAAiIEY4p2UDGXZ\nj7LsR3/IoJPv0SlRhF/z79ZQki94cI4kRrL6jaf0rZpeExEdq+kOAxQDAACA2IglAFEaBiz3\nSewpP7H6+hEFtX+9fFGe4OoewbV9pKSg+ZVhtK8hY+qGFjsAAAAQJ7GNnCfTherlye7pQWck\n0i8i6cxkQv+Lu43RGQn8rBRWHy/KxotISTe/Oh2i6Q7BDgAAAMRMnKMiUxRl2JMy7El41XTW\nSzojnn6b2PDodwx+teDpZZJ0n+U4irJwFkt12nmvOwQ7AAAAED9xDXf3P1IylGEvyrAXcSd0\nYQ55m0BnJdHZrxtuxiv7KPj7KPXqMdVvPKWi0/yKtOemOwQ7AAAAaCktdEMzSkWHqOhQtl6k\nsoR+l0RnJNAZCaSmvpHw6KyX9PlNVE8Plv0wIi3b/Dq0z6Y7BDsAAABoQS17s1pZBcrciTJ3\nIuXFguhLdPKDBu4/GxfBf/mQZTeMshbDkCjtsOkOV8UCAABAy2qN6COnyHKfxBodSGkaNVCy\nqkzw8Bz/7H/o1BixPHO7umAWwQ4AAABaXOs0a1GahqzRS1juXxJO1waKFuUJIg4ILu+iCzKb\n/7x0aWE7iXcIdgAAANAaKHmV1oh3FIvq4cb+Yi3V05NQDeQcOuul4I9NgogDpITb4hVrFQh2\nAAAA0HpaqUcaR47Vz481NojSNmugJE3TqTH8M+sFjy+SmsrWqFtLQrADAACAVtVKTXeEUGrd\nWKO+ZXlOI3JKDRTlV9OxN/i/r6OTHxJS9+UX7R6CHQAAALSB1rqYlKLMHdlfrGU5+TY8ykl5\nsSDyuODyblLauAGQ2x8EOwAAAGgbrTdQiJQMZevFnrCa6uHaiI53yfxz/6GT7rdO1cQLwQ4A\nAADaTKudliWEkK5KLPdJrLHLKD3LBkpWVwjunhREHCCVpa1SM7FBsAMAAIA21ppj/FJqeqwR\nAawRAZSqXv0l6dQY/tn19Nu41qmYWCDYAQAAQNtr1aY7Qig9S9a4H1geU4mcYn3lKkoF1/cL\nIg6QqvLWqlqz4JZiAAAA0F4Is11rjPdLUZSFM9vYVvD8Oh17kwh4dRWkU2P4eRkszymUjnmL\n16p50GIHAAAA7Q7TgNcabXjSHJbjKNaYpQ2cmS0tEFzaKXh4nvBqWrxKzYBgBwAAAO1X68Q7\nSk2PNTaIsh9e3zWzNE3H3+KfXEk/v0F41S1dpabBqVgAAABo70SzXUudpWWxWfYjaH1rwe0j\npCivzmKVpYKoiyQugrLuz7IZ1PDYeK0LLXYAAADQkQjP0rZEYx6lacQe9wNl1Z8Qqr5ylaV0\n9BX+6TV0bES7ar1Dix0AAAB0YOJvzJOSYblNpI16C+4cJ2X1rrCiVPD4Aom9QVn3Z/UaSEjr\nXdVbF7TYAQAAgIQQYxse1c2SPX4F1cO14aJM692pNYKH59t8VBQEOwAAAJAoYjs/K9OF5T6J\nNXgWkZVvuHBVGf3wPJ3zWjxP3VQ4FQsAAACShsl2YjkzS5n0YetZCOJu0Ql/k5rK+krqmFFG\nNs1/xuZAix0AAABIJrE13XG6shxHsidvYDn5EpkudT5d33HiebpmQIsdAAAASCwxNt0RaVnK\n1ott3Z9OjBTE/lWrOx2lbtDmzXUEwQ4AAAAknljjHeez8Y5y8GlghJRWgWAHAAAAnQIlryK2\nwY2ZeNezP50QKYi9QcmrUQZW4llz8yDYAQAAQGchzqY7QogU03rnTsqL20NzHUGwAwAAgM5G\nzPFOWpYotZcbi+GqWAAAAOiMxH47svYAwQ4AAAA6qZa422zbQrADAACATk2S4h2CHQAAAICE\nnJlFsAMAAAAgRCKa7hDsAAAAAP6nQ2e71gh20dHRp0+frjUxKyvr+vXrly5dev369aeLFBQU\nnDp1KjMzsxWqBwAAACCq4zbdtew4duXl5QcOHHjw4EFlZeUXX3whnH737t0dO3bY29tzOJxj\nx46NHz/ez89PdMF9+/ZFRUUZGxt369atRWsIAAAA8FnivFNFa2nZYHfs2DE5Obmvv/5627Zt\nwol8Pj8kJGTmzJnDhw8nhDx//nzdunWenp5qampMgcjIyJycHCUlpRatGwAAAED9xDyUcctr\n2VOxkyZNmjVrlrS0tOjEly9fFhcXe3h4MA9tbW3l5eWjo6OZh8XFxb/99tuCBQsoql3cmgMA\nAAA6uQ50WrZlW+wUFBQ+nfj+/XtFRUU5OTnhFF1d3ezsbOb/kJCQfv36WVtbf7ogl8sVdsgr\nKytjs9ktUGUAAACA2jpK010b3Cu2qqqqVhseh8OpqqoihDx9+jQxMXHPnj2fXTA2NjYwMFD4\nUDQaAgAAALQ0YdNdu014bRDsOBxOdXW16JSqqioOh1NeXr5379758+fXldhMTU0DAgKY/3//\n/ff4+PgWrysAAADAJ9ptwmuDYKerq1tcXFxWVta1a1dCCE3T2dnZXl5eZ86cYbFYHz58uHz5\nMiGkqqoqOjqaoihnZ2dmQQMDA39/f+b/iIiIWukQAAAAoJW1t4TXBsHO3NxcRUXl+vXrY8eO\nJYQ8evSovLzc0dGRz+f37t07NTWVKcbn89+/f5+Tk9P6NQQAAAD4V9rJBRYtG+yOHDlSXFyc\nl5dH03RwcDAhpH///r179543b97PP/+cnJwsIyPz6NGjGTNmKCkpeXt7e3t7C5d98uTJiBEj\nXFxcWrSGAAAAABKjZYOdioqKjIyMurq6lZUVM0VWVpYQ0rdv3z179sTFxfF4PD8/PyMjo0+X\nHTNmDEYnBgAAAGi8lg12o0aNqmuWjo6Ojo5OPcuOGTOmBWoEAAAAILFa416xAAAAANAKEOwA\nAAAAJASCHQAAAICEQLADAAAAkBAIdgAAAAASAsEOAAAAQEIg2AEAAABICAQ7AAAAAAmBYAcA\nAAAgIRDsAAAAACQEgh0AAACAhECwAwAAAJAQCHYAAAAAEgLBDgAAAEBCINgBAAAASAgEOwAA\nAAAJgWAHAAAAICEQ7AAAAAAkBIIdAAAAgIRAsAMAAACQEAh2AAAAABICwQ4AAABAQiDYAQAA\nAEgIBDsAAAAACYFgBwAAACAhEOwAAAAAJIRUW1egWcaMGcPhcNq6FgAAAACtRE9P788//6xz\nNt0xlZaWurm5teJuBPGTl5e3tbXV0dFp64pAp6OtrW1ra6ugoNDWFYFOx8zMzNbWlqKotq4I\ndGAmJib1BCSKpum2riF0Us+ePZszZ46/v39AQEBb1wU6l5CQkJCQkODg4L59+7Z1XaBzmTVr\n1vPnzx8/fsxms9u6LiCZ0McOAAAAQEIg2AEAAABIiI598QR0aMrKyoMHDzYzM2vrikCnY2xs\nPHjwYDU1tbauCHQ6Dg4O6urq6GMHLQd97AAAAAAkBE7FAgAAAEgIBDsAAAAACYE+diB+paWl\n4eHhb968kZaWtrGxGTJkCHNhf3l5OTNdVlbW0dHR3d291oLXrl2LjIxcvXq1rKxsY8oD1JKV\nlXXp0qX3798rKSn179/fzs6OmZ6Tk3PlypWsrCwNDY1BgwZZWFgw03k83uXLl2NjY6WlpZ2d\nnQcOHFh/eYC6xMTEREZGfvz4UUtLa8SIEfr6+sz02NjYe/fucblcAwMDHx8fpmcnTdP37t17\n8uRJSUmJtrb20KFDDQ0N6ykP0HhosQMxq6ysXLp06dOnT52dnS0sLI4fP37w4EFCCE3Ta9eu\nffr0qaOjo7Gx8b59+y5fviy6YHZ29qFDhxISEvh8fmPKA9Ty9u3bb7/9tri42N3dXUlJad26\ndQ8ePCCEcLnc77//vqioyN3dncPhLF++/PXr18wimzZtun37trOzc/fu3Q8dOhQeHl5/eYDP\nioiI+PHHH1VUVNzd3Zn3T15eHiEkOjp6/fr1ysrKrq6umZmZQUFBFRUVhJCzZ88eOHCgd+/e\no0ePlpaWXrJkydu3b+spD9B4aLEDMUtISCguLt66daucnBwhREZG5sSJE3PmzImJiUlNTQ0N\nDWWG+5eTkzt+/PjQoUOZxjyapoODg/v37//XX38x66m/PMCnIiMjLSwsAgMDmYe5ubl37tzp\n169feHi4jo7O4sWLCSGenp6FhYVnzpxZvnx5bGxsYmLioUOHunTpwsySlpYmhNRVvu22DNq7\nmzdv+vn5ffXVV4QQDw8Pf3//x48fjxw58tSpUz4+Psz0AQMGzJ07NyIiYuTIkXfv3h0+fPig\nQYMIIba2tg8fPoyOjjY0NKyrfNtuHXQsaLEDMXNwcDh+/DiT6gghUlJSzJdlQkKCubm58CZO\n9vb2RUVFzI9UQsi1a9cqKipEj1/1lwf41JQpUzZs2CB8KPreE56TJYTY2dnFxcURQp48eWJn\nZxcdHb1hw4atW7e+evVKXl6+nvIAdfnpp5+YNEYIYbFYUlJSMjIyVVVVr169sre3Z6az2Wwb\nG5vY2FhCiL6+fmpqKjMqRWFhYXFxsZGRUT3lARoPwQ5aUElJyfnz50ePHk0Iyc/PF+0soqam\nRlFUfn4+M+vYsWMBAQGirXH1lAdoUEpKSlRUlI+PDyGkoKBA9L2krq5eXl5eUVGRk5OTlJT0\n8OHDIUOGGBkZbd68+fbt2/WUb/2tgI4oLCxMIBC4u7sXFhbSNK2qqiqcpaGhUVBQQAiZP38+\nn8+fPXv20qVLFy5cOHnyZDs7u3rKAzQeTsVCS8nNzV2/fr2Njc2YMWMIIXw+X0rqf+83iqJY\nLBaPxyOE7N2719vb29TUNDMzU1ignvIA9YuJidm6devcuXMtLS0JITweT/Q3A/O+4vF41dXV\nXbp0+f777ymKcnR0LC0tPX/+vKenZ13lW307oOM5f/78n3/+uXbtWjk5OS6XSwgRfS+x2Wzm\njRQVFZWamjphwgRNTc24uLg//vjDzs6OacD7bHmAxkOwgxaRmJi4adOm0aNH+/n5MVO6du1a\nWFgoLFBZWcnn8+Xl5f/++++srKxly5bVWkNd5Vuh8tChhYeH//7770uWLBGeTu3atWt5ebmw\nQFlZGYvFkpOTU1FR4XA4wnsAmJubMxdP1FW+FTcCOp6amprg4ODU1NQtW7Zoa2sTQrp27UoI\nqfVekpeXFwgE+/fvX7BggYeHByHEzs7u3bt3Z8+e9ff3/2z5Vt4Q6OgQ7ED84uLiNm/evGjR\nIicnJ+FEIyOjZ8+eCR+mpaVRFGVkZBQcHCwnJ/fLL78QQpizXdu3bx84cGBd5VtvM6ADOnfu\n3PXr1zdv3qynpyecaGRklJaWJnyYmppqYGDAZrP19PTu3LkjnF5UVKSkpFRP+VbZAuiQ+Hz+\npk2b+Hz+zz//zFyLQwhRUVFRUlJKT083MTFhpqSmppqYmFRWVlZWVqqoqAgXV1ZW5nK5dZVv\n5W2Bjg597EDMSkpKtmzZ8s0334imOkJI3759i4qKrl+/Tgiprq4+efKks7OzoqLi9OnTx4wZ\n4+Li4uLi0rt3b0KIo6Ojnp5eXeXbZKOgQ4iPjz937tyGDRtEUx0hxNPT8/79+6mpqYSQvLy8\nq1evenl5EUIGDRqUk5MTERFBCCktLb169aqzs3M95QHqcubMmcLCwhUrVghTHcPT0/PChQsl\nJSWEkJiYmISEhEGDBsnJyenr69+6dYs591pUVPTs2bMePXrUVb4tNgg6MNwrFsTszJkzJ06c\n0NLSEp24du1aXV3de/fuBQcHM+e5tLW116xZI/qblRCSmZm5YMGCU6dOMacwGiwPIGrVqlXJ\nycmibxIFBYVt27YRQkJDQ8PCwjQ0NPLz893c3BYtWsS0wN24cWP//v0qKipFRUWWlpaBgYHM\nhdh1lQf4FE3Tfn5+srKyzIGLYW9vP3fu3IqKio0bNyYlJamoqBQWFvr7+zPX/qempm7durW6\nulpDQyM9Pb1Pnz7ffvutjIxMXeUBGg/BDsQsNzeXGZlTlLm5OXMziZqamnfv3snLy2tqan66\nbFVVVUpKipWVlfBLtP7yAKJSU1PLyspEp0hJSTENIYSQ8vLy7OxsTU3NWu2+5eXl796969q1\na7du3WpN/2x5gFpomk5ISKg1UUlJycDAgPmfy+Vyudxu3boxh0HhUrm5ucXFxVpaWkwfAKHP\nlgdoJAQ7AAAAAAmBPnYAAAAAEgLBDgAAAEBCINgBAAAASAgEOwAAAAAJgWAHAAAAICEQ7AAA\nAAAkBIIdAHRqERERHh4ehw4d+nTWo0ePPDw8duzY0fq1AgBoGoxjBwCdmkAg6Nu3b1JSUlJS\nkui9yHg8nr29/bt375KSkmrdSQUAoN1Cix0AdGosFuu3336rqKhYuHCh6PSdO3fGxcVt3boV\nqQ4AOhC02AEAkOXLl//000/h4eE+Pj6EkHfv3llZWTk5Od28eZMp8OHDh5CQkMePH/N4PEtL\nyzlz5lhaWgoXT0tL27dvX0JCgpSUlIWFxddff21sbMzMCggIYLFYAQEB69atU1ZWDg4Obv2t\nA4DOA8EOAIBUVlb26tWrpqbmxYsXcnJyY8aMuX79elxcnJmZGSEkLS3N1dW1pqbG39+fw+GE\nh4e/fPkyPDx8yJAhhJCnT5/2799fR0dn7NixhJDTp08XFBRER0czt6n19PQsKyurqakxNzfv\n2bPn6tWr23ZLAUCyIdgBABBCyO3btwcOHBgYGDhgwAAfH5/NmzcvXbqUmTVy5Mh79+49f/7c\n0NCQEFJTU+Po6FhUVJSamkpR1KxZs44ePZqRkaGtrU0ISU1NNTMzmz179v79+wkhgwcPvnv3\n7o8//hgUFNSGWwcAnQSCHQDAP2bMmHHs2DENDQ1tbe2oqCgpKSlCSGlpqbKy8syZM5mgxti5\nc+e3336bkJBgbW1NCOHz+Ww2WzhXW1vbysrq1q1bhJDBgwffvn2by+UqKSm1+gYBQKcj1dYV\nAABoL7Zu3Xrp0qXc3NxLly4xqY4QkpaWxufzr1y54uLiIixZWFhICHn79i0T7O7cuXPhwoWM\njIyysjJCSFFRUXV1tbCwmpoaUh0AtA4EOwCAf6iqqlpZWT19+tTOzk44saamhhBiaWk5aNCg\nWuWZM7OLFi3atWuXm5vbkCFDlJWVKYqKiYkRLSYnJ9fydQcAIATBDgCgfpqamoQQCwuLZcuW\nfTr3/fv3u3fvHjZs2OXLlymKYiauWrWqVasIAPBfGMcOAKA+3bp1MzQ0vHr1qkAgEE6Mjo6+\nceOGQCDIy8sTCASurq7CVHfjxo2PHz+i+zIAtAkEOwCABixbtiwtLW3mzJkZGRnV1dU3b94c\nPXr0ihUrKIoyMTGRk5O7dOkSE+YuXbq0fPnynj17pqenV1ZWtnXFAaDTQbADAGjAvHnzNm/e\nfO7cOUNDQw6HM3jw4N69e4eFhVEUJS8vv3v37tjYWDU1NVlZ2cDAwEOHDk2ePDk7O1tJSSk2\nNrat6w4AnQuGOwEAAACQEGixAwAAAJAQCHYAAAAAEgLBDgAAAEBCINgBAAAASAgEOwAAAAAJ\ngWAHAAAAICEQ7AAAAAAkBIIdAAAAgIRAsAMAAACQEAh2AAAAABICwQ4AAABAQiDYAQAAAEgI\nBDsAAAAACYFgBwAAACAhEOwAAAAAJASCHQAAAICEQLADAAAAkBAIdgAAAAASAsEOAAAAQEIg\n2AEAAABICAQ7AAAAAAmBYAcAAAAgIRDsAAAAACQEgh0AAACAhECwAwAAAJAQCHYAAAAAEgLB\nDgAAAEBCINgBAAAASAgEOwAAAAAJgWAHAAAAICEQ7AAAAAAkhFRbVwDgfz6UVIl3hRoKHPGu\nsCOpKRTn2qRVxLk2IIQQUlBTI94VqklLi3eFHUhlOV+Ma5OVY4txbW2ILhXrcYAQSh6HgvYO\nLXYAAAAAEgLBDgAAAEBCINgBAAAASAgEOwAAAAAJgWAHAAAAICFwVWwHwOfzs7KysrOzWSyW\noaGhlpZWW9eoNi6XGxcXZ2Vlpamp2dZ1AQAA6LzQYteuVVVVrVixQk9Pz9DQsG/fvs7Oztra\n2k5OTrGxsW1dtf8nKirK09Pz1q1bbV2R9uiLL764cOFCW9dCEmzatGnNmjVtXQuoz/v37z08\nPNLS0tq6IgCdF1rs2rX58+eHhoYuWrRo5syZOjo6Hz9+vH37dlBQ0MCBAxMTE7W1tdu6gv+w\ns7O7cOGCo6NjW1ekiQ4fPnzkyJFdu3b16tWr/pJFRUVZWVlWVlaEkD179pw9e1Z07v79+7t3\n715rkUePHrm5uTW5bvfv3z99+vTr169lZWV79Ogxbdo0CwuLJq+tpT169Gjt2rVfffXVlClT\nGlPYxcWFEHL//v0VK1aIzpo/f/7EiRNrlU9OTi4tLW1y3dLS0kJDQ2NjY3k8nqGh4YQJEzw8\nPBqzYGpq6pEjR54/f15VVWVgYDBq1CgfHx/h3KKiomPHjj148ODDhw/y8vL9+/efOXOmoqJi\nk+vZong83qFDh27evFlRUdGnT59FixapqqrWU/7t27fS0tK6urqEEJqmDx48ePv27crKyr59\n+37zzTeysrK1yldWVt65c6esrKxp1ePz+efPn79y5UpOTo6KioqTk5O/v7+amlrT1tai9u3b\n9/vvvwsfysvL9+jRY968eaampqLF6vn8iq6BxWLp6el5enr6+/uz2f9vCL2ioqIvvvhixIgR\n33zzDWn0YacNzZ079+XLl8z/FEWpq6vb29vPnz9fSUlJWKb+F1p0DTIyMkZGRl988cXAgQOZ\nKWVlZb/++uvDhw95PJ6NjU1AQICGhgYhZPbs2a9evRI+RZcuXa5evdoK29sOIdi1XzU1NceP\nH/fy8tqxYwczRV1d3czMTEtL67vvvrt3756fn5+wcGpqan5+vqmp6acHwYyMjMzMTBUVFUtL\nS4qimImFhYWxsbF9+vRRUlJKS0v78OGDkZFRrROpNE2npKQUFBTo6OgYGBgIDzfCZaWkpBIT\nEy0tLaWkpJSVlaX//+CoaWlpOTk5SkpKlpaWtQ5V9UvNL+ML6MaX/yxjNTkpdsMN0h8+fJg5\nc2Z2dnZ0dHRRUVGD5c+cOXPz5s3Tp08TQp4+fUrT9OzZs4VzmeOLGAUEBOzevdvPz2/48OHl\n5eXXrl3btm1baGjopEmTGrU8r4jwi5tbCbYSkWpUTPnhhx9Onz5dXl7emCD76tUrX1/f9+/f\nE0Jev3794sWLX375RTjXxsamyfX9rJMnT06fPt3W1nbcuHEcDufJkydeXl7z5s0LDg6uf8HQ\n0NC5c+c6ODj4+vp27dr1+fPnY8eO9fLy+uOPPzgcTmlpqbu7O4fDmTFjhpaWVmZm5u7du48c\nOfLkyRPpxo0VzKPpd1XNHZebRVGGnEaNxT1jxoyIiIjAwEAFBYXg4ODw8PCoqCgpqTq/CJYv\nX+7u7j5v3jzm/6NHjy5dulROTi44OPjRo0fnzp1rZs1FFRcXDxs2LCYmZtasWU5OTrm5ub/+\n+uu2bduuXbvW4C8uRkUpj8dr7qGjS1e2lHTDh443b968efPmp59+Yh4WFxdfvHjR2tr64cOH\nffr0YSbW//kVXQOfz3/9+nVgYGBERMTJkydFn2jJkiU3btwQRremHXboDxmN2vh6Uer65L/f\nIPWIjo5WVVWdOnUq8zAnJ+fgwYMHDx589uyZgoICacQLLbqGysrKJ0+eDBkyZO/evXPmzCGE\n+Pr6lpSULFu2TEZGZvfu3a6urrGxsV26dImIiPD29hYefBr5AZRICHbtl0Ag4PP5cnJytaaP\nGjVq1KhRwocJCQlTp06NiYlhHo4fP/7AgQNMg0FKSsrUqVMfP37MZrP5fL6BgUFISIi3tzch\nJDY21tPT89ixYwcOHEhLS6NpOjMzc8GCBbt372bWc+fOHdGfTWZmZqGhocxnJiYmZtCgQYcP\nH16xYkVWVlZ4eLiUlNSwYcNOnTr1xRdfEEKeP3/u7+8fFxfHPK+mpuaOHTu+/PLLRm74sj8T\niit5Td5vjKNTHTQbcduJyMhIJyen+fPnq6uri06fP3++q6trUVHR1atXpaWlFyxY4OXlFRIS\nsn79+qqqKg8Pjz/++IPL5drb20+ePLnWOmmaDg4OvnnzpqKi4nfffSc669q1a+fOncvMzDQx\nMVm0aBFzsKZpevv27Tdu3NDU1AwKCtqxY4e3t/e4ceOOHTu2e/fuM2fOjB8/nlk8KCgoKCho\n9erVY8eO/bSx5DM+3iPciIaL1U/Vi6gPb0zBtLS0Z8+eeXp6ik7cv3//mzdvBg0adPDgwZKS\nEqbhISoqaubMmVwu18PDY/Xq1Vwut1u3bp/uSULI5cuXjx8/XlFRUWtuUlLS/v37U1JSmC+A\nIUOGMNMvXbp04MABiqJmzZr19u3bnJyc9evXv379evr06XPnzt2xYweL9c939qRJkyZMmDBr\n1qzevXvXtUWJiYlz5sz5/vvvN27cKPxRNG/ePHd399WrV2/evDkiIiI+Pp7L5aqo/DMc/5gx\nY5YsWZKenm5ubt6Yncbl8ValpzemZD0UpaT2mpk1/Fxc7pUrV06ePMnsLhcXl169er148aJ7\n9+7e3t4/ZOU0rAAAGT5JREFU/fTTxYsXY2NjNTU116xZY2pqumDBgrCwsCdPnjx48GDXrl3b\nt2+/cOHCsGHDCCEeHh4WFhaxsbG9e/cuKirauHFjfHy8mZmZ6MvE5/N/++23O3fufPz40cnJ\n6bvvvlNWViaEFBcXr1q1Kjk5uWfPnosXL/7qq68OHjxoamr63XffJScnx8TECEPMDz/84O3t\nvWnTphMnTjRmP7yKKyrMa25KtnZWVddpxIeLECUlJdHtnTdvnqOj465du0JDQwkhjfn81loD\n8/th8+bN+vr6zJSbN29euXJl6NChwjJ1HXbqJ7iwhZDmRl72jO1ESqYxJS0sLERrOG3aND09\nvT/++MPf358Q0pgXWnQNs2bNkpOT27x585w5c7hcbkRExN27d5kvo549exoaGsbHxzs5OXG5\n3OHDh4t+OXZa6GPXfnE4HE9Pz7CwsMDAwMzMzM+WYb4py8vLHz58WFBQcObMmbCwMOZnTVlZ\n2ZAhQ/Ly8h4+fFhTU5Oenm5paTl69GgmqzG/0QMDA4OCgt6+fZuRkfHtt9/u2bPnwYMHzLK+\nvr5sNjspKYnH4zFnryZMmFBVVUUIkZGRIYRs2rQpKCgoKyur1hd5YWGht7d3ZWXls2fPqqur\ns7Ky+vbtO3ny5KioqBbeYU0xduzYlStXftqgGB8fv2zZssrKyh07dgwZMsTHx+fp06cjRoyw\ntbXt06fP1q1bFRUVuVxudXX1unXrJk+evHbtWqbxiRCydu3a9evXjx8/fuLEicuWLSspKWGm\nHz169Msvv3R0dFy6dKmsrKyzs3NWVhYhZPXq1Rs2bPjyyy9Hjhw5bdq08PDwnJwcQsj+/fuH\nDRsm/FZgbNy4MSUlpVGprtWdPn1amG+E3r17d/To0ZMnT65fv37x4sXr1q3bsWOHpaXluHHj\nFBUVt27d2qdPHy6XKycnt3fvXn9//yVLlkRHRzPL3rx509fXt1evXl9//XV4eHhkZCQzPSkp\nycnJqWvXroGBgc7OzuPGjQsPDyeE3LhxY8yYMfb29nPmzAkODt67d29SUhIh5PDhwwoKCps2\nbRKmOkLI8OHDCwsL60l1hJCQkBBdXd0ff/yREmmosLe3X7Ro0f79+5kfLYSQx48fC+fq6+uf\nOXOmkamulamqqubn5wtDMPNBlpWVZbPZd+7cmTNnTr9+/Xbu3NmlSxd3d/eKioqFCxcqKCj4\n+fkFBQU9fvyYz+cPHjyYWdbc3NzExITpVjtq1Khbt2598803Dg4OixYtEj7d7Nmz9+zZM378\n+EWLFj169MjLy4umaULIiBEj7t69+8033xgaGo4bN+7OnTsVFRXl5eXHjh0LCgoSPasoKysb\nERHRyFTX5lgslpmZmfA40ITPL7PtzMefEFJeXj579uzdu3fLy8sLy9R12GnPNDQ0VFRUmKo2\n7YXu3r07s7iioqKuru7Tp0+Z6fHx8XJycqampnw+v6Sk5O3bt4sXL/b39w8ODq5qdkN4x4Vg\n164dPXq0X79+W7duNTAwsLa2nj9//tmzZ4VBgRBy7ty5jIyM7du3u7i4qKqqjh8/fuXKlTwe\nr6am5sSJE2/fvv3tt99cXFwoijI0NDx69GhNTc2vv/4qXNzb25v5/U0IYdq9nz17RghhGrr3\n7t3LnEW1sbGZO3duTk5OcnKycFkTE5OAgABdXd2uXbuK1vnEiRN5eXm//PJLnz59WCyWrq7u\n/v37KYras2dPi+6rpqHqPrNgamq6ZMkSMzOz+fPnOzg4HD58WE9PT01NTUVFxcHBQUpKisvl\nnjhxoqqqysnJKSIiwtra+t27d4SQvXv3Ll26dPLkyT4+Pnv27OFyucwK16xZ8+OPP86dO3fg\nwIG//PKLlZUVs0/279//ww8/TJ061c/P75dffhEeqePi4vr27VurVmw2WzSddAjFxcV79+7t\n3r27l5fXnDlzmBZlIyMjKSkpBwcHFRUVLpf76NGjp0+fOjs75+bmuri4hIWFEUJ+/fXXIUOG\nLF++3MvL69ChQzzeP+24W7ZsGTJkyIYNGzw9PQMCAgICApjzWUyD9KpVq4YNG3b27FkmNxNC\n4uLievfu/Wnjd4Mna2JiYhwcHD4t5ubmVlRUlJqa2q9fv4ULF/r4+Li7u69du/avv/4qLy9v\n/h5rBTRNL1u2bOjQocIuX2PHjh09enT37t23bdvG5XIvX75saWkpIyPDHHwyMzM1NDREd4W+\nvn5mZmZiYmJkZOTevXuHDx8+derUGTNmMHPT09MPHz588uTJsWPHDh069Ny5c/Hx8Tdu3EhM\nTLx3715ISMjIkSOZXceUT05Orqmp+fQN34FOqKWlpd24ccPd3Z152ITP74kTJxQVFZkuvISQ\nFStW2Nrajh07VrRMXYed9uzPP//My8tj9kwTXuiqqqqzZ88y/XGlpKSuXr164MABGxsbBweH\nBQsWhIeHq6mpcblcmqZ3796tra1tZWW1detWDw8PPl+ctw/uQHAqtl3T1dW9d+/e/fv3w8PD\n79+/Hxoa+uuvvyooKCxdunT58uUsFotpYBPt0rRy5UrmH2YW07FDOFdbWzs+Pl740N7eXvg/\n0zmvoKCAKRYUFFRTU/Pq1av8/Hw+n19cXEwI+fDhg7B8XR3PHz16RAjp37+/cIqWlpapqanw\nN1ZHIdqW06NHD9FuuYzw8HAlJSVmvy1YsKBnz55btmxZv359fn6+cFlzc3OmW0lBQUF6evrB\ngwfPnz/PzEpPT09ISOByuR8+fBB2ynF1de3SpQvzf2VlJbNsR2dmZiZM/z169Ni6dWutAqtW\nrVq2bBlz+mnBggUcDmfFihWjRo169erV8OH/nAVms9m2trbM/0+fPi0pKRG+A/Py8pgm7Zcv\nX44ePZqZqKCgwHwTkGbsyaqqqs8uyHQDZ5oEdu7cGRAQEBYWdvfu3b1795aVlS1cuHDDhg3t\nOX+Xl5f7+/u/e/fur7/+Ek4Uvmnl5eW7detW6w1fU1NTqyuetLR0dXU1U0y4rPCQEh0dTdN0\nQECAsDyLxUpISCgtLaUoSvhSenl5rVq1ihBSWVlJCOlYb/iMjAxhMC0uLn769OngwYO//fZb\nZkpj3nXCNQgEgtTU1JycnEOHDjHtc48ePTp69GhCQkKtRT572Gmwq2gru3z5cvp/Oxi8f/8+\nLi5uzZo1/fr1I41+oYVrqK6ujo+Pl5eXZ1rlCSHBwcFycnKBgYEyMjKHDh1atWpVv379VFRU\n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\naOdjrQAAAABJRU5ErkJggg==",
                  "text/plain": "plot without title"
                },
                "metadata": {
                  "image/png": {
                    "height": 420,
                    "width": 420
                  }
                }
              }
            ],
            "id": "a79c3f1d-a215-4c3c-818d-b6f713f60eac"
          }
        ]
      },
      "base_image": "qcdis/conda-lter-life:v0.2"
    },
    "p18": {
      "title": "Retrieve scenario data-cherine-jantzen-at-gmail-com",
      "task_name": "retrieve-scenario-data-cherine-jantzen-at-gmail-com",
      "original_source": "\ndir.create(\"/tmp/data\")\n\nmaster_branch <- httr::GET(\"https://api.github.com/repos/matt-long/bio-pop-ToE/git/trees/master?recursive=1\")\n\nfile_path <- tibble::tibble(path = purrr::map_chr(httr::content(master_branch)$tree, \"path\")) %>%\n  tidyr::separate_wider_delim(path, delim = '/', names = c('base', 'folder', 'filename'),\n                              too_few = \"align_end\", too_many = \"drop\") %>%\n  dplyr::filter(folder == 'data', stringr::str_detect(filename, '.csv'))\n\nscenario_data_all <- tibble::tibble()\n\nfor (i in seq(1, nrow(file_path))){\n\n  # get path name for each file\n  path <- paste0('https://raw.githubusercontent.com/matt-long/bio-pop-ToE/master/notebooks/data/', file_path$filename[i])\n\n  # read each file as CSV\n  df <- readr::read_csv(httr::content(httr::GET(path)))\n\n  # assign file name to data\n  file_name <- file_path$filename[i]\n\n  # extract scenario name from file name\n  df1 <- df %>%\n    dplyr::mutate(scenario_name = stringr::str_extract(file_name, pattern = \"1pt5degC(?=\\\\.)|1pt5degC_OS|2pt0degC|RCP85|RCP45\"),\n                  member_id = as.character(member_id))\n\n  scenario_data_all <- bind_rows(scenario_data_all, df1)\n\n}\n\nscenario_data_all <- scenario_data_all %>%\n  dplyr::filter(time >= as.POSIXct(\"1985-01-01\", tz = \"UTC\"))\n\nscenario_data_all_file <- \"/tmp/data/scenario_temperatures.csv\"\nwrite.csv(scenario_data_all, file = scenario_data_all_file, row.names = FALSE)",
      "types": {
        "scenario_data_all_file": "str"
      },
      "inputs": [],
      "outputs": [
        "scenario_data_all_file"
      ],
      "params": [],
      "param_values": {},
      "confs": {},
      "all_inputs": [],
      "dependencies": [
        {
          "name": "dplyr",
          "asname": null,
          "module": ""
        },
        {
          "name": "httr",
          "asname": null,
          "module": ""
        },
        {
          "name": "lubridate",
          "asname": null,
          "module": ""
        },
        {
          "name": "purrr",
          "asname": null,
          "module": ""
        },
        {
          "name": "readr",
          "asname": null,
          "module": ""
        },
        {
          "name": "stringr",
          "asname": null,
          "module": ""
        },
        {
          "name": "tidyr",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "7832680": {
            "id": "7832680",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "Retrieve scenario data-cherine-jantzen-at-gmail-com",
              "vars": [
                {
                  "name": "scenario_data_all_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#87a4c5"
                }
              ],
              "params": [],
              "inputs": [],
              "outputs": [
                "scenario_data_all_file"
              ],
              "og_node_id": "7832680",
              "deps": [
                ""
              ]
            },
            "ports": {
              "scenario_data_all_file": {
                "properties": {
                  "color": "#87a4c5"
                },
                "id": "scenario_data_all_file",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "7832680",
      "container_source": "",
      "kernel": "IRkernel",
      "notebook_dict": {
        "metadata": {
          "toc-autonumbering": true,
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "kernelspec": {
            "display_name": "R",
            "language": "R",
            "name": "R"
          },
          "language_info": {
            "codemirror_mode": "r",
            "file_extension": ".r",
            "mimetype": "text/x-r-source",
            "name": "R",
            "pygments_lexer": "r",
            "version": "4.3.2"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# Retrieve scenario data\n# ---\n# NaaVRE:\n#  cell:\n#   dependencies:\n#    - name: dplyr\n#    - name: purrr\n#    - name: stringr\n#    - name: httr\n#    - name: readr\n#    - name: lubridate\n#    - name: tidyr\n#   outputs:\n#    - scenario_data_all_file: String\n# ...\n\ndir.create(\"/tmp/data\")\n\n# get master branch of repository where scenario data is strored in\nmaster_branch <- httr::GET(\"https://api.github.com/repos/matt-long/bio-pop-ToE/git/trees/master?recursive=1\")\n\n# get the file paths of each file that needs to be downloaded\nfile_path <- tibble::tibble(path = purrr::map_chr(httr::content(master_branch)$tree, \"path\")) %>%\n  tidyr::separate_wider_delim(path, delim = '/', names = c('base', 'folder', 'filename'),\n                              too_few = \"align_end\", too_many = \"drop\") %>%\n  dplyr::filter(folder == 'data', stringr::str_detect(filename, '.csv'))\n\n# retrieve data\nscenario_data_all <- tibble::tibble()\n\nfor (i in seq(1, nrow(file_path))){\n\n  # get path name for each file\n  path <- paste0('https://raw.githubusercontent.com/matt-long/bio-pop-ToE/master/notebooks/data/', file_path$filename[i])\n\n  # read each file as CSV\n  df <- readr::read_csv(httr::content(httr::GET(path)))\n\n  # assign file name to data\n  file_name <- file_path$filename[i]\n\n  # extract scenario name from file name\n  df1 <- df %>%\n    dplyr::mutate(scenario_name = stringr::str_extract(file_name, pattern = \"1pt5degC(?=\\\\.)|1pt5degC_OS|2pt0degC|RCP85|RCP45\"),\n                  member_id = as.character(member_id))\n\n  scenario_data_all <- bind_rows(scenario_data_all, df1)\n\n}\n\n# discard data before 1985-01-01 to limit file size\nscenario_data_all <- scenario_data_all %>%\n  dplyr::filter(time >= as.POSIXct(\"1985-01-01\", tz = \"UTC\"))\n\n# save scenario data\nscenario_data_all_file <- \"/tmp/data/scenario_temperatures.csv\"\nwrite.csv(scenario_data_all, file = scenario_data_all_file, row.names = FALSE)\n",
            "metadata": {},
            "execution_count": 5,
            "outputs": [
              {
                "name": "stderr",
                "output_type": "stream",
                "text": "\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m34675\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[31mchr\u001b[39m  (1): member_id\n\u001b[32mdbl\u001b[39m  (1): TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m66065\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\u001b[1mRows: \u001b[22m\u001b[34m27375\u001b[39m \u001b[1mColumns: \u001b[22m\u001b[34m3\u001b[39m\n\u001b[36m──\u001b[39m \u001b[1mColumn specification\u001b[22m \u001b[36m────────────────────────────────────────────────────────\u001b[39m\n\u001b[1mDelimiter:\u001b[22m \",\"\n\u001b[32mdbl\u001b[39m  (2): member_id, TREFHT\n\u001b[34mdttm\u001b[39m (1): time\n\n\u001b[36mℹ\u001b[39m Use `spec()` to retrieve the full column specification for this data.\n\u001b[36mℹ\u001b[39m Specify the column types or set `show_col_types = FALSE` to quiet this message.\n"
              }
            ],
            "id": "d71e480b-10b5-48d4-a150-d1c052b7b83d"
          }
        ]
      },
      "base_image": "qcdis/conda-lter-life:v0.2"
    },
    "p21": {
      "title": "Prepare climwin input-cherine-jantzen-at-gmail-com",
      "task_name": "prepare-climwin-input-cherine-jantzen-at-gmail-com",
      "original_source": "\n\nevent <- read.csv(event_file)\nocc <- read.csv(occurrence_file)\nmof <- read.csv(extendedmeasurementorfact_file)\n\nbud_burst_dates <- read.csv(budburst_file)\n\ntemp <- read.csv(temperature_file) %>%\n  dplyr::rename(\"Longitude\" = \"x\",\n                \"Latitude\" = \"y\")\n\n\n\n\nbudburst <- dplyr::right_join(occ %>%\n                                dplyr::select(\"eventID\", \"organismID\", \"scientificName\"),\n                              event, by = \"eventID\", relationship = \"many-to-many\") %>%\n  dplyr::right_join(bud_burst_dates, by = c(\"year\", \"scientificName\", \"organismID\", \"verbatimLocality\")) %>%\n  # filter for Hoge Veluwe\n  dplyr::filter(verbatimLocality == \"Hoge Veluwe\")\n\nlon_lat_temp <- temp %>%\n  dplyr::distinct(Longitude, Latitude)\n\ntrees <- budburst %>%\n  dplyr::distinct(organismID, .keep_all = TRUE) %>%\n  dplyr::filter(!is.na(decimalLongitude))\n\ntree_coords <- trees %>%\n  dplyr::select(\"decimalLongitude\", \"decimalLatitude\")\n\n\n\ndistance <- as.data.frame(geosphere::distm(tree_coords, lon_lat_temp))\n\ndistance$minPos <- apply(distance, 1, which.min)\n\nlon_lat_temp$Pos <- 1:nrow(lon_lat_temp)\n\nbudburst1 <- dplyr::left_join(distance, lon_lat_temp, by = c(\"minPos\" = \"Pos\")) %>%\n  dplyr::select(\"tempLon\" = \"Longitude\",\n                \"tempLat\" = \"Latitude\") %>%\n  dplyr::bind_cols(trees, .) %>%\n  dplyr::select(\"organismID\", \"tempLon\", \"tempLat\") %>%\n  dplyr::right_join(budburst, by = \"organismID\")\n\n\n\ntemp_locations <- budburst1 %>%\n  dplyr::distinct(tempLon, tempLat) %>%\n  tidyr::drop_na() %>%\n  dplyr::mutate(locID = paste0(\"loc\", 1:dplyr::n()))\n\ntemp <-\n  temp %>%\n  dplyr::left_join(temp_locations, by = c(\"Latitude\" = \"tempLat\",\n                                          \"Longitude\" = \"tempLon\"))\n\n\navg_annual_budburst_dates <-\n  budburst1 %>%\n  dplyr::left_join(temp_locations, by = c(\"tempLat\", \"tempLon\")) %>%\n  dplyr::summarise(avg_bud_burst_DOY = mean(bud_burst_DOY, na.rm = TRUE),\n                   .by = c(\"locID\", \"year\", \"scientificName\")) %>%\n  dplyr::mutate(avg_bud_burst_date = avg_bud_burst_DOY + lubridate::make_date(year, 1, 1) - 1)\n\n\nbudburst_climwin_input_file <- \"/tmp/data/budburst_climwin_input.csv\"\nwrite.csv(avg_annual_budburst_dates, file = budburst_climwin_input_file,\n          row.names = FALSE)\n\ntemp_climwin_input_file <- \"/tmp/data/temp_climwin_input.csv\"\nwrite.csv(temp, file = temp_climwin_input_file,\n          row.names = FALSE)",
      "types": {
        "event_file": "str",
        "occurrence_file": "str",
        "extendedmeasurementorfact_file": "str",
        "budburst_file": "str",
        "temperature_file": "str",
        "budburst_climwin_input_file": "str",
        "temp_climwin_input_file": "str"
      },
      "inputs": [
        "event_file",
        "occurrence_file",
        "extendedmeasurementorfact_file",
        "budburst_file",
        "temperature_file"
      ],
      "outputs": [
        "budburst_climwin_input_file",
        "temp_climwin_input_file"
      ],
      "params": [],
      "param_values": {},
      "confs": {},
      "all_inputs": [
        "event_file",
        "occurrence_file",
        "extendedmeasurementorfact_file",
        "budburst_file",
        "temperature_file"
      ],
      "dependencies": [
        {
          "name": "dplyr",
          "asname": null,
          "module": ""
        },
        {
          "name": "geosphere",
          "asname": null,
          "module": ""
        },
        {
          "name": "lubridate",
          "asname": null,
          "module": ""
        },
        {
          "name": "stringr",
          "asname": null,
          "module": ""
        },
        {
          "name": "tidyr",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "fef8eb9": {
            "id": "fef8eb9",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "Prepare climwin input-cherine-jantzen-at-gmail-com",
              "vars": [
                {
                  "name": "event_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#93651f"
                },
                {
                  "name": "extendedmeasurementorfact_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#bf5740"
                },
                {
                  "name": "occurrence_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#7a862d"
                },
                {
                  "name": "budburst_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#53ac68"
                },
                {
                  "name": "temperature_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#2d3a86"
                },
                {
                  "name": "budburst_climwin_input_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#e08b6c"
                },
                {
                  "name": "temp_climwin_input_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#97ac53"
                }
              ],
              "params": [],
              "inputs": [
                "event_file",
                "extendedmeasurementorfact_file",
                "occurrence_file",
                "budburst_file",
                "temperature_file"
              ],
              "outputs": [
                "budburst_climwin_input_file",
                "temp_climwin_input_file"
              ],
              "og_node_id": "fef8eb9",
              "deps": [
                ""
              ]
            },
            "ports": {
              "event_file": {
                "properties": {
                  "color": "#93651f"
                },
                "id": "event_file",
                "type": "left"
              },
              "extendedmeasurementorfact_file": {
                "properties": {
                  "color": "#bf5740"
                },
                "id": "extendedmeasurementorfact_file",
                "type": "left"
              },
              "occurrence_file": {
                "properties": {
                  "color": "#7a862d"
                },
                "id": "occurrence_file",
                "type": "left"
              },
              "budburst_file": {
                "properties": {
                  "color": "#53ac68"
                },
                "id": "budburst_file",
                "type": "left"
              },
              "temperature_file": {
                "properties": {
                  "color": "#2d3a86"
                },
                "id": "temperature_file",
                "type": "left"
              },
              "budburst_climwin_input_file": {
                "properties": {
                  "color": "#e08b6c"
                },
                "id": "budburst_climwin_input_file",
                "type": "right"
              },
              "temp_climwin_input_file": {
                "properties": {
                  "color": "#97ac53"
                },
                "id": "temp_climwin_input_file",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "fef8eb9",
      "container_source": "",
      "kernel": "IRkernel",
      "notebook_dict": {
        "metadata": {
          "toc-autonumbering": true,
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "kernelspec": {
            "display_name": "R",
            "language": "R",
            "name": "R"
          },
          "language_info": {
            "codemirror_mode": "r",
            "file_extension": ".r",
            "mimetype": "text/x-r-source",
            "name": "R",
            "pygments_lexer": "r",
            "version": "4.3.2"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# Prepare climwin input\n# ---\n# NaaVRE:\n#  cell:\n#   inputs:\n#    - event_file: String\n#    - occurrence_file: String\n#    - extendedmeasurementorfact_file: String\n#    - budburst_file: String\n#    - temperature_file: String\n#   outputs:\n#    - budburst_climwin_input_file: String\n#    - temp_climwin_input_file: String\n#   dependencies:\n#    - name: dplyr\n#    - name: stringr\n#    - name: lubridate\n#    - name: tidyr\n#    - name: geosphere\n# ...\n\n# I. Load packages & retrieve data ----------------------------------------------------------\n\n# Read in DwC-A tables\nevent <- read.csv(event_file)\nocc <- read.csv(occurrence_file)\nmof <- read.csv(extendedmeasurementorfact_file)\n\n#  Read in processed bud burst data\nbud_burst_dates <- read.csv(budburst_file)\n\n# Read in temperature data\ntemp <- read.csv(temperature_file) %>%\n  dplyr::rename(\"Longitude\" = \"x\",\n                \"Latitude\" = \"y\")\n\n\n# II. Prepare data for the climate models -----------------------------------------\n\n## 1. Get relevant information to map trees to temperature grid cells ####\n# The temperature data of the KNMI is gridded and for trees to be modeled with their\n# respective temperatures, they first need to be matched to the temperature from the grid cell closest to them.\n\n# Get organismID & scientific name from occurrence file and connect measurements with events (i.e., trees)\nbudburst <- dplyr::right_join(occ %>%\n                                dplyr::select(\"eventID\", \"organismID\", \"scientificName\"),\n                              event, by = \"eventID\", relationship = \"many-to-many\") %>%\n  dplyr::right_join(bud_burst_dates, by = c(\"year\", \"scientificName\", \"organismID\", \"verbatimLocality\")) %>%\n  # filter for Hoge Veluwe\n  dplyr::filter(verbatimLocality == \"Hoge Veluwe\")\n\n# Get the distinct longitude and latitude for temperature\nlon_lat_temp <- temp %>%\n  dplyr::distinct(Longitude, Latitude)\n\n# Get all individual trees with location information\ntrees <- budburst %>%\n  dplyr::distinct(organismID, .keep_all = TRUE) %>%\n  dplyr::filter(!is.na(decimalLongitude))\n\n# Select coordinates of each individual tree\ntree_coords <- trees %>%\n  dplyr::select(\"decimalLongitude\", \"decimalLatitude\")\n\n\n## 2. Map trees to temperature grid cells ####\n\n# Calculate the geographic distance between each tree & each temperature coordinate pair\ndistance <- as.data.frame(geosphere::distm(tree_coords, lon_lat_temp))\n\n# Find the minimum distance between tree and temperature coordinates\ndistance$minPos <- apply(distance, 1, which.min)\n\n# Assign position name to coordinate pairs to match with positions of minimum value\nlon_lat_temp$Pos <- 1:nrow(lon_lat_temp)\n\n# Assign coordinates of the temperature measures closest to each tree to bud burst data\nbudburst1 <- dplyr::left_join(distance, lon_lat_temp, by = c(\"minPos\" = \"Pos\")) %>%\n  dplyr::select(\"tempLon\" = \"Longitude\",\n                \"tempLat\" = \"Latitude\") %>%\n  dplyr::bind_cols(trees, .) %>%\n  dplyr::select(\"organismID\", \"tempLon\", \"tempLat\") %>%\n  dplyr::right_join(budburst, by = \"organismID\")\n\n\n# III. Create location IDs for each temperature measure point ------------------\n\n# Assign locID to each temperature-coordinate pair\n# Exclude trees without location information\ntemp_locations <- budburst1 %>%\n  dplyr::distinct(tempLon, tempLat) %>%\n  tidyr::drop_na() %>%\n  dplyr::mutate(locID = paste0(\"loc\", 1:dplyr::n()))\n\n# Add locID to each single temperature measure\ntemp <-\n  temp %>%\n  dplyr::left_join(temp_locations, by = c(\"Latitude\" = \"tempLat\",\n                                          \"Longitude\" = \"tempLon\"))\n\n# IV. Annual average bud burst dates  ----------------------------\n\n# Assign locID to bud burst measures and get annual average bud burst date per locID\navg_annual_budburst_dates <-\n  budburst1 %>%\n  dplyr::left_join(temp_locations, by = c(\"tempLat\", \"tempLon\")) %>%\n  dplyr::summarise(avg_bud_burst_DOY = mean(bud_burst_DOY, na.rm = TRUE),\n                   .by = c(\"locID\", \"year\", \"scientificName\")) %>%\n  dplyr::mutate(avg_bud_burst_date = avg_bud_burst_DOY + lubridate::make_date(year, 1, 1) - 1)\n\n# V. Save output files ----------------------------------------------------\n\n# Save bud burst data\nbudburst_climwin_input_file <- \"/tmp/data/budburst_climwin_input.csv\"\nwrite.csv(avg_annual_budburst_dates, file = budburst_climwin_input_file,\n          row.names = FALSE)\n\n# Save temperature data\ntemp_climwin_input_file <- \"/tmp/data/temp_climwin_input.csv\"\nwrite.csv(temp, file = temp_climwin_input_file,\n          row.names = FALSE)",
            "metadata": {},
            "execution_count": 5,
            "outputs": [],
            "id": "fbc36255-aae5-4d8a-bed0-b4ef199e4dc5"
          }
        ]
      },
      "base_image": "qcdis/conda-lter-life:v0.2"
    },
    "p23": {
      "title": "Process bud burst data-cherine-jantzen-at-gmail-com",
      "task_name": "process-bud-burst-data-cherine-jantzen-at-gmail-com",
      "original_source": "\n\n\nevent <- read.csv(event_file)\nocc <- read.csv(occurrence_file)\nmof <- read.csv(extendedmeasurementorfact_file)\n\nd_bb <- dplyr::left_join(event, mof, by = \"eventID\")\n\nd_bb <-\n  occ %>%\n  dplyr::select(\"eventID\", \"organismID\", \"scientificName\") %>%\n  dplyr::right_join(d_bb, by = \"eventID\", relationship = \"many-to-many\")\n\n\n\ncrit_measType <- \"bud burst stage (PO:0025532) of the tree crown\"\n\ncrit_measValue <- 1\n\n\n\nd_bb_crown <-\n  d_bb %>%\n  dplyr::filter(measurementType == crit_measType) %>%\n  ## Convert date to day of year for easier calculations\n  dplyr::mutate(DOY = lubridate::yday(eventDate))\n\nmin_bb <- d_bb_crown %>%\n  dplyr::filter(measurementValue >= crit_measValue) %>%\n  dplyr::summarise(min_DOY_above_criterion = min(DOY),\n                   min_value = measurementValue[DOY == min_DOY_above_criterion],\n                   .by = c(\"year\", \"organismID\"))\n\nd_bb_crown2 <- dplyr::left_join(d_bb_crown,\n                                min_bb,\n                                by = c(\"year\", \"organismID\"))\n\nmax_bb <- d_bb_crown2 %>%\n  dplyr::filter(measurementValue < crit_measValue & DOY < min_DOY_above_criterion,\n                .by = c(\"year\", \"organismID\")) %>%\n  dplyr::summarise(max_DOY_below_criterion = max(DOY),\n                   max_value = measurementValue[DOY == max_DOY_below_criterion],\n                   .by = c(\"year\", \"organismID\"))\n\nmin_max_bb <- dplyr::left_join(min_bb,\n                               max_bb,\n                               by = c(\"year\", \"organismID\"))\n\n\nmatch_criterion <- min_max_bb %>%\n  dplyr::filter(min_value == crit_measValue) %>%\n  dplyr::mutate(bud_burst_date = min_DOY_above_criterion + lubridate::make_date(year, 1, 1) - 1) %>%\n  dplyr::rename(\"bud_burst_DOY\" = \"min_DOY_above_criterion\")\n\ninterpolated <- min_max_bb %>%\n  dplyr::filter(min_value != crit_measValue) %>%\n  dplyr::mutate(diff_date = min_DOY_above_criterion - max_DOY_below_criterion,\n                diff_value = min_value - max_value,\n                value_per_day = diff_value / diff_date,\n                days_to_reach_criterion = (crit_measValue - max_value) / value_per_day,\n                interpolated_DOY = max_DOY_below_criterion + days_to_reach_criterion,\n                interpolated_value  = max_value + days_to_reach_criterion * value_per_day) %>%\n  dplyr::mutate(bud_burst_date = round(interpolated_DOY) + lubridate::make_date(year, 1, 1) - 1) %>%\n  dplyr::rename(\"bud_burst_DOY\" = \"interpolated_DOY\")\n\nbud_burst_dates <- dplyr::bind_rows(match_criterion %>%\n                                      dplyr::select(\"year\", \"organismID\", \"bud_burst_date\", \"bud_burst_DOY\"),\n                                    interpolated %>%\n                                      dplyr::select(\"year\", \"organismID\", \"bud_burst_date\", \"bud_burst_DOY\")) %>%\n  dplyr::left_join(d_bb_crown %>%\n                     dplyr::select(\"year\", \"organismID\", \"verbatimLocality\", \"scientificName\") %>%\n                     dplyr::distinct(),\n                   by = c(\"year\", \"organismID\")) %>%\n  dplyr::arrange(year, organismID)\n\nbudburst_file <- \"/tmp/data/annual_budburst_per_tree.csv\"\nwrite.csv(bud_burst_dates, budburst_file, row.names = FALSE)",
      "types": {
        "event_file": "str",
        "occurrence_file": "str",
        "extendedmeasurementorfact_file": "str",
        "budburst_file": "str"
      },
      "inputs": [
        "event_file",
        "occurrence_file",
        "extendedmeasurementorfact_file"
      ],
      "outputs": [
        "budburst_file"
      ],
      "params": [],
      "param_values": {},
      "confs": {},
      "all_inputs": [
        "event_file",
        "occurrence_file",
        "extendedmeasurementorfact_file"
      ],
      "dependencies": [
        {
          "name": "dplyr",
          "asname": null,
          "module": ""
        },
        {
          "name": "lubridate",
          "asname": null,
          "module": ""
        },
        {
          "name": "stringr",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "552d715": {
            "id": "552d715",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "Process bud burst data-cherine-jantzen-at-gmail-com",
              "vars": [
                {
                  "name": "event_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#93651f"
                },
                {
                  "name": "extendedmeasurementorfact_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#bf5740"
                },
                {
                  "name": "occurrence_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#7a862d"
                },
                {
                  "name": "budburst_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#53ac68"
                }
              ],
              "params": [],
              "inputs": [
                "event_file",
                "extendedmeasurementorfact_file",
                "occurrence_file"
              ],
              "outputs": [
                "budburst_file"
              ],
              "og_node_id": "552d715",
              "deps": [
                ""
              ]
            },
            "ports": {
              "event_file": {
                "properties": {
                  "color": "#93651f"
                },
                "id": "event_file",
                "type": "left"
              },
              "extendedmeasurementorfact_file": {
                "properties": {
                  "color": "#bf5740"
                },
                "id": "extendedmeasurementorfact_file",
                "type": "left"
              },
              "occurrence_file": {
                "properties": {
                  "color": "#7a862d"
                },
                "id": "occurrence_file",
                "type": "left"
              },
              "budburst_file": {
                "properties": {
                  "color": "#53ac68"
                },
                "id": "budburst_file",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "552d715",
      "container_source": "",
      "kernel": "IRkernel",
      "notebook_dict": {
        "metadata": {
          "toc-autonumbering": true,
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "kernelspec": {
            "display_name": "R",
            "language": "R",
            "name": "R"
          },
          "language_info": {
            "codemirror_mode": "r",
            "file_extension": ".r",
            "mimetype": "text/x-r-source",
            "name": "R",
            "pygments_lexer": "r",
            "version": "4.3.2"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# Process bud burst data\n# ---\n# NaaVRE:\n#  cell:\n#   inputs:\n#    - event_file: String\n#    - occurrence_file: String\n#    - extendedmeasurementorfact_file: String\n#   outputs:\n#    - budburst_file: String\n#   dependencies:\n#    - name: dplyr\n#    - name: stringr\n#    - name: lubridate\n# ...\n\n\n# Part I: Preparation  ----------------------------------------------------\n\n# Load DwC-A files\nevent <- read.csv(event_file)\nocc <- read.csv(occurrence_file)\nmof <- read.csv(extendedmeasurementorfact_file)\n\n# Connect measurements with events (i.e., trees)\nd_bb <- dplyr::left_join(event, mof, by = \"eventID\")\n\n# Get organism ID for each event\nd_bb <-\n  occ %>%\n  dplyr::select(\"eventID\", \"organismID\", \"scientificName\") %>%\n  dplyr::right_join(d_bb, by = \"eventID\", relationship = \"many-to-many\")\n\n# Part II: Queries --------------------------------------------------------\n\n# 1. Define bud burst criteria ####\n\n# Set measurement type criterion: TopScore (= bud burst stage (PO:0025532) of the tree crown)\ncrit_measType <- \"bud burst stage (PO:0025532) of the tree crown\"\n\n# First day where measurement value (of the tree crown) > 1 is bud burst date\ncrit_measValue <- 1\n\n\n# 2. Select dates before reaching criterion and when reaching criterion per tree per year ####\n\n# Filter for tree crown, which is used to determine bud burst dates\nd_bb_crown <-\n  d_bb %>%\n  dplyr::filter(measurementType == crit_measType) %>%\n  ## Convert date to day of year for easier calculations\n  dplyr::mutate(DOY = lubridate::yday(eventDate))\n\n# Bud burst date is the first date where the bud burst stage of the tree crown is scored >= 1\n# First, we get the earliest dates (and associated bud burst stage values) per tree per year that matches this criterion\nmin_bb <- d_bb_crown %>%\n  dplyr::filter(measurementValue >= crit_measValue) %>%\n  dplyr::summarise(min_DOY_above_criterion = min(DOY),\n                   min_value = measurementValue[DOY == min_DOY_above_criterion],\n                   .by = c(\"year\", \"organismID\"))\n\n# Join earliest date and value back into main data frame\nd_bb_crown2 <- dplyr::left_join(d_bb_crown,\n                                min_bb,\n                                by = c(\"year\", \"organismID\"))\n\n# Second, we also need the latest date (and associated value) at which the bud burst stage was below the criterion\n# This is used to interpolate a bud burst date in cases where the tree reached stage 1 in-between two field visits\n# In other cases, where stage 1 was observed during a field visit, the date of that visit is used as the bud burst date\nmax_bb <- d_bb_crown2 %>%\n  dplyr::filter(measurementValue < crit_measValue & DOY < min_DOY_above_criterion,\n                .by = c(\"year\", \"organismID\")) %>%\n  dplyr::summarise(max_DOY_below_criterion = max(DOY),\n                   max_value = measurementValue[DOY == max_DOY_below_criterion],\n                   .by = c(\"year\", \"organismID\"))\n\n# Join earliest date at criterion and latest date below criterion, and their recorded bud burst values\nmin_max_bb <- dplyr::left_join(min_bb,\n                               max_bb,\n                               by = c(\"year\", \"organismID\"))\n\n# 3. Calculate bud burst dates per tree per year ####\n\n# For trees for which a stage of 1 was observed during a visit, use the date of that visit as the bud burst date\nmatch_criterion <- min_max_bb %>%\n  dplyr::filter(min_value == crit_measValue) %>%\n  dplyr::mutate(bud_burst_date = min_DOY_above_criterion + lubridate::make_date(year, 1, 1) - 1) %>%\n  dplyr::rename(\"bud_burst_DOY\" = \"min_DOY_above_criterion\")\n\n# For trees for which a stage 1 was NOT observed during a visit, (linearly) interpolate the date\n# from the latest date before criterion and the earliest date after reaching criterion\ninterpolated <- min_max_bb %>%\n  dplyr::filter(min_value != crit_measValue) %>%\n  dplyr::mutate(diff_date = min_DOY_above_criterion - max_DOY_below_criterion,\n                diff_value = min_value - max_value,\n                value_per_day = diff_value / diff_date,\n                days_to_reach_criterion = (crit_measValue - max_value) / value_per_day,\n                interpolated_DOY = max_DOY_below_criterion + days_to_reach_criterion,\n                interpolated_value  = max_value + days_to_reach_criterion * value_per_day) %>%\n  dplyr::mutate(bud_burst_date = round(interpolated_DOY) + lubridate::make_date(year, 1, 1) - 1) %>%\n  dplyr::rename(\"bud_burst_DOY\" = \"interpolated_DOY\")\n\n# Merge determined or calculated bud burst dates and bud burst DOYs per tree per year together\n# and add auxiliary info (i.e., locality, scientific name) back in from main file\nbud_burst_dates <- dplyr::bind_rows(match_criterion %>%\n                                      dplyr::select(\"year\", \"organismID\", \"bud_burst_date\", \"bud_burst_DOY\"),\n                                    interpolated %>%\n                                      dplyr::select(\"year\", \"organismID\", \"bud_burst_date\", \"bud_burst_DOY\")) %>%\n  dplyr::left_join(d_bb_crown %>%\n                     dplyr::select(\"year\", \"organismID\", \"verbatimLocality\", \"scientificName\") %>%\n                     dplyr::distinct(),\n                   by = c(\"year\", \"organismID\")) %>%\n  dplyr::arrange(year, organismID)\n\n# Save dates as csv\nbudburst_file <- \"/tmp/data/annual_budburst_per_tree.csv\"\nwrite.csv(bud_burst_dates, budburst_file, row.names = FALSE)",
            "metadata": {},
            "execution_count": 3,
            "outputs": [],
            "id": "de8826ab-1f0b-40ff-9f53-0548c06e6191"
          }
        ]
      },
      "base_image": "qcdis/conda-lter-life:v0.2"
    },
    "p25": {
      "title": "Validate forecasting model-cherine-jantzen-at-gmail-com",
      "task_name": "validate-forecasting-model-cherine-jantzen-at-gmail-com",
      "original_source": "\ntemp <- read.csv(temp_climwin_input_file)\navg_annual_budburst_dates <- read.csv(budburst_climwin_input_file)\nclimwin_QRobur <- load(firstWindow_file)\nscenario_data_all <- read.csv(scenario_data_all_file)\n\nscenario_data_all <- scenario_data_all %>%\n  dplyr::filter(!(scenario_name %in% c(\"1pt5degC\") & member_id %in% c(\"006\", \"007\", \"009\", \"010\")))\n\n\nset.seed(2804)\n\nscenario_colours <- c(\"measured\" = \"#D53E4F\", \"RCP45\" = \"#B9A6E2\" , \"1pt5degC_OS\" = \"#FFD560\",\n                      \"2pt0degC\" = \"#48d3d3\", \"RCP85\" = \"#FC8D59\", \"1pt5degC\" = \"#3288BD\")\n\n\n\n\nmodel_validation <- function(measured_temperatures,\n                             climwin_output,\n                             biological_data,\n                             use_zScores = c(\"yes\", \"no\"),\n                             number_simulations,\n                             scenario_data,\n                             scenario = c(\"1pt5degC, 1pt5degC_OS, 2pt0degC, RCP85, RCP45\")) {\n\n  ## 1. Measured temperatures: Formatting ####\n\n  ## convert dates and filter for bud burst sensitive period\n  measured_temp <- measured_temperatures %>%\n    dplyr::mutate(date = lubridate::as_date(date),\n                  year = lubridate::year(date),\n                  month = lubridate::month(date),\n                  day = lubridate::day(date),\n                  doy = lubridate::yday(date),\n                  # Create dummy for filtering window later. Format: 312 = March 12, 401 = April 1\n                  dummy = month * 100 + day) %>%\n    ### filter for the calculated window of climwin\n    dplyr::filter(dummy > (lubridate::month(climwin_output$start_date) * 100 + lubridate::day(climwin_output$start_date)) &\n                    dummy < (lubridate::month(climwin_output$end_date) * 100 + lubridate::day(climwin_output$end_date))) %>%\n    ### get mean temperature per day and year over all locations\n    dplyr::summarise(\"mean_temperature\" = mean(temperature),\n                     \"sd_KNMI_temp\" = sd(temperature, na.rm = TRUE),\n                     .by = \"year\") %>%\n    dplyr::mutate(overall_mean = mean(mean_temperature),\n                  overall_sd = sd(mean_temperature),\n                  # annotate data\n                  type = \"measured\",\n                  scenario = NA,\n                  run = NA,\n                  # z-scores as (mean of year x - mean over years)/sd of yearly means\n                  zScore = (mean_temperature - overall_mean) / overall_sd) %>%\n    dplyr::select(!c(\"overall_mean\", \"overall_sd\"))\n\n\n\n  ## 2. Scenario temperatures: Formatting ####\n  df <- scenario_data %>%\n    dplyr::filter(scenario_name == scenario)\n\n  scenario_temp_fut <- NULL\n  scenario_temp_hist <- NULL\n\n  for (a in unique(df$member_id)) {\n\n    ## add year and day of year\n    scenario_temp <- df %>%\n      dplyr::filter(member_id == a) %>%\n      dplyr::mutate(date = lubridate::as_date(time),\n                    year = lubridate::year(date),\n                    dummy = lubridate::month(date) * 100 + lubridate::day(date),\n                    doy = lubridate::yday(date),\n                    # convert mean temperatures from Kelvin to degree Celsius\n                    temp_degreesC = as.numeric(TREFHT) - 273.15) %>%\n      dplyr::filter(dummy > (lubridate::month(climwin_output$start_date) * 100 + lubridate::day(climwin_output$start_date)) &\n                      dummy < (lubridate::month(climwin_output$end_date) * 100 + lubridate::day(climwin_output$end_date))) %>%\n\n      ## summarise and annotate data per run\n      dplyr::mutate(\"mean_temperature\" = mean(temp_degreesC, na.rm = TRUE),\n                    \"sd_temperature\" = sd(temp_degreesC, na.rm = TRUE),\n                    .by = \"year\") %>%\n      dplyr::mutate(type = \"model\",\n                    run = a)\n\n    ## standardize scenario temperatures for historic and future period\n    ### historic period\n    scenario_temp_hist_perRun <- scenario_temp %>%\n      dplyr::filter(year >= min(biological_data$year), year <= max(biological_data$year)) %>%\n      # get mean and standard deviation over all years\n      dplyr::mutate(overall_mean_hist = mean(mean_temperature),\n                    overall_sd_hist = sd(mean_temperature),\n                    # z-scores as (mean of year x - mean over years)/sd of yearly means\n                    zScore = (mean_temperature - overall_mean_hist) / overall_sd_hist)\n\n    overall_mean_hist <- unique(scenario_temp_hist_perRun$overall_mean_hist)\n\n    scenario_temp_hist <- rbind(scenario_temp_hist, scenario_temp_hist_perRun)\n\n    ### future period\n    scenario_temp_fut_perRun <- scenario_temp %>%\n      dplyr::filter(year > max(biological_data$year)) %>%\n      # get mean and standard deviation over all years\n      dplyr::mutate(overall_mean_fut = mean(mean_temperature),\n                    overall_sd_fut = sd(mean_temperature),\n                    # z-scores as (mean of year x - mean over years)/sd of yearly means\n                    zScore = (mean_temperature - overall_mean_hist) / overall_sd_fut)\n\n    scenario_temp_fut <- rbind(scenario_temp_fut, scenario_temp_fut_perRun)\n\n  }\n\n  ## 3. Biological data ####\n\n  ## get annual mean bud burst date\n  avg_budburst <- biological_data  %>%\n    dplyr::mutate(year = as.numeric(year)) %>%\n    dplyr::summarise(avg_budburst_DOY_allLoc = mean(avg_bud_burst_DOY, na.rm = TRUE),\n                     .by = \"year\")\n\n  ## add bud burst to temperature\n  budburst_temp <- measured_temp %>%\n    dplyr::left_join(avg_budburst, by = \"year\")\n\n\n  ## 4. Modelling ####\n\n  # get slope of observed biological data ~ year\n  m1 <- lm(avg_budburst_DOY_allLoc ~ year, data = budburst_temp)\n  slope_bb_year <- m1$coefficients[2]\n\n  ## 4.1 Modelling with mean temperatures ####\n\n  if(!(use_zScores == \"yes\")) {\n\n    ### model observed bud burst with mean measured temperatures\n    model_for_prediction <- lm(avg_budburst_DOY_allLoc ~ mean_temperature, data = budburst_temp)\n\n    ### get model parameters\n    intercept_bb_temp <- as.numeric(model_for_prediction$coefficients[1])\n    slope_bb_temp <- as.numeric(model_for_prediction$coefficients[2])\n    sigma_bb_temp <- sigma(model_for_prediction)\n    model_coefficients_bb_temp <- model_for_prediction$coefficients\n    vcov_bb_temp <- vcov(model_for_prediction)\n\n    # Simulate prediction of biological data based on model_for_prediction for measured temperatures\n    sim_measured_slope_pred_year <- NULL\n\n    for (s in 1:number_simulations) {\n\n      # get data to predict on\n      new_data <- data.frame(mean_temperature = budburst_temp$mean_temperature)\n\n      residual_error <- rnorm(n = nrow(new_data), sd = sigma_bb_temp)\n      predicted_bb_date <- intercept_bb_temp + slope_bb_temp * new_data$mean_temperature + residual_error\n      predicted_budburst <- data.frame(budburst_temp, predicted_bb_date)\n\n      # get slope\n      model_pred_year <- lm(predicted_bb_date ~ year, data = predicted_budburst)\n      slope_pred_year <- as.numeric(model_pred_year$coefficients[2])\n      df_slope_pred_year <- data.frame(scenario = \"measured\", run = NA, sim = paste0(\"sim_\", s), slope = slope_pred_year)\n\n      sim_measured_slope_pred_year <- rbind(sim_measured_slope_pred_year, df_slope_pred_year)\n\n    }\n\n    # Simulate predictions of biological data based on model_for_prediction for scenario temperatures\n    sim_scenario_slope_pred_year <- NULL\n\n    for (s in 1:number_simulations) {\n\n      scenario_slopes_pred_year <- NULL\n\n      for (r in unique(scenario_temp_hist$run)) {\n\n        # filter per run\n        df <- scenario_temp_hist %>%\n          dplyr::filter(run == r)\n\n        # get data to predict on\n        new_data <- data.frame(mean_temperature = df$mean_temperature)\n\n        residual_error <- rnorm(n = nrow(new_data), sd = sigma_bb_temp)\n        predicted_bb_date <- intercept_bb_temp + slope_bb_temp * new_data$mean_temperature + residual_error\n        predicted_budburst <- data.frame(df, predicted_bb_date)\n\n        # get slope\n        model_pred_year <- lm(predicted_bb_date ~ year, data = predicted_budburst)\n        slope_pred_year <- as.numeric(model_pred_year$coefficients[2])\n        df_slope_pred_year <- data.frame(scenario = scenario, run = r, sim = paste0(\"sim_\", 1), slope = slope_pred_year)\n\n        # add data to data frames\n        scenario_slopes_pred_year <- rbind(scenario_slopes_pred_year, df_slope_pred_year)\n      }\n\n      sim_scenario_slope_pred_year <- rbind(sim_scenario_slope_pred_year, scenario_slopes_pred_year)\n    }\n\n    # combine simulated slopes for measured temperatures and scenario temperatures\n    slopes_combined <- rbind(sim_measured_slope_pred_year, sim_scenario_slope_pred_year)\n\n    # visually compare slopes\n    plot_validation <- ggplot2::ggplot(data = slopes_combined) +\n      ggplot2::geom_histogram(mapping = ggplot2::aes(y = ggplot2::after_stat(density),\n                                                     x = slope,\n                                                     fill = scenario),\n                              colour = \"black\",\n                              alpha = 0.7,\n                              position = \"identity\",\n                              binwidth = 0.01) +\n      ggplot2::scale_fill_manual(values = scenario_colours) +\n      ggplot2::geom_vline(xintercept = slope_bb_year,\n                          linewidth = 2) +\n      ggplot2::theme_classic() +\n      ggplot2::labs(x = \"Slope (predicted bud burst ~ year)\", y = \"Density\")\n\n    ### plot observed bud burst dates against mean temperatures\n    plot_obs_temp <-  ggplot2::ggplot() +\n      ggplot2::geom_abline(intercept = intercept_bb_temp,\n                           slope = slope_bb_temp,\n                           linetype = 1,\n                           linewidth = 1,\n                           color = \"black\") +\n      ggplot2::geom_point(data = budburst_temp,\n                          mapping = ggplot2::aes(x = mean_temperature,\n                                                 y = avg_budburst_DOY_allLoc),\n                          color = \"black\", size = 3) +\n      ggplot2::ylab(\"Bud burst date (DOY)\") +\n      ggplot2::xlab(\"mean measured temperature\") +\n      ggplot2::theme_classic()\n\n    # TODO: Add a later stage, match these output names to the ones when 'use_zScores == \"yes\"'\n    return(tibble::lst(budburst_temp,\n                       scenario_temp_hist,\n                       scenario_temp_fut,\n                       model_for_prediction,\n                       plot_validation,\n                       plot_obs_temp))\n\n  }\n\n  if(use_zScores == \"yes\") {\n\n    ## 4.2. Modelling with zScores of temperature ####\n\n    ### model observed bud burst with zScores of measured temperatures\n    model_for_prediction_zScore <- lm(avg_budburst_DOY_allLoc ~ zScore, data = budburst_temp)\n\n    ### get model parameter\n    intercept_bb_temp_zScore <- as.numeric(model_for_prediction_zScore$coefficients[1])\n    slope_bb_temp_zScore <- as.numeric(model_for_prediction_zScore$coefficients[2])\n    sigma_bb_temp_zScore <- stats::sigma(model_for_prediction_zScore)\n    model_coefficients_bb_temp_zScore <- model_for_prediction_zScore$coefficients\n    vcov_bb_temp_zScore <- stats::vcov(model_for_prediction_zScore)\n\n    # Simulate prediction of biological data based on model_for_prediction for measured temperatures\n    sim_measured_slope_pred_year <- NULL\n\n    for (s in 1:number_simulations) {\n\n      # get data to predict on\n      new_data <- data.frame(zScore = budburst_temp$zScore)\n\n      residual_error <- rnorm(n = nrow(new_data), sd = sigma_bb_temp_zScore)\n      predicted_bb_date <- intercept_bb_temp_zScore + slope_bb_temp_zScore * new_data$zScore + residual_error\n      predicted_budburst <- data.frame(budburst_temp, predicted_bb_date)\n\n      # get slope\n      model_pred_year <- lm(predicted_bb_date ~ year, data = predicted_budburst)\n      slope_pred_year <- as.numeric(model_pred_year$coefficients[2])\n      df_slope_pred_year <- data.frame(scenario = \"measured\", run = NA, sim = paste0(\"sim_\", s), slope = slope_pred_year)\n\n\n      sim_measured_slope_pred_year <- rbind(sim_measured_slope_pred_year, df_slope_pred_year)\n\n    }\n\n    # Simulate predictions of biological data based on model_for_prediction for scenario temperatures\n    sim_scenario_slope_pred_year <- NULL\n\n    for (s in 1:number_simulations) {\n\n      scenario_slopes_pred_year <- NULL\n\n      for (r in unique(scenario_temp_hist$run)) {\n\n        # filter per run\n        df <- scenario_temp_hist %>%\n          dplyr::filter(run == r)\n\n        # get data to predict on\n        new_data <- data.frame(zScore = df$zScore)\n\n        residual_error <- rnorm(n = nrow(new_data), sd = sigma_bb_temp_zScore)\n        predicted_bb_date <- intercept_bb_temp_zScore + slope_bb_temp_zScore * new_data$zScore + residual_error\n        predicted_budburst <- data.frame(df, predicted_bb_date)\n\n        # get slope\n        model_pred_year <- lm(predicted_bb_date ~ year, data = predicted_budburst)\n        slope_pred_year <- as.numeric(model_pred_year$coefficients[2])\n        df_slope_pred_year <- data.frame(scenario = scenario, run = r, sim = paste0(\"sim_\", s), slope = slope_pred_year)\n\n        # add data to data frames\n        scenario_slopes_pred_year <- rbind(scenario_slopes_pred_year, df_slope_pred_year)\n\n      }\n\n      sim_scenario_slope_pred_year <- rbind(sim_scenario_slope_pred_year, scenario_slopes_pred_year)\n\n    }\n\n    # combine simulated slopes for measured temperatures and scenario temperatures\n    slopes_combined <- rbind(sim_measured_slope_pred_year, sim_scenario_slope_pred_year)\n\n    # visually compare slopes\n    plot_validation <- ggplot2::ggplot(data = slopes_combined) +\n      ggplot2::geom_histogram(mapping = ggplot2::aes(y = ggplot2::after_stat(density),\n                                                     x = slope,\n                                                     fill = scenario),\n                              colour = \"black\",\n                              alpha = 0.7,\n                              position = \"identity\",\n                              binwidth = 0.01) +\n      ggplot2::scale_fill_manual(values = scenario_colours) +\n      ggplot2::geom_vline(xintercept = slope_bb_year, linewidth = 2) +\n      ggplot2::theme_classic() +\n      ggplot2::labs(x = \"Slope (predicted bud burst ~ year)\", y = \"Density\")\n\n\n    ### plot observed bud burst dates against zScores of temperature\n    plot_zScore <-  ggplot2::ggplot() +\n      ggplot2::geom_abline(intercept = intercept_bb_temp_zScore,\n                           slope = slope_bb_temp_zScore,\n                           linetype = 1,\n                           linewidth = 1,\n                           color = \"black\") +\n      ggplot2::geom_point(data = budburst_temp,\n                          mapping = ggplot2::aes(x = zScore,\n                                                 y = avg_budburst_DOY_allLoc),\n                          color = \"black\",\n                          size = 3) +\n      ggplot2::ylab(\"Bud burst date (DOY)\") +\n      ggplot2::xlab(\"zScore measured temperatures\") +\n      ggplot2::theme_classic()\n\n    return(tibble::lst(budburst_temp,\n                       scenario_temp_hist,\n                       scenario_temp_fut,\n                       model_for_prediction_zScore,\n                       plot_validation,\n                       plot_zScore))\n\n  }\n\n}\n\n\nvalidation_all_zScores <- purrr::map(.x = c(\"1pt5degC\", \"1pt5degC_OS\", \"2pt0degC\", \"RCP85\", \"RCP45\") %>%\n                                       purrr::set_names(),\n                                     .f = ~{\n\n                                       output <- model_validation(measured_temperatures = temp,\n                                                                  climwin_output = first_window_Qrobur,\n                                                                  biological_data = avg_annual_budburst_dates %>%\n                                                                    dplyr::filter(stringr::str_detect(scientificName, \"Quercus robur\")),\n                                                                  scenario = .x,\n                                                                  scenario_data = scenario_data_all,\n                                                                  use_zScores = \"yes\",\n                                                                  number_simulations = 1000)\n\n                                       return(output)\n\n                                     },\n                                     .progress = TRUE)\n\nvalidation_all_zScores_file <- \"/tmp/data/validation_all_zScores.Rda\"\nsave(validation_all_zScores, file = validation_all_zScores_file)\n \nvalidation_plot_all <- ggpubr::ggarrange(plotlist = purrr::map(.x = validation_all_zScores, \"plot_validation\"),\n                                         nrow = 3, ncol = 2)\n\nvalidation_plot_all",
      "types": {
        "budburst_climwin_input_file": "str",
        "temp_climwin_input_file": "str",
        "firstWindow_file": "str",
        "scenario_data_all_file": "str",
        "validation_all_zScores_file": "str"
      },
      "inputs": [
        "budburst_climwin_input_file",
        "temp_climwin_input_file",
        "firstWindow_file",
        "scenario_data_all_file"
      ],
      "outputs": [
        "validation_all_zScores_file"
      ],
      "params": [],
      "param_values": {},
      "confs": {},
      "all_inputs": [
        "budburst_climwin_input_file",
        "temp_climwin_input_file",
        "firstWindow_file",
        "scenario_data_all_file"
      ],
      "dependencies": [
        {
          "name": "dplyr",
          "asname": null,
          "module": ""
        },
        {
          "name": "ggpubr",
          "asname": null,
          "module": ""
        },
        {
          "name": "lubridate",
          "asname": null,
          "module": ""
        },
        {
          "name": "purrr",
          "asname": null,
          "module": ""
        },
        {
          "name": "stringr",
          "asname": null,
          "module": ""
        },
        {
          "name": "tidyr",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "8965d54": {
            "id": "8965d54",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "Validate forecasting model-cherine-jantzen-at-gmail-com",
              "vars": [
                {
                  "name": "scenario_data_all_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#87a4c5"
                },
                {
                  "name": "budburst_climwin_input_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#e08b6c"
                },
                {
                  "name": "firstWindow_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#931f1f"
                },
                {
                  "name": "temp_climwin_input_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#97ac53"
                },
                {
                  "name": "validation_all_zScores_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#d2ac79"
                }
              ],
              "params": [],
              "inputs": [
                "scenario_data_all_file",
                "budburst_climwin_input_file",
                "firstWindow_file",
                "temp_climwin_input_file"
              ],
              "outputs": [
                "validation_all_zScores_file"
              ],
              "og_node_id": "8965d54",
              "deps": [
                ""
              ]
            },
            "ports": {
              "scenario_data_all_file": {
                "properties": {
                  "color": "#87a4c5"
                },
                "id": "scenario_data_all_file",
                "type": "left"
              },
              "budburst_climwin_input_file": {
                "properties": {
                  "color": "#e08b6c"
                },
                "id": "budburst_climwin_input_file",
                "type": "left"
              },
              "firstWindow_file": {
                "properties": {
                  "color": "#931f1f"
                },
                "id": "firstWindow_file",
                "type": "left"
              },
              "temp_climwin_input_file": {
                "properties": {
                  "color": "#97ac53"
                },
                "id": "temp_climwin_input_file",
                "type": "left"
              },
              "validation_all_zScores_file": {
                "properties": {
                  "color": "#d2ac79"
                },
                "id": "validation_all_zScores_file",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "8965d54",
      "container_source": "",
      "kernel": "IRkernel",
      "notebook_dict": {
        "metadata": {
          "toc-autonumbering": true,
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "kernelspec": {
            "display_name": "R",
            "language": "R",
            "name": "R"
          },
          "language_info": {
            "codemirror_mode": "r",
            "file_extension": ".r",
            "mimetype": "text/x-r-source",
            "name": "R",
            "pygments_lexer": "r",
            "version": "4.3.2"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# Validate forecasting model\n# ---\n# NaaVRE:\n#  cell:\n#   inputs:\n#    - budburst_climwin_input_file: String\n#    - temp_climwin_input_file: String\n#    - firstWindow_file: String\n#    - scenario_data_all_file: String\n#   dependencies:\n#    - name: dplyr\n#    - name: purrr\n#    - name: stringr\n#    - name: lubridate\n#    - name: tidyr\n#    - name: ggpubr\n#   outputs:\n#    - validation_all_zScores_file: String\n# ...\n\n# load data\ntemp <- read.csv(temp_climwin_input_file)\navg_annual_budburst_dates <- read.csv(budburst_climwin_input_file)\nclimwin_QRobur <- load(firstWindow_file)\nscenario_data_all <- read.csv(scenario_data_all_file)\n\n# drop run member_id \"009\" and \"010\" from scenario 1pt5degC\nscenario_data_all <- scenario_data_all %>%\n  dplyr::filter(!(scenario_name %in% c(\"1pt5degC\") & member_id %in% c(\"006\", \"007\", \"009\", \"010\")))\n\n\n# set seed\nset.seed(2804)\n\n# set colour palette\nscenario_colours <- c(\"measured\" = \"#D53E4F\", \"RCP45\" = \"#B9A6E2\" , \"1pt5degC_OS\" = \"#FFD560\",\n                      \"2pt0degC\" = \"#48d3d3\", \"RCP85\" = \"#FC8D59\", \"1pt5degC\" = \"#3288BD\")\n\n\n# II. Function 1: Format measured temperature data & model bud burst ------\n\n# Arguments\n# measured_temperatures: data frame/tibble specifying the measured temperatures that were used as an input for the climate window analysis\n# climwin_output: output from the climate window analysis of climwin\n# biological_data: data frame/tibble specifying the biological input data (as used for the climate window analysis)\n# use_zScores: yes or no, specifying whether the zScores of temperatures should be used to model the biological variable or the actual yearly mean temperatures\n# number_simulations: numeric specifying the number of times the prediction of the biological variable is repeated\n# scenario_data: data frame containing the scenario temperature data\n# scenario: character, specifiying for which scenario the function is run, options are: 1pt5degC, 1pt5degC_OS, 2pt0degC, RCP85, RCP45\n\nmodel_validation <- function(measured_temperatures,\n                             climwin_output,\n                             biological_data,\n                             use_zScores = c(\"yes\", \"no\"),\n                             number_simulations,\n                             scenario_data,\n                             scenario = c(\"1pt5degC, 1pt5degC_OS, 2pt0degC, RCP85, RCP45\")) {\n\n  ## 1. Measured temperatures: Formatting ####\n\n  ## convert dates and filter for bud burst sensitive period\n  measured_temp <- measured_temperatures %>%\n    dplyr::mutate(date = lubridate::as_date(date),\n                  year = lubridate::year(date),\n                  month = lubridate::month(date),\n                  day = lubridate::day(date),\n                  doy = lubridate::yday(date),\n                  # Create dummy for filtering window later. Format: 312 = March 12, 401 = April 1\n                  dummy = month * 100 + day) %>%\n    ### filter for the calculated window of climwin\n    dplyr::filter(dummy > (lubridate::month(climwin_output$start_date) * 100 + lubridate::day(climwin_output$start_date)) &\n                    dummy < (lubridate::month(climwin_output$end_date) * 100 + lubridate::day(climwin_output$end_date))) %>%\n    ### get mean temperature per day and year over all locations\n    dplyr::summarise(\"mean_temperature\" = mean(temperature),\n                     \"sd_KNMI_temp\" = sd(temperature, na.rm = TRUE),\n                     .by = \"year\") %>%\n    dplyr::mutate(overall_mean = mean(mean_temperature),\n                  overall_sd = sd(mean_temperature),\n                  # annotate data\n                  type = \"measured\",\n                  scenario = NA,\n                  run = NA,\n                  # z-scores as (mean of year x - mean over years)/sd of yearly means\n                  zScore = (mean_temperature - overall_mean) / overall_sd) %>%\n    dplyr::select(!c(\"overall_mean\", \"overall_sd\"))\n\n\n\n  ## 2. Scenario temperatures: Formatting ####\n  df <- scenario_data %>%\n    dplyr::filter(scenario_name == scenario)\n\n  scenario_temp_fut <- NULL\n  scenario_temp_hist <- NULL\n\n  for (a in unique(df$member_id)) {\n\n    ## add year and day of year\n    scenario_temp <- df %>%\n      dplyr::filter(member_id == a) %>%\n      dplyr::mutate(date = lubridate::as_date(time),\n                    year = lubridate::year(date),\n                    dummy = lubridate::month(date) * 100 + lubridate::day(date),\n                    doy = lubridate::yday(date),\n                    # convert mean temperatures from Kelvin to degree Celsius\n                    temp_degreesC = as.numeric(TREFHT) - 273.15) %>%\n      dplyr::filter(dummy > (lubridate::month(climwin_output$start_date) * 100 + lubridate::day(climwin_output$start_date)) &\n                      dummy < (lubridate::month(climwin_output$end_date) * 100 + lubridate::day(climwin_output$end_date))) %>%\n\n      ## summarise and annotate data per run\n      dplyr::mutate(\"mean_temperature\" = mean(temp_degreesC, na.rm = TRUE),\n                    \"sd_temperature\" = sd(temp_degreesC, na.rm = TRUE),\n                    .by = \"year\") %>%\n      dplyr::mutate(type = \"model\",\n                    run = a)\n\n    ## standardize scenario temperatures for historic and future period\n    ### historic period\n    scenario_temp_hist_perRun <- scenario_temp %>%\n      dplyr::filter(year >= min(biological_data$year), year <= max(biological_data$year)) %>%\n      # get mean and standard deviation over all years\n      dplyr::mutate(overall_mean_hist = mean(mean_temperature),\n                    overall_sd_hist = sd(mean_temperature),\n                    # z-scores as (mean of year x - mean over years)/sd of yearly means\n                    zScore = (mean_temperature - overall_mean_hist) / overall_sd_hist)\n\n    overall_mean_hist <- unique(scenario_temp_hist_perRun$overall_mean_hist)\n\n    scenario_temp_hist <- rbind(scenario_temp_hist, scenario_temp_hist_perRun)\n\n    ### future period\n    scenario_temp_fut_perRun <- scenario_temp %>%\n      dplyr::filter(year > max(biological_data$year)) %>%\n      # get mean and standard deviation over all years\n      dplyr::mutate(overall_mean_fut = mean(mean_temperature),\n                    overall_sd_fut = sd(mean_temperature),\n                    # z-scores as (mean of year x - mean over years)/sd of yearly means\n                    zScore = (mean_temperature - overall_mean_hist) / overall_sd_fut)\n\n    scenario_temp_fut <- rbind(scenario_temp_fut, scenario_temp_fut_perRun)\n\n  }\n\n  ## 3. Biological data ####\n\n  ## get annual mean bud burst date\n  avg_budburst <- biological_data  %>%\n    dplyr::mutate(year = as.numeric(year)) %>%\n    dplyr::summarise(avg_budburst_DOY_allLoc = mean(avg_bud_burst_DOY, na.rm = TRUE),\n                     .by = \"year\")\n\n  ## add bud burst to temperature\n  budburst_temp <- measured_temp %>%\n    dplyr::left_join(avg_budburst, by = \"year\")\n\n\n  ## 4. Modelling ####\n\n  # get slope of observed biological data ~ year\n  m1 <- lm(avg_budburst_DOY_allLoc ~ year, data = budburst_temp)\n  slope_bb_year <- m1$coefficients[2]\n\n  ## 4.1 Modelling with mean temperatures ####\n\n  if(!(use_zScores == \"yes\")) {\n\n    ### model observed bud burst with mean measured temperatures\n    model_for_prediction <- lm(avg_budburst_DOY_allLoc ~ mean_temperature, data = budburst_temp)\n\n    ### get model parameters\n    intercept_bb_temp <- as.numeric(model_for_prediction$coefficients[1])\n    slope_bb_temp <- as.numeric(model_for_prediction$coefficients[2])\n    sigma_bb_temp <- sigma(model_for_prediction)\n    model_coefficients_bb_temp <- model_for_prediction$coefficients\n    vcov_bb_temp <- vcov(model_for_prediction)\n\n    # Simulate prediction of biological data based on model_for_prediction for measured temperatures\n    sim_measured_slope_pred_year <- NULL\n\n    for (s in 1:number_simulations) {\n\n      # get data to predict on\n      new_data <- data.frame(mean_temperature = budburst_temp$mean_temperature)\n\n      residual_error <- rnorm(n = nrow(new_data), sd = sigma_bb_temp)\n      predicted_bb_date <- intercept_bb_temp + slope_bb_temp * new_data$mean_temperature + residual_error\n      predicted_budburst <- data.frame(budburst_temp, predicted_bb_date)\n\n      # get slope\n      model_pred_year <- lm(predicted_bb_date ~ year, data = predicted_budburst)\n      slope_pred_year <- as.numeric(model_pred_year$coefficients[2])\n      df_slope_pred_year <- data.frame(scenario = \"measured\", run = NA, sim = paste0(\"sim_\", s), slope = slope_pred_year)\n\n      sim_measured_slope_pred_year <- rbind(sim_measured_slope_pred_year, df_slope_pred_year)\n\n    }\n\n    # Simulate predictions of biological data based on model_for_prediction for scenario temperatures\n    sim_scenario_slope_pred_year <- NULL\n\n    for (s in 1:number_simulations) {\n\n      scenario_slopes_pred_year <- NULL\n\n      for (r in unique(scenario_temp_hist$run)) {\n\n        # filter per run\n        df <- scenario_temp_hist %>%\n          dplyr::filter(run == r)\n\n        # get data to predict on\n        new_data <- data.frame(mean_temperature = df$mean_temperature)\n\n        residual_error <- rnorm(n = nrow(new_data), sd = sigma_bb_temp)\n        predicted_bb_date <- intercept_bb_temp + slope_bb_temp * new_data$mean_temperature + residual_error\n        predicted_budburst <- data.frame(df, predicted_bb_date)\n\n        # get slope\n        model_pred_year <- lm(predicted_bb_date ~ year, data = predicted_budburst)\n        slope_pred_year <- as.numeric(model_pred_year$coefficients[2])\n        df_slope_pred_year <- data.frame(scenario = scenario, run = r, sim = paste0(\"sim_\", 1), slope = slope_pred_year)\n\n        # add data to data frames\n        scenario_slopes_pred_year <- rbind(scenario_slopes_pred_year, df_slope_pred_year)\n      }\n\n      sim_scenario_slope_pred_year <- rbind(sim_scenario_slope_pred_year, scenario_slopes_pred_year)\n    }\n\n    # combine simulated slopes for measured temperatures and scenario temperatures\n    slopes_combined <- rbind(sim_measured_slope_pred_year, sim_scenario_slope_pred_year)\n\n    # visually compare slopes\n    plot_validation <- ggplot2::ggplot(data = slopes_combined) +\n      ggplot2::geom_histogram(mapping = ggplot2::aes(y = ggplot2::after_stat(density),\n                                                     x = slope,\n                                                     fill = scenario),\n                              colour = \"black\",\n                              alpha = 0.7,\n                              position = \"identity\",\n                              binwidth = 0.01) +\n      ggplot2::scale_fill_manual(values = scenario_colours) +\n      ggplot2::geom_vline(xintercept = slope_bb_year,\n                          linewidth = 2) +\n      ggplot2::theme_classic() +\n      ggplot2::labs(x = \"Slope (predicted bud burst ~ year)\", y = \"Density\")\n\n    ### plot observed bud burst dates against mean temperatures\n    plot_obs_temp <-  ggplot2::ggplot() +\n      ggplot2::geom_abline(intercept = intercept_bb_temp,\n                           slope = slope_bb_temp,\n                           linetype = 1,\n                           linewidth = 1,\n                           color = \"black\") +\n      ggplot2::geom_point(data = budburst_temp,\n                          mapping = ggplot2::aes(x = mean_temperature,\n                                                 y = avg_budburst_DOY_allLoc),\n                          color = \"black\", size = 3) +\n      ggplot2::ylab(\"Bud burst date (DOY)\") +\n      ggplot2::xlab(\"mean measured temperature\") +\n      ggplot2::theme_classic()\n\n    # TODO: Add a later stage, match these output names to the ones when 'use_zScores == \"yes\"'\n    return(tibble::lst(budburst_temp,\n                       scenario_temp_hist,\n                       scenario_temp_fut,\n                       model_for_prediction,\n                       plot_validation,\n                       plot_obs_temp))\n\n  }\n\n  if(use_zScores == \"yes\") {\n\n    ## 4.2. Modelling with zScores of temperature ####\n\n    ### model observed bud burst with zScores of measured temperatures\n    model_for_prediction_zScore <- lm(avg_budburst_DOY_allLoc ~ zScore, data = budburst_temp)\n\n    ### get model parameter\n    intercept_bb_temp_zScore <- as.numeric(model_for_prediction_zScore$coefficients[1])\n    slope_bb_temp_zScore <- as.numeric(model_for_prediction_zScore$coefficients[2])\n    sigma_bb_temp_zScore <- stats::sigma(model_for_prediction_zScore)\n    model_coefficients_bb_temp_zScore <- model_for_prediction_zScore$coefficients\n    vcov_bb_temp_zScore <- stats::vcov(model_for_prediction_zScore)\n\n    # Simulate prediction of biological data based on model_for_prediction for measured temperatures\n    sim_measured_slope_pred_year <- NULL\n\n    for (s in 1:number_simulations) {\n\n      # get data to predict on\n      new_data <- data.frame(zScore = budburst_temp$zScore)\n\n      residual_error <- rnorm(n = nrow(new_data), sd = sigma_bb_temp_zScore)\n      predicted_bb_date <- intercept_bb_temp_zScore + slope_bb_temp_zScore * new_data$zScore + residual_error\n      predicted_budburst <- data.frame(budburst_temp, predicted_bb_date)\n\n      # get slope\n      model_pred_year <- lm(predicted_bb_date ~ year, data = predicted_budburst)\n      slope_pred_year <- as.numeric(model_pred_year$coefficients[2])\n      df_slope_pred_year <- data.frame(scenario = \"measured\", run = NA, sim = paste0(\"sim_\", s), slope = slope_pred_year)\n\n\n      sim_measured_slope_pred_year <- rbind(sim_measured_slope_pred_year, df_slope_pred_year)\n\n    }\n\n    # Simulate predictions of biological data based on model_for_prediction for scenario temperatures\n    sim_scenario_slope_pred_year <- NULL\n\n    for (s in 1:number_simulations) {\n\n      scenario_slopes_pred_year <- NULL\n\n      for (r in unique(scenario_temp_hist$run)) {\n\n        # filter per run\n        df <- scenario_temp_hist %>%\n          dplyr::filter(run == r)\n\n        # get data to predict on\n        new_data <- data.frame(zScore = df$zScore)\n\n        residual_error <- rnorm(n = nrow(new_data), sd = sigma_bb_temp_zScore)\n        predicted_bb_date <- intercept_bb_temp_zScore + slope_bb_temp_zScore * new_data$zScore + residual_error\n        predicted_budburst <- data.frame(df, predicted_bb_date)\n\n        # get slope\n        model_pred_year <- lm(predicted_bb_date ~ year, data = predicted_budburst)\n        slope_pred_year <- as.numeric(model_pred_year$coefficients[2])\n        df_slope_pred_year <- data.frame(scenario = scenario, run = r, sim = paste0(\"sim_\", s), slope = slope_pred_year)\n\n        # add data to data frames\n        scenario_slopes_pred_year <- rbind(scenario_slopes_pred_year, df_slope_pred_year)\n\n      }\n\n      sim_scenario_slope_pred_year <- rbind(sim_scenario_slope_pred_year, scenario_slopes_pred_year)\n\n    }\n\n    # combine simulated slopes for measured temperatures and scenario temperatures\n    slopes_combined <- rbind(sim_measured_slope_pred_year, sim_scenario_slope_pred_year)\n\n    # visually compare slopes\n    plot_validation <- ggplot2::ggplot(data = slopes_combined) +\n      ggplot2::geom_histogram(mapping = ggplot2::aes(y = ggplot2::after_stat(density),\n                                                     x = slope,\n                                                     fill = scenario),\n                              colour = \"black\",\n                              alpha = 0.7,\n                              position = \"identity\",\n                              binwidth = 0.01) +\n      ggplot2::scale_fill_manual(values = scenario_colours) +\n      ggplot2::geom_vline(xintercept = slope_bb_year, linewidth = 2) +\n      ggplot2::theme_classic() +\n      ggplot2::labs(x = \"Slope (predicted bud burst ~ year)\", y = \"Density\")\n\n\n    ### plot observed bud burst dates against zScores of temperature\n    plot_zScore <-  ggplot2::ggplot() +\n      ggplot2::geom_abline(intercept = intercept_bb_temp_zScore,\n                           slope = slope_bb_temp_zScore,\n                           linetype = 1,\n                           linewidth = 1,\n                           color = \"black\") +\n      ggplot2::geom_point(data = budburst_temp,\n                          mapping = ggplot2::aes(x = zScore,\n                                                 y = avg_budburst_DOY_allLoc),\n                          color = \"black\",\n                          size = 3) +\n      ggplot2::ylab(\"Bud burst date (DOY)\") +\n      ggplot2::xlab(\"zScore measured temperatures\") +\n      ggplot2::theme_classic()\n\n    return(tibble::lst(budburst_temp,\n                       scenario_temp_hist,\n                       scenario_temp_fut,\n                       model_for_prediction_zScore,\n                       plot_validation,\n                       plot_zScore))\n\n  }\n\n}\n\n# IV. Run function for all scenarios in one go -----------------------------\n\nvalidation_all_zScores <- purrr::map(.x = c(\"1pt5degC\", \"1pt5degC_OS\", \"2pt0degC\", \"RCP85\", \"RCP45\") %>%\n                                       purrr::set_names(),\n                                     .f = ~{\n\n                                       output <- model_validation(measured_temperatures = temp,\n                                                                  climwin_output = first_window_Qrobur,\n                                                                  biological_data = avg_annual_budburst_dates %>%\n                                                                    dplyr::filter(stringr::str_detect(scientificName, \"Quercus robur\")),\n                                                                  scenario = .x,\n                                                                  scenario_data = scenario_data_all,\n                                                                  use_zScores = \"yes\",\n                                                                  number_simulations = 1000)\n\n                                       return(output)\n\n                                     },\n                                     .progress = TRUE)\n\n# save validation output file \nvalidation_all_zScores_file <- \"/tmp/data/validation_all_zScores.Rda\"\nsave(validation_all_zScores, file = validation_all_zScores_file)\n \nvalidation_plot_all <- ggpubr::ggarrange(plotlist = purrr::map(.x = validation_all_zScores, \"plot_validation\"),\n                                         nrow = 3, ncol = 2)\n\nvalidation_plot_all",
            "metadata": {},
            "execution_count": 6,
            "outputs": [
              {
                "name": "stderr",
                "output_type": "stream",
                "text": " \u001b[32m■■■■■■■                         \u001b[39m  20% |  ETA: 11s\n\n \u001b[32m■■■■■■■■■■■■■                   \u001b[39m  40% |  ETA:  8s\n\n \u001b[32m■■■■■■■■■■■■■■■■■■■             \u001b[39m  60% |  ETA:  5s\n\n \u001b[32m■■■■■■■■■■■■■■■■■■■■■■■■■       \u001b[39m  80% |  ETA:  4s\n\n"
              },
              {
                "output_type": "display_data",
                "data": {
                  "image/png": "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\n1FCLrVu3cjgcCwuLXr162dvbE0LmzJlDVxUVFfXq1YvFYtnZ2VlaWrJYrAULFtBVJSUl/fr1\nI4R06dLF29tbVVXVzs7u9evXdG2fPn26du06ceLEHj16zJgxw83NjcPhHDt2jK7Nyspq3749\nh8Nxd3d3d3fncDjOzs55eXl0ba9evTw9PYcOHWpsbDx48GCRSNStWzdHR0e69sOHD97e3mw2\nu1OnTj169NDQ0DAxMYmOjm6y0yX3mnmue/78edUspKOjU8e3W1tbqygoEkL69esn1TihMYRC\n4ZdffkkIcXZ27tWrl7GxsaKi4p9//knXPn/+3NLSUklJydnZWU9PT11d/fjx43RVbGysjY2N\nsrJyr1693NzcWCzWgAEDSktL6VoWixUcHOzu7j506NBp06aZmZnp6uoyf8Ju3bqlo6OjqanZ\nvXt3R0dHQsjo0aOZeAghs2fPtrCwsLGx+f777+lUy8HBwXSDx48fm5mZqampeXt7d+nShcPh\neHp6MjmtdZJ6YScUCkUiUaXC7sCBA4sWLWJeZmdnDxo0iPnLVEkzT3ZNA4Wd/OHz+erq6iNG\njKC/IyKRaMOGDSoqKvTHOmvWLEVFxZs3b9JVS5YsIYRcuHBBJBLNmTOHw+GcP3+erkpKSjI0\nNOzRowd96evry+FwmB8oj8ezsrLq1KkTfTljxgxCyL179+jLf/75hxDC/DL6+vrq6ekFBQUJ\nBALaIl7YTZw4kcPhMCFlZGSYmZm1b9+eiR8aqZnnOhR2rQGdGW/Lli30JY/HGzJkiL29Pc0J\nLi4utra2aWlpIpGotLS0X79+KioqOTk5QqHQ1dXV1NQ0KSmJvvH8+fMsFov5u8/hcDgcDs1g\nIpEoLi6OxWJ9/fXX9KWTk5OZmVlOTg59+e233xJCLl26xLxXX19/x44d9KV4YScQCOzs7Cws\nLNLT0+nasLAwNps9Y8YMKZ6jZk/qD09Ue0U0JydHX1+feamvr89isXJycpiWCxcurPvIwMBA\n2kHKvfDw8EmTJnX8aOLEib/88ousg2rtioqKSkpKlJWVmd+Rb775prS01M7OjsfjHT582M/P\nr3fv3nTVwoUL165dq62tzefz9+3bFxgYyHRdsLGxmTVr1p07d1JSUmiLUChcunQpXVZQUPDw\n8EhMTGQOcevWLWZWK39/fx0dnejoaCaqDx8+rF27ls2unBnKy8v/+OMP8ZBMTU2nTZv28uVL\n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\n9KmRkdGKFSvatm07c+bMs2fPRkVF3bt37+DBgx8+fBgwYMDgwYMr7bOgoGDdunXPnz+3s7Mb\nM2YM0y4QCHbv3h0eHp6fn+/h4TFv3jwdHR1CSGFh4bJly2JjY11cXObPnx8UFLR37962bdvO\nmzcvNjY2OjqayWvfffedn5/fjz/+eOTIEemfG0Ial+syMjI2bdqUmppqb28vXtjt3Lnz1q1b\nXbp0KS4u3rlz54oVK5qsTgVoEc6cOXP16tVdu3bFxMQwjREREcuWLduyZcuGDRvevn3r4uKy\nZs0aBQUFX1/f9PT0cePGjRo1qk+fPoSQiRMnamlVnirj1atXv/76a1paWq9evQwMDJj2Dx8+\nbNmyJTo6msViBQQETJ48mf6av3r1at26dbm5uf379+/atetPP/107tw5gUDwxRdfWFtbX7x4\nUVtbm+5h3rx5np6eR44cod94q1VRUREYGOji4nL69GkNDQ3mjb6+vqNGjYqIiMjPzz9w4MDp\n06eZe8Tjx4+fPHlyQkJCExV2hBBnZ+e1a9eKtwwaNGjQoEGNPDwANKVVq1axWKzTp0+LN3I4\nnPDw8GnTpn3//feTJk365Zdfevbs+fr166+++ur06dMjRowICgoSCARFRUUpKSnz58/Pzc11\nd3efNm2asrIyIWTw4MGlpaWrVq3KycmZO3cus9upU6dGRUWtWrVKTU3t119/7d+/f2RkJIvF\nGjhwYElJyapVq968eRMYGBgREVFWVlZaWnro0KHvv/9ePKmpqKhcu3ZN4pcGa9bgXPfLL7/4\n+/u/efMmNTWVaUxKSrp48eJvv/1Gb+MeOnRox44d27Ztk3jYAC3X0aNHaWdWcUVFRVevXp0/\nf/6KFSuUlZWDg4NHjx596tSphQsX3rlz59tvv+3atWtCQgKHwwkLC7t06ZJIJPLz8xs+fDgh\nJC8vz9vbe9CgQfPmzYuKitqwYQPdJ5fL7dmzp4ODw6xZsz58+LB06dL4+Piff/45JyfH29s7\nICBg7ty5Fy9e3Ldv37t37wghN27ciI+PP3ToEFPVEUKsrKxSU1NrzksXLlxISUm5fPkyU9UR\nQoyMjH7++Wd/f/+HDx927NhRTU3twYMHTGHHZrP3798vidNZ58IuPz///PnzaWlpXC630qoJ\nEyZYW1tLJBoAkKqq2ZMxfPhwmmI2btx44MCBCxcujBgxQklJydLS0tnZOTs7Wy8A8S4AACAA\nSURBVCQSbd26dfLkycbGxj///PPRo0fv3LkTGxt769atyMjIrl27EkLKy8sfPHhACElOTg4N\nDX369Cm9OtW9e3dDQ8OrV6+2adPmzp07UVFR7u7uhJDCwsKIiAhCSGxsLI/H8/LyqhRVE1d1\npBG5bsWKFZqamrt37xZvjIqKsrW1ZTrn+fj4nDhx4t27d6amppIOHKClqiEvLViwgM4Hs2bN\nGn9///fv39OU4uzsbGlpGRERIRAItm7dOnTo0Ldv344ZM2bWrFkbNmygleKePXuUlJT69+//\n4sWLy5cvE0KOHTuWm5t74sQJBQUFQoiuru6QIUOWLVt27NgxFosVGhqqpKTk5+fXr18/Wtg9\ne/ZMSUmpS5culaKqNS9FR0fr6elVvfbWvXt3utbd3X337t3Tpk07depUQECAt7e3j4+PoaFh\nfU9dtepU2MXHx3fr1u1T84v7+PigsANo6Tp27EgXNDQ0zM3NxZ+TIITo6uq+evXKyspKVVWV\nEDJy5EgHB4fTp0/TuxjMe5kM+OjRI5FINGfOHGYPbDY7JiamuLiYxWJ16tSJNvbv33/ZsmWE\nEFpF1dxnpQk0JtdVG3xmZqaJiQnzknYhysjIYAq7e/fuMaea3qpuVcLCwqKjo+nyvHnz2Oy6\nTobE+Pvvv+lT2FpaWlOnTpVwfCBrTG5xcnISCoVJSUniX4r8/Pzi4uIcHBzoSxcXl4kTJ4aE\nhCQkJLRr105JSYm2d+nShRZ2Dx8+5HK5/fr1o+0VFRVcLvf169dxcXHOzs7M9v3793/y5Akh\nhMvlqqqq0ixXL+Xl5dUmBDU1NSUlpfLyckLI6NGj/f39z5w5Ex4evnjx4qSkpKFDh+7atavx\nzy3UqbD75ZdfDA0NDx061K5dO+aBDoakakwAkCH6FZZSUlIqLS2ttLZdu3bMSxsbGzs7u+fP\nn1tbW3M4HCYh0rKPECIUCgkhS5cuFd+ttbX17du3VVRUmEZmvF8LCwtCSHx8PFPzyYTEc115\neTlzcgghHA6Hw+GIXwu8fv36mTNn6LKenl7Vy4Ty7eTJk7///jtd/uqrrxpQ2O3atYv+zbaw\nsEBhJ3+YXEF/jyrlJS0tLfHedZ999plAIHj58mV+fj6Ti8h/85K5ufnKlSvFd2Jra1tSUiJe\nh4nnpYKCgvfv39f3mSdLS8u3b9+WlZWJh0EISU1NraioYC7h6+npTZw4ceLEiYSQx48fBwYG\n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\nIUNCQ0Ojo6Pv378fEBBA26t+F27cuCEUClesWEFzYhU9JQmFwpycnDLHWqA2QAZjWpDBvnWg\nKiCDgTzVcGFnbW19+fLl2bNnv3z5UrL97t27Fy9edHZ2Njc3l2zv1q2boaHh/v37ma9T79+/\nv3HjxoABA+ifECHk0aNHT58+pdMfP368efOmt7c3h8Pp0qWLubn5zp076ZF2QkhhYWGHDh0C\nAwPLB6aiomJoaPj58+cy7ZWtvPwaqh6uc+fObDb72LFjzHHsLVu2VLiLOnbsaGBgsG/fPiYd\nbN68edy4cfSbt4qKCvNVuKZGZERERNDTTQghaWlpV69e7dSpk7q6ura2tq6uruQnxNGjR5lp\nuQ1U3tq1a5s2bZqbm8u00FM9VFVVyf/uqxoxfvz4wsLCcePGaWtr+/n50caq3wV69IL5fp+d\nnb1u3TryteMBX758EYvFZf4WoDZABkMG++6BykMGA8Wo8csxbt26paenx2Kx3N3dhw0bNnz4\ncBcXF0JIgwYNXrx4IS53s4CQkBAOh+Pi4rJkyZJZs2aZm5tbWVklJiYyPfv27WtpaTl16tQF\nCxY0atRIRUUlLCyMLnvx4kU1NTU7O7tZs2bNmzevcePG2traERERFQbWv39/Y2Nj5gqyr66c\nw+GMGTNGcg1VD0efQtOxY8c5c+Z069bN09PTzs6uwpsFnDhxgs1mN23adMaMGV5eXiwWa+7c\nuXTWwIED2Wz2+PHj6QVH3z1iGTSAfv36NWjQYOrUqYsXL6Ybe/v2bdph7ty5LBZr4cKFISEh\nixcv9vT0tLW1/eGHH+Q8UJl9Hh0dra+vT+/IunTp0hEjRqiqqo4cObLCfVUj6AGY0aNHSzZW\n8S6kpaVxudwGDRoEBQUtWbKkUaNGp06dMjIysrKy2rx5c/ktoujDqSSvlYPaAxkMGQwZDBms\nTqv5J0907do1Li5u8+bNjRs3zszMzM7Obtmy5f79+9++fduyZUtCCIvF8vT0bNKkCe0/ZMiQ\nx48ft2/fPjIy8sOHDzNnznz27JmNjQ2zQhsbm5s3b7LZ7BcvXnTu3PnOnTvMNWh9+/Z99uzZ\nwIEDY2Nj37x5M3To0Ddv3ri7u1cYWO/evTMyMphvt19duaenJ3N0WprhduzYsWvXLiMjo9jY\n2G7dul28eLFbt250DWw2W3KThw0bFhER4enpGRcXZ2FhcebMmc2bN9NZW7ZsGTFiRHJyslgs\n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\nx47lXg2wh+51a73eqhERTdodo33yPt68eZOIdOU/Pbpnk9DhPTsQ0eR1e2wdKVQv9knskpKS\nwsLC+JfPPfccx3FJSUn8YKfRaHRP/vuWebNskURC7B88kVAsJiJiu5o4jp7svWM7nUwGg8lk\nSkhIYJdxiaVSIiooKLh7967JZBIKhRZ/2d3vLP6yNvmXbOeWUCKhJ8dS/+2RTbNIzMs5TsBx\n9GQ3kvlfVlnk5EREGRkZ5lGVFIlSqeQXYVvg378CQbH72dgq/7tHk+M4jktISGCtPX78mIhM\nxPGLswe/mv35Fz/9pBnLv2S+BdjKUklVn2wc9tdopCcPdTXfJv8GbPa28osLBAJOIGDVBBIJ\nEQmdnEipZO+IQCIhtZozW1AoEhmfNMt2ker1es5kqs5XMUPNZauxrrCw8MiRI+YlLhJRanYu\nEbHHYeUq1anZuYqCQiIKkLn2a9OIiCatNZlMJvMFhw4d6uXlxfrijzCwi6j+bU2vJ6J8pSY1\nOzc7v5CIdAYjm6UzGIkoPj6enuzgVxQqU7Nzs/ILiUj/pBr7aqYXqIRCAVukQK1Lzc7NVBQQ\nkc5oTMsu/jZGhWotX01vND1pjSOitJzcQrWzRqsnooJ/q+UTkd7I/VvNxBFRRk6eVqdXaXVE\nVKDWpGbnZuQWEpHB9H9ay1JqhEKh1mAkIrXekFaoVCg1RGQwcWmFSiJiD37IzC1wcXZmV5Cw\nalqdkYiMfDXiiChbpUkrVKrNWmOrY+L+rcY6zc4vTM3OVaq1RKTU6FKfbIT/WuOIiBRqbVqh\nUqM3EFGol9vLTUKIiNtFHPd/3sd0RZ5vtnuBSk1EKq2eb43v1GgyEZGiQJmancuqPecrY5+K\nj0TV5aZ9UEnsc9veJUuWiMXiqVOn8iWDBg2aPn16eHg4e/nJJ5/s2fPvrwqTyaTRaNjPFAvX\nrl1r2bJleXsverNidj6Wp6dnfn6+XC7Pzc2VyWR5eXnsfDUXFxe1Wi2RSPR6Pb8sGxZZYXkD\nsBKLhMXg6uqqUqmcnJx0Oh0/ItvkrsusNdayLaKuwRo1anT7Ni4xA1uy71hXCjas2bBBqEEw\n1jk2++yxE4vFBrOHxHMcZzKZxOL/gqlTp06HDh3Y9PHjx0tqx9PTs2vXrjdv3lSr1aXsb+On\nPT09CwoKvL29dTqdSqVyc3MTCoWFhYUhISHZ2dn+/v4ZGRm1atVycnKqVatWenq6r69vVlaW\nl5eXQqFgyZ+Tk5Ner+c4TiqVarVad3f3/Px8nU4nkUhUKhXfO9+veSRktquPiPgK9CRF45NF\nZ2dnnU4XEhLi5OTk5+eXmZnp7e2dk5PDkjxnZ2eNRiMUCkUiEVsRFxeXwsJCvl+O4/R6vfkW\nZkQikZeXl1qt1mq1crlcKBRmZ2fXrl1bo9F4enrm5OQUFBSwLlioYrFYp9OJRCKj0Wj+13w1\nzVfEZDKJRCJWIhKJWAnHcQaDQSqVajQaJ7Zn0ewdMd8a/BYwX5Fi39aiG5YvZIuUsrh5Ix4e\nHkqlkn0whEJhz549bfDhBjBj27GO7S0jooKCAva5JSL2kGUXFxexWGwymZRKpUgkcnV1tahG\nROyp2RKJhIjYsMa3JpPJ2M9FrVar0+mcnZ0lEolFa0RUWFjo7u7Oqjk5ObHjBhbVFAqFQCBg\nuyS1Wq1SqXRxcXFxceE4jg1Trq6uRa9yIyKZTCaVSjmOKygoEIlEbm5uRKRUKo1Go4eHh0Ag\n0Ol0Wq1WKpU6OTlVrFpubi7rSCAQqFQqNni6ublxHJednc1GSNaaRqPx8vISCoUqlUqj0bi7\nu7PhKysri6+Wm5trMBi8vLxEIpFarWZryjrKysoSCoXe3t5EpFKp1Gq1XC4XiUR6vZ6NhFKp\nlFVzdnZmmzQvL0+v18vlcrFYzFozn2U0GvnWjEYj++fFLh1j/zKIKDs728nJycPDg4jUarVK\npfL09JRIJBbVRCIRxjrHZp/EztfX1/xXaVZWFsdx5leKjRw5cuTIkWxaLpcHPbkthYWwsLCT\nJ09Waqg11Jw5cz7//HOLwvHjx69cudIu8QA8mzDWFaXRaFxcXIqW371719fXt+rjAXAw9jnW\n3rJly/j4eP767XPnznl7e4eGhtolGACASoKxDgCqmH322LVs2bJx48bz5s0bMGCAQqHYunXr\nxIkTy7xIAgCgZsFYBwBVzD6JnUAgmDt37r59+86ePevm5jZ9+nRcgQ8AjgdjHQBUMbs9ecLZ\n2Xno0KH26h0AoGpgrAOAqoQjAgAAAAAOAokdAAAAgIOw26HYctHr9ffv37d3FDUJu12Thfz8\nfGzGinF1dQ0ICLB3FOD4noWxTlvC47CSkpLybfRgRqgwjHUOwD5PniiXAQMG7N+/395RkKur\nq1gsrj7jDrtxZWFhob0DISISCAQeHh4Gg0GlUtk7FiIidj9SnU6nsfrBwaWLiIg4cOCATZoC\nKEkljXUuLi4SiaSwsNBkp+fmicViV1dXrVZbUkpXBew+YEqlUqlUqlKpit46vmqwUVqv15f+\nxBGMdQ6gBuyx2759++jRo+0dBaWkpGg0mrp169o7kH8lJSUJBIJqckMsk8mUmJhYfX7qabXa\nx48fe3p62up+p61bt7ZJOwClqKSxLiMjo7CwMDQ01PyJF1VJrVanpqbK5XL27AS7SE5O5jjO\n/Lm9VUyhUCgUioCAAP4xHlXMYDAkJye7ubnVqlWrlGoY6xxADdhjV01ER0dfvnz57Nmz7KlZ\ndtenTx8XFxf+KZP2VVhY+MILL3Tu3Pm7776zdyxERDdv3oyKiho2bNj06dPtHQuAnc2ZM+fQ\noUN79+4t6bEWle3cuXMTJ058++23J0yYYJcAiCgyMlKv1//555/2CmDt2rXff//9N99806VL\nF7sEkJGR0a9fvxdffHHx4sV2CQCqDC6eAAAAAHAQSOwAAAAAHAQOxVrrwoULubm5vXr1EggE\n9o6FiCgmJkYkEtlrr74Fg8Fw/PhxHx+f559/3t6xEBHl5+efO3cuJCSkUaNG9o4FwM6uX7+e\nlpbWpUsXFxcXuwSQk5MTFxdXp06devXq2SUAIvrnn39MJlP37t3tFcD9+/fv37/funVrW534\nW15arfbkyZP+/v4tW7a0SwBQZZDYAQAAADgIHIoFAAAAcBBI7AAAAAAcRA24j11VSkxMXL9+\n/d27d11cXNq1axcdHe3k5GReobCw8M033zQvadeu3f/+9z9rlq2AU6dObd++PSUlxdfXNyIi\nIjIysmidY8eO/f7776mpqTKZrEePHiNHjhQKhWfOnPniiy/Mq40dO3bQoEEVC8OaVSupTmVs\nFmvajI+P//nnn+/duyeRSFq2bBkdHe3l5VXK2wfgMKz5gpw/f37r1q1JSUmurq4tW7YcM2aM\nj4+PrQLgOG7Lli0nTpzIyckJDQ0dNWpUq1atLOoYDIbNmzfHxMTk5ubWqlVryJAhPXv2tFUA\nZN3gyXHcrl27Nm3a9Prrrw8bNqwqu7amToVZOepeuHBhxYoVISEhn3zyiQ17B/vj4Am1Wj16\n9Og1a9akpqYmJCS8//77q1atsqiTmpoaGRmZkJCQ+UR+fr6Vy5ZXQkLCwIEDDx06lJmZee7c\nuddffz0mJsaizvnz5wcOHHjgwIGMjIzz588PGzZs586dHMcdPnz47bffzjSjVqsrFoY1q1ZS\nncrYLNa0mZ2dPWzYsFWrVrE6kydPnj9/Plfy2wfgMKz5gty7d2/gwIG7du3KyMhISEiYOnXq\nnDlzbBjD7t27o6KiLl++nJGR8fvvvw8ePDg9Pd2izo8//hgVFXXx4sWMjIxdu3a98sord+7c\nsVUA1gyeWq12xowZCxcuHDdu3JYtW6qya2vqVJiVo+66desmTJgwd+7cjz/+2FZdQzWBQ7H/\niY2NNRgM0dHRAQEB9evXHzVq1JEjRyyeSVVQUEBEISEhvk94eHhYuWx5HTx4sF27dn369PH1\n9W3fvn3fvn3/+OMPizrZ2dlDhgyJiIjw8/Nr165deHj49evXWZwymczXjLOzc8XCsGbVSqpT\nGZvFmjbT09Off/75d999l9V55ZVX+M1Cxb19AA7Dyi/du+++O3DgQD8/v/r16/fp0+fu3bs2\njGH//v2DBw9u1aqVn5/foEGDQkJCDh8+bFFHr9dHR0e3adPGz89v4MCB/v7+7EtqE9YMnlqt\n9oUXXpg7d65tLxa2pmtr6lSYlR8AHx+f5cuXh4SE2KpfqD5wKPY/CQkJ9evX5x8s0aRJE51O\n9+DBgyZNmvB1CgoKhELhxo0b4+LiiOj5558fOXKkq6urNctWIJ4ePXrwL5s0abJ//36TySQU\n/peO9+3b13yR7OxsdnP5wsJCnU735ZdfxsfHe3p69uzZMzIysmI3arFm1UqqU0mbpcw2mzRp\nYv4yJyeHPUWnpLevwsEAVDfWfEHq1q3LPx0xPT396NGj4eHhtgqgsLAwLS2tcePGfEmTJk3u\n3LljUe2dd97hp3U6XUFBQemPuioXawZPDw+PiIgIW/VYrq6tqfM0AVgz6g4cOPDp+4LqCXvs\n/pOXl+fp6cm/9PDwEAqFubm55nX0er1MJvP09Jw1a1Z0dHRcXBx7PIs1y1YgHvP9SZ6ennq9\nXqVSlVT/4MGD9+7de+2114jIZDLp9fr27dvPnz8/IiLi119/3blzZ4XDKHPVSqpTSZulXG3e\nvXuXfwRnSW8fgMOw/gty7dq1QYMGvfPOO2FhYe+9954NA2D98iUymYwVFovjuO+++y40NLRz\n5842jKFcg6cNWdN1pYZXGaMu1CzP9B67NWvWsEcHikSiYvMejuMs9nJ17NixY8eObDosLMzJ\nyWnOnDlpaWnWLFum999//9GjR0TUqlWrBQsWEFHRFoptk+O4zZs3Hz58eOHChX5+fkQ0ZsyY\nMWPGsLkhISFZWVkHDhwYMmRIueIpiTWrVlKdCmyWp4nn7Nmz33zzzfjx49u3b08lv30BAQG2\nDQmgylRgHGMaNmz47bffpqSkbNq0acmSJbNmzapYALm5ufxoM2LECLbzz6LHkr6hKpXqq6++\nKiwsnDt37tPsr6rw4FkZrOm6KsOrjFEXqrNnOrF7/fXX2a549qGXy+VsaGAKCgo4jpPL5aW0\nEBoaSkSZmZkVWLao2bNn6/V6ImLnfHh5eZn/zM3Ly3Nycip63NBgMCxZsiQzM3Pp0qUl3dM8\nNDQ0Ozu7Yrv6rVm1kurYZLNUIB7m999/371795w5c5o1a1ZsU/zbh8QOaq4Kj2NSqTQkJCQk\nJMTHx+fDDz9MSkoKCwurQAAeHh7ffPMNm5bL5WKxmIjy8vL4r1Vubm6xAWRlZc2bN69Bgwaz\nZs16yovlKzZ4VgZruq7U8Cpj1IWa5ZlO7Ly9vb29vfmXDRs2PHbsmMFgYAPTjRs3nJ2d69Sp\nY77ImTNnkpOT+Qvjk5OTiSgwMNCaZcvETo/jNWjQ4ObNm/zLGzduNGrUyOKHF8dxixYtMhqN\nX3zxhVQq5ct37NgREBDQtWtXPs5atWpV7AexNatWUp2MjIyn3ywViIeIdu/effDgwSVLlpif\nuFPS2/c08QDYVwXGsa1btyYkJHz88cfspUQioafYYyQSiSwywtq1a9+8eZN/oN/NmzeLHmbN\ny8ubPXt2z549hw8fXrF+zVVg8Kwk1nRdqeHZ5J8R1Gg4x+4/nTp1kkqlK1euTEtLu3379vr1\n6yMiIli2tGHDhosXLxKRu7v75s2b9+3bl526hAGeAAAgAElEQVSdffv27TVr1nTu3NnX17eU\nZSusX79+ly5d2rdvX1ZWVkxMzKFDh9jprrm5uatWrWLHf//888+EhIRx48YVFBRkZWVlZWUp\nFAoi0uv1q1evvnDhgkKhOHXq1N69e1955ZXK2ywl1amMzWJNPElJSRs3bpwwYYJIJMp6wmg0\nlvT2PU08ANWKNV+QFi1anD9/fseOHRkZGQ8ePFi7dm1ISEhwcLCtYhgwYMCOHTvi4uIyMzN/\n+eWX9PT0Pn36ENGNGzfWrFnD6vzwww9BQUG9e/fmv6HsonWbsGbw1Gq1rF+DwaBWq7OysnJy\ncqqm65Lq2IQ1HwCTycTWXaPR6PV6foS0VQxgX3hW7P/x8OHDtWvXxsfHu7u7d+7cecyYMeza\noqioqP79+7M9PadOndq2bVtKSopMJuvQoUNUVBS7k0hJyz6Ns2fPbtmy5fHjx/7+/q+++mrv\n3r2J6NGjRxMnTly0aFHTpk1nzZpl/suPiDw8PDZt2mQymbZt23bkyBGFQlGrVq1+/fr169ev\nwr8IrdksJdWpjM1SZjybNm3aunWrxVLfffddWFhYSW8fgMOw5gt77ty5zZs3Jycnu7q6NmnS\n5O2337bhCQkcx23fvv3o0aM5OTl16tQZO3Ysu0j24MGD33///e7du00mU9FUJjw8vMLn+RVV\n5uB55MgR/ggy4+rqumXLlirouqQ6tlLmByAjIyM6OtpiqeXLl/PXSkONhsQOAAAAwEHgUCwA\nAACAg0BiBwAAAOAgkNgBAAAAOAgkdgAAAAAOAokdAAAAgINAYgcAAADgIJDYAQAAADiISkns\nfvrppxYtWgjMhIaGbtu2jc01GAwCgeDdd9+tjK7L9MMPPzg7O1+4cKEK+goICBgwYAARaTQa\nK1c5IyPj8uXLT9+jBZtv8yrrqBRPua3sYtKkSYGBgezu8+AAMNYxGOsqFcY6KBfbJ3YbN258\n6623ateufeLEiYyMjKSkpL1793p5eQ0fPvzPP/+0eXflcunSpQ8++GDJkiXt2rWryn6dnJx2\n7do1YcKEMmuuXr16ypQpVRCSA6iJ22rp0qWBgYFvvPEGbgzuADDWFYWxrjLUxG2Fsc6ObJ/Y\n/fTTTx4eHrt37+7evbufn19oaGhkZOThw4eDg4NPnDhR0lKZmZmxsbEXL15UqVR8ocFgOH78\neGJiIhE9fvz4zJkz9+/fL7psTk5ObGzspUuXNBpN6bFNnz49JCRk4sSJZTbOcdzx48eTkpJM\nJtOlS5cePnxoTXdGo/HKlSsXLlxQKpUWs+RyuYuLi3lJRkbG2bNnzVuOiYn5888/c3Nzjx8/\nfu/evafssSRpaWkWK8s2xd27d82r/fPPPzdu3KjKjkra5lqt9vbt27GxsezNYkraVhWgUqmK\nbeTs2bPnz5/nX5b+MXv06NHp06dv3bplPrfoGjk5OX3++ecnTpz4/fffnyZmqA4w1mGsq1hH\nGOugcnG21qVLFx8fH71eX1IFvV5PROPHj2cvs7OzX331VYFAIBQKiUgqlc6cOdNoNHIcV1hY\nSESTJ08eNGhQrVq12NMGe/fuXVBQwJbNz88fMWKEUChkD8Jzd3dfvHhxSf2eOnWKiNatW8de\nlt44exzyzJkzX3rpJSKaNm1amd1dvnz5ueeeIyKRSOTu7r5p06aAgID+/ftzHKdWq81XWaFQ\nDBkyhK0vEbVt2/b69escx/n4+LDt4ObmNnv27KfpsaRt/s477/D9vvjii3l5eSwetinMF5HJ\nZIMHD67Kjord5qtXr/b29uY/rs2bNy9pW1WYwWAIDAxs166deWFaWppQKGRvWenvwqNHj3r1\n6sVHKJPJ1qxZw2YVu0Ycx7Vr165FixZPEzNUBxjrMNZhrGOzMNZVK7ZP7D755BMiioiIuHTp\nUrEVLAa73r17u7q67t69W61W5+fnL1y4kIiWLFnCcZxOpyMiFxeXRYsWscp79uwRCATvv/8+\nezl48GAnJ6fNmzfrdLrc3NwZM2YQ0U8//VRsv1OmTBEKhdnZ2exlmY2LRKJGjRpFRUUlJSWx\npUrpzmg0NmrUyMfHJyYmxmAwXL9+vUOHDq6ursUOdgMHDnR3d9+2bRv77V63bt3Q0FCNRsNx\nXL169Xr06MHHXOEei93mtWrVevPNN+Pj4zMyMr766isieu+99zgrxqCq6ajoNr9z545AIIiO\njs7MzDQajVevXm3evHmzZs1YZYtt9TTYhmXDKLNixQoiOn36NFfWx+yll15yc3M7dOiQTqdL\nSUnp16+fUCjkP/xFP0Ucx33++edEdPv2bZsED/aCsQ5jHcY6jHXVkO0TO61WGx0dLRAIiKh2\n7dpvvPHGmjVrHj16xFcwH+yuXbtGRB999JF5C82bNw8NDeVrBgcHm0wmfm7Hjh19fHw4jrtz\n5w4Rffzxx/wsk8nUvHnz1q1bFxtY8+bN27dvbxFGSY1zHCcSiby8vLRaLXtZendnzpwhok8+\n+YSfy0qKDnZsd/2MGTP4mnv37u3Xr9+1a9e4//sFfpoeLbCV9fb2VqvVfGGbNm28vb25ssag\nKuuIK7LNd+7cSUT79u3jKycmJl68eJG9ZaUPdgUFBWfPnj19+jS/z6MUt2/fJqLp06fzJd26\ndWvQoAFnxcds+fLlGzZs4OeyjbN8+fJi14hh57N/++23ZQYG1RnGOgZjXXk74jDWQWUSk605\nOTmtXbt25syZO3fuPHny5KFDh7Zs2SISid54440VK1bI5XLzyrGxsUTUvXt388Lw8PAffvgh\nMzPTy8uLiDp06MCGTqZ169Znz57Ny8s7ffo0ETk7O5ufpxwcHHzkyBGO48wXYRISEoYOHWpR\nWFLjMpmMiDp37uzk5MRmld7dlStXiMj8POX27dvzy5pj7XTt2pUviYyMjIyMLKnm0/fI69Kl\ni7OzM/+yY8eOcXFxqampFifEWKiyjhjzbd6uXTsPD48JEyYkJycPGDAgNDQ0LCwsLCyszEYO\nHTo0dOhQpVJpMpkkEknPnj0jIyODg4OvXr2an5/Pfliba9SoUXh4+K+//vrFF1+IRKLU1NRT\np04tWLCAynoXBALB5MmTiSg5OTktLU2n06WmphJRZmZmsWvEd0dEbBiFmgtjHYOxrrwdMRjr\noJLYPrFj6tevP3PmzJkzZ5pMpnPnzi1fvnzTpk15eXn79u0zr5adnU1E5icW8C9zcnLYYGcx\nlw2XmZmZbNmFCxdajGtCoTAzM9Pf39+8MD8/X6vV+vr6WsRZUuNssPPx8bEItaTu2O8zT09P\nvlwkEpm/5LGvAVu10tmqR16tWrXMX7J1zMvLK30MqrKOGPNtHhoaeuTIkVmzZr3//vvvvfde\ngwYNRowYMW3aNHd399IbkUqlBw8e7NSpk1KpjImJ2b1793fffZeSktKwYcNPP/202EXeeuut\n6OjoQ4cO9evXb/v27RzHjRo1isp6F/z9/bdt2zZ37tz4+HhnZ2c3NzeTyVTKGjHu7u7Ozs7m\nAyLUXBjrMNaVtyMGYx1UkspK7HhCobBTp05btmzJy8vbv3+/UqmUSqX8XDbNTgHhabVaIuJ/\nBlnMZVcqsY8LEe3bt69Pnz5lhsGu3yn6ZSupcT54flbp3YnFYiJiO+d57KiEBQ8PDyIyvyCu\nJLbqkWcwGMxfsmXN3w5z7GTYquyIMd/mRNS+ffsjR45kZGQcPnx49+7dCxYs+PPPP0+dOmVR\nzcILL7zAJjw9PQcMGFDsbagsDBs2bPLkyRs3buzXr9/WrVtfeOEF9nO59Hfh5s2bb775Ztu2\nbW/dusXOSb9//369evVKWSPGxcWlzAsboWbBWGcBY11JHTEY66CS2Ph2Jzdu3HjjjTeKvbxZ\nLpdzHFdQUGBe2KBBAyqynzY+Pt7FxaV27dr8S/O5iYmJYrHYz8+P7eM1v0y9FN7e3gKBgP0i\nseir2MaLtlB6d8HBwURkfhl5cnJysVfLs68QO9GBSUtL27Bhg8WF8TbskZeQkGD+8u7duyKR\nKCgoiA1n7H8Mo1Ao2JV0VdlRKfz9/UeOHLljx44FCxbExsZa+aaXi7u7+9ChQ/ft23ft2rXT\np09HRUWx8tLfhSNHjhiNxvnz57ORrpSa5oxGY25ursUeFKhZMNbxJRjryttRKTDWwdOzcWIX\nEhJy8ODByZMnX79+3bz8n3/+2b9/f8uWLQMCAszLe/bs6e3tvW7dOv5H0r17944cOfLKK6+w\nLwYRnTt3Li4ujk0/fvz46NGjERERIpGoe/fuAQEBq1atYvvPiUilUoWHh8+aNatoYGKx2Nvb\nOz093aK8pMaLtlB6d926dRMKhZs2beL3Tn/99dfFbqIuXbp4eXmtXbuW/5IvW7Zs7Nix7Pe0\nWCzmf+DaqkdebGwsO4mEiNLS0g4dOtS1a1epVOrm5ubh4WE+7v/666/8dJV1VNSiRYsaN26c\nl5fHl7ATOCQSCf3fbWUTb731lkqlGjt2rJub25AhQ1hh6e8C2yfB/2pXKBRffvkllfUrPyMj\ng+M4i+8C1CwY6zDWVbijojDWgS3Z/HKMY8eOeXp6CgSCjh07Dhs27I033mjbti0R1a5d++rV\nq1yRWwBs27ZNJBK1bdt29uzZH3zwQUBAQHBwcFJSEl+zX79+QUFBEyZM+Oijj+rUqSMWi0+c\nOMGW3b9/v5OTU926dT/44IMPP/ywXr16bm5usbGxxQY2YMAAX19f/rqwMhsXiUSjR482b6H0\n7tizZbp06TJlypSePXv26NGjbt26xd4CYMuWLUKhsHHjxu+//37fvn0FAsHUqVPZrFdffVUo\nFL711lvsMqIK92iBBdC/f//atWtPmDBh5syZbGWPHz/OKkydOlUgEEyfPn3btm0zZ87s0aNH\nWFjYa6+9VsUdWWzza9euyeVydp/VOXPmDB8+XCKRvPnmm8VuK5tgu1VGjRplXljKu5CWliaT\nyWrXrr1gwYLZs2fXqVNn+/btPj4+wcHBy5YtK7pGDHvklPkVcFATYazDWIexDmNdNWT7J0+8\n8MILCQkJy5Ytq1evXnZ2tkKhaNGixbp16+7cudOiRQsiEggEPXr0aNiwIas/dOjQ8+fPd+rU\n6cKFCw8ePJg0adLly5dDQ0P5BkNDQ48ePSoUCq9evdqtW7eTJ0/yV5b169fv8uXLr776anx8\n/K1bt15//fVbt2517Nix2MD69OmTlZXF/2Yts/EePXrw+5yt6W7FihWrV6/28fGJj4/v2bPn\n/v37e/bsyVoQCoXmqzxs2LDY2NgePXokJCQEBgbu3Llz2bJlbNbXX389fPjwhw8fchz3ND1a\nMJlMPXr0GDRo0N9//01Ely5d6tatW0xMTI8ePViFxYsXL1++/N69exs3bpTJZAcOHOjVqxfb\nM1+VHVls8+bNm8fFxY0ePTolJeXChQvOzs6bN2/+5Zdfit1WNsFOIh49erR5YSnvQq1atWJj\nY/v373/mzJn09PTNmzcPGTLkp59+atmyJTsCVfRTRESHDx92cnLiT46BGgpjHcY6jHUY66oj\n++aVpbP4vfuUFAqFXC4fO3ZsZTQOjmHo0KENGjQwv92XzWVlZbm7u7/77ruV1wXUOBjroIph\nrHNgtt9jV23J5fJp06b98ssvxT6EEeDEiRM7d+786KOPit4YzIaWLVtmMBjmzJlTeV3AMw5j\nHZQOY51je4YSOyKaOXNm+/bto6KiLK5Rh2fcli1bxo0b9/LLL3fr1i06OrryOjp37txXX331\n3XffsevvACoJxjooFsa6Z0G1TuwszlB5ehKJZMeOHa6urjt27LB541BzJSYmPnjwYOrUqX/+\n+Wfpd416GkajcdWqVVOmTKnU8RRqIox1UDUw1j0LBJztTsYEAAAAADuq1nvsAAAAAMB6SOwA\nAAAAHAQSOwAAAAAHgcQOAAAAwEEgsQMAAABwEEjsAAAAABwEEjsAAAAAB4HEDgAAAMBBILED\nAAAAcBBI7AAAAAAcBBI7AAAAAAeBxA4AAADAQSCxAwAAAHAQSOwAAAAAHAQSOwAAAAAHgcQO\nAAAAwEEgsQMAAABwEGJ7B2AbrVu39vf3P3z4sL0DqfGys7M7dOhQtPz27dsSiaTq4wEAAADr\nOUhil5iYqNPp7B2FIzAajffv3y9aznFc1QcDAAAA5YJDsQAAAAAOAokdAAAAgINAYgcAAADg\nIKriHLsLFy6sWLEiJCTkk08+4QsTExPXr19/9+5dFxeXdu3aRUdHOzk5WSxoTR0AAAAAYCp9\nj9369et//PHH0NBQ80KNRjN//vzg4OCvv/569uzZt27dWr9+vcWC1tQBAAAAAF6lJ3Y+Pj7L\nly8PCQkxL4yNjTUYDNHR0QEBAfXr1x81atSRI0c0Gk156wAAAAAAr9ITu4EDBxY9fpqQkFC/\nfn2RSMReNmnSRKfTPXjwoLx1AAAAAIBnn/vY5eXleXp68i89PDyEQmFubm656qxbt+7EiRNs\nOjg42GQyVXLUUKJp06b99ddfbPrixYsSiaRnz57Z2dlE1KJFi02bNplXPnr06JQpU9j0ggUL\nBg0a9NVXX23cuDE9PT0/P/+5556TSCT//POP+bsPAAAA1qguNyjmOE4gEJSrjkKhePz4MZsW\ni8W4QbEdJSYmXrt2TUACjjiWYd+4cSMrM4sjztnZ2aJyXl4eXzknJ4eIUlJSrl27xubeuX2b\nIzIYDFW8CgAAAA7APrc7kcvl+fn5/MuCggKO4+RyebnqTJ8+/egTiYmJlR81lCFU7mX+Mlgu\nF1CJybpFZSJyc5ISUYjMshwAAACsZJ/ErmHDhgkJCfxemRs3bjg7O9epU6e8dQAAAACAV7mJ\nnclkysrKysrK0mg0er2eTRuNxk6dOkml0pUrV6alpd2+fXv9+vURERFSqZSINmzYcPHiRSIq\npQ4AAAAAFFW559hlZWVFR0fzL9966y0iWr58ed26dRcsWLB27dopU6a4u7t37tw5KiqK1Tl6\n9KiLi0vbtm2dnJxKqgMAAAAARVVuYufv7793795iZ4WEhCxcuLBo+caNG8usAwAAAABF4Vmx\nAAAAAA4CiR0AAACAg0BiBwAAAOAgkNgBAAAAOAgkdgAAAAAOAokdAAAAgINAYgcAAADgIJDY\nAQAAADgIJHYAAAAADgKJHQAAAICDQGIHAAAA4CCQ2AEAAAA4CCR2AAAAAA4CiR0AAACAg0Bi\nBwAAAOAgkNgBAAAAOAgkdgAAAAAOAokdAAAAgINAYgcAAADgIJDYAQAAADgIJHYAAAAADgKJ\nHQAAAICDQGIHAAAA4CCQ2AEAAAA4CCR2AAAAAA4CiR0AAACAg0BiBwAAAOAgkNgBAAAAOAgk\ndgAAAAAOAokdAAAAgINAYgcAAADgIJDYAQAAADgIJHYAAAAADgKJHQAAAICDQGIHAAAA4CCQ\n2AEAAAA4CCR2AAAAAA4CiR0AAACAgxDbpdeMjIz09HSLwgYNGjg7O/MvOY67fv26eQVPT8+w\nsLCqiA8AAACgBrJPYnf27Nl9+/bxL00mU0ZGxsqVK0NCQvjC/Pz8OXPm+Pv7C4X/7lZs1arV\ne++9V9WxAgAAANQQ9knsIiMjIyMj+Ze//fbbrVu3zLM6IiooKCCiJUuWeHl5VXV8AAAAADWQ\n/c+xS05O3rt378SJEy3KCwsLicjDw0OhUCgUCnuEBgAAAFCT2GePnbl169b1798/ICDAoryg\noEAoFH700UeZmZkqlSo4OHjatGnPPfccX0GhUKhUKjYtFtt/RQAAAADsy8750I0bN+Lj42fM\nmFF0lru7e9euXSMiIpo1a6ZSqZYsWfLll1+uWLFCJBKxCitWrNizZw+bDg0N1Wg0VRc3AAAA\nQPVj58Ru165dvXr1cnd3LzqrSZMmTZo0YdOurq5jxoyZNGlScnJynTp1WGHTpk2VSiXfDp/w\nAQAAADyb7JnYFRYWXrx48dNPP7WmsqenJxGp1Wq+ZPDgwYMHD2bTa9asCQoKqowgAQAAAGoK\ne148cf78eYlE0rRp02Ln7tu3b+7cuRzHsZdXrlwRi8WhoaFVGCAAAABATWLPxO7Bgwc+Pj4C\ngcC8cNasWQcPHiSitm3bJiQkLFq06Pjx49u3b1+zZs3QoUOLPWgLAAAAAGTfxE4ul7dp08ai\nUCaTsedPBAUFLV++3NfXNyYm5vHjx5MnTx4+fLg9wgQAAACoGex5jt1rr71WtPD//b//x08H\nBASMGzeuCiMCAAAAqMHsf4NiAAAAALAJJHYAAAAADgKJHQAAAICDQGIHACVat27dihUr7B0F\nAABYC4kdAJQIiR0AQM1i50eKAUB19vfff/M3CQcAgOoPiR2APSUlJR09ejQ9PV0ul3fp0qVF\nixb8LJPJdOLEibi4ODc3t65duzZv3tx8wVOnTp09e9ZgMDRu3Lhv375SqZSV//jjj0KhcMyY\nMSdPnjx//ryzs3OPHj2aNWtm3uyff/55/fp1sVjcsGHDiIgI/jnL69evF4lEb7zxxqZNm0Qi\n0ZgxY7Zs2aLRaN5//31WgeO4Y8eOXbp0yWAw1KtXLyIiws3NrXI3EAAAlAcSOwC7Wbly5eTJ\nk4OCgurUqZOamjphwoRJkyZ9++23RFRYWNi/f/+TJ0/Wq1dPp9M9fPhw2rRpS5YsISKVSvXq\nq6/+/fffbdu2lUql8+fPr1279qFDh+rWrUtEv/76a2FhYUxMTEJCQosWLWJjYz/44IPNmze/\n/vrrRJSRkdGzZ887d+48//zzRHTp0qXGjRv/888/crmciDZu3KjT6fbs2XPmzJmOHTuOGTNm\n3bp1ubm5LLFTKBQDBgyIjY1t2bKlu7v75cuX3d3dDx482Lp1aztuQwAAMIdz7ADsw2g0zpw5\nc9CgQUlJSSdOnIiPj1+yZMnatWvv3r1LRLNmzTpz5syxY8cSEhKSkpJmz5791VdfHThwgM06\nduzYH3/8ceHChVOnTt24cSMvL2/06NGsWaFQGBcX5+vre/LkyVWrVp07dy44OPiLL75gc+fP\nn3/z5k22M+/8+fN//PHHjRs3vvzySzZXIpHEx8e7ubmlpKTs2bPHIuBp06adPXv26NGjly5d\nOnnyZHx8vFAoHDFiBI7VAgBUH0jsAOyjoKBAqVRKpVL+ccnTpk1TqVT169fX6/W//vpr3759\ne/TowWbNmDHjs88+k8lkBoPhxx9/HDx4cP/+/dmsOnXqvPfee//8809SUhIrMZlMH3/8MZsW\ni8UdOnRgySLrIiYmpnPnzuzlyy+/LJfLL126xEeVk5Pz2WefCYWWI4NWq/3tt9/MQwoMDHzn\nnXdu3rxpvjgAANgXDsUC2IdcLh8xYsSmTZuSkpKGDBnSq1cv/iy6R48e5eXlmZ8Y5+npOXv2\nbCK6c+eOUql89OjRrFmz+Ll37twhort374aFhRFRrVq1PD09zZctLCxk0/Xq1fP399+5c2dy\ncrJSqWSF/FwWFWvEwt27dzUaTatWrcwL2RmBN2/eLPrQZwAAsAskdgB2s2HDhl69ev30008f\nffSRwWBo0KDBl19+OWjQoNzcXCJyd3cvukhBQQERZWZmXr582by8b9++/G42/kKKojZv3jxu\n3DiBQNCxY0e5XC4QCHQ6nXkFmUxW7IKsX4uQ2JUT5nkhAADYFxI7ALsRi8Vjx44dO3ZsXl7e\n4cOHP//888GDB1+4cMHf35+I8vLyii7CEq/IyMilS5eWt7uCgoJx48bVq1cvJiaGXS1BRIGB\ngdYsy3YBsvTOvEF+FgAAVAdWnWP3yy+/3Lp1q7JDAXimmEym27dvs2mZTDZ06NCtW7dyHHf0\n6NHAwEA3N7ezZ8/ylTUazdixYzdu3FivXj2ZTHb69GnzprKysqzZbXbv3j2VSjV48GA+q4uP\nj09LS7Mm2gYNGri4uFy8eNG8kO01tDg+CwAAdmRVYrd+/fqmTZt26NBh5cqV2dnZlR0TwLPg\n8OHDTZo0+f777/mSc+fOEVFISIhIJBoxYsQ///yzbds2NmvZsmUbNmzw8vISCoVvv/12bGzs\njz/+yGbl5uYOHDiwefPmBoOh9B5r165NRPyPtNTU1PHjxwcFBVnzpZZIJFFRUUeOHPn7779Z\nSWJi4g8//NChQwfzcwEBAMC+rErsvv/++3nz5hUWFr7//vtBQUGvvfbanj179Hp9ZQcH4MD6\n9u07evTod999NywsrGvXrk2aNBk1atSoUaPYDecWL14cHh4+bNiwRo0aBQcHf/zxx1OnTo2M\njCSiTz75JCIi4u23365bt254eHhISEh8fPyvv/4qFpdxZoWfn9+77767devWNm3a9O7du3nz\n5u+8805kZOTt27d79Ohx79690hf/8ssvu3bt2rdv3zZt2nTq1Klp06YymWzTpk222iAAAPD0\nrDrHrlGjRvPnz58/f/61a9e2bdu2ffv2gQMH+vr6vvnmm1FRUW3btq3sKAEcj0Ag2LBhw4cf\nfnjq1CmFQuHn59exY8eWLVuyuTKZLCYm5q+//rp69aq7u3t4eDh/xNPV1fXAgQOnT5+OjY3V\naDSTJk169dVXXV1d2dyoqKicnBzzjl555ZXg4GA2vXr16kGDBl25csXDw2P9+vWhoaGRkZEt\nWrQwGo1+fn5Fl42OjtZoNHxIx48fZ/exMxgMs2fPfvnll52cnCpvEwEAQHkJKnZz0bi4uJ9/\n/vn777/XarWtWrWaNGlSVFSURCKxeXxWksvlQUFBN2/etFcADiMjI6NWrVpFy7VabSn/wgcP\nHvz777+Hyb2TcnM0Go1UKvX393fWGx7l5rZr344dYeTt2rXrtddeY5XXrVv39ttvf/jhh19/\n/bWbk1Sp04bKvJLzFNnZ2d7e3rZfPQAAAIdWkRsUnzlzZv369Vu2bNFqtYGBgf7+/uPGjXv+\n+ef5M8EBAAAAoOqVI7F7+PDh559/3qhRo/Dw8LVr13bp0mXfvn0PHz48fPjwtWvXTCbTK6+8\nghPvAAAAAOzFqnPs9u3b9+233x49eppsDsQAACAASURBVNRkMjVv3nzp0qWjRo3y8/PjKzRr\n1mzTpk1t2rS5dOlShw4dKi1aAAAAACiRVYnd0qVLL1++PG7cuLfeequkvK1Zs2a1atUq+ohJ\nAAAAAKgaViV2w4cPX7VqVdOmTS3K8/Pzf/jhh/fee8/FxcXJycnKO50CAAAAQGWwagfbb7/9\nduDAgaLler1++vTpuGYCAAAAoDooY4/dhg0bEhMTExMTDx8+bPHMIo7jLly4QEQCgaASAwQA\nAAAA65SR2D18+HDjxo1JSUlJSUl//fVX0QqDBg3ib6kKAAAAAHZURmI3d+7cuXPn9ujRo3v3\n7uPHj7eYK5fL3d3dKy02AAAAACgHqy6eWL16tZeXV2BgYGVHAwAAAAAVVlpid/ToUb1e37dv\n37S0tKtXr5ZU7cUXX/T396+E2AAc2YwZM3755RfbtvnGG298/fXXtm0TAABqkNISu4ULF+bm\n5vbt23fhwoUnTpwoqdqxY8eQ2AGUV15eXlpamv//b+8+w6K42j6A31vYXWDpVUWwl1hDwF7w\nsaIiGrsxGI1GY4mJiWKaUfPEGI1RY+MxRn0tiSESY7AnxhILYi8YBAVRFKTDwrJ93g9HJ5sF\nlpUq8P994Jo5c+ace4b14vbMnjNyOyuhqPyt6Qz6J/mKnJyc8jcFAAA1l7nEbsWKFTqdjm1k\nZWWVVA2TJwDKbMeYSS+5e5a/nbuZ6f/5bm352wEAgBrNXGLHv2QCbwkDAAAAePFZ+gawAwcO\nLFu2jG1fu3bNz8/P2tp64MCBT548qbTYAAAAAOA5WJTYRUdHDx8+/M6dO0Sk0+lGjhyZlJQ0\nZsyYGzduvPnmm5UcIQAAAABYxKLlTnbs2OHn57d9+3YiOnbsWEJCwpEjRwYOHHjq1Kk+ffpk\nZ2c7OTlVbpgAAAAAUBqLRuwSExP79evHXh32xx9/uLu7DxgwgIg6derEcVxiYmLlxggAAAAA\nFrAosbOystJqtWz78OHDffv2ZUkemzMLAFB5UlNTAwIC8B9IAABLWJTYtWzZMjIyMjs7OyIi\nIjY2dvjw4az8xIkTQqHQx8enMiMEgDpNpVKdOnWqoKCgugMBAKgBLPqO3bRp0zZs2ODs7ExE\n7du3HzlyJBGdOHFiypQpAwcOdHFxed5edTrdzz//bFxSv3793r17F615+/bte/fuyWSyDh06\nYBlkAAAAADMsGrFr1qzZhQsXPvroo48++uj48eMikYiI8vPzAwICduzYUYZe8/Lyfvzxx+Tk\n5IxnFApF0Wr/+9//vvjii/j4+PPnz8+cOfPmzZtl6AsAGIPBEBAQcOnSpfnz5w8aNGjWrFlZ\nWVn79+8fMWLEqFGjTp48yarp9fqwsLDx48cHBgZ+9tln/Nss8vLyli1b9uqrrwYHB3/55ZdK\npZKV37x58+233w4MDBw3blx4eDgRFRYWBgQEXLt2jVV49OhRQEDAo0eP9Hp9QEDAuXPnJk+e\nvGLFCjN95ebmhoaGDh48+J133klLS6vCmwQAULNZNGJHRG3atPniiy+MS4KCgoKCgsrWK0vj\nZsyYYWdnV1KdhISEQ4cOffvtt+xR786dO8PCwjZs2FC2HgFAKBSeOXPmnXfeWbZs2eTJk4OD\ng6Oiovr27bt69epdu3YNHz48OTlZLpdPmzbt4sWLS5YssbGxWb16df/+/aOjowUCwdixY7Oz\nsxctWqTX6z/++ONbt27t3r07IyOjZ8+ec+bMGT169P3792fPnl1YWDhy5MhTp07xWVphYeGp\nU6cKCwtFItFff/317rvvjhs3rkePHkRUUl/Dhg1TKpVLlizJyMiYO3dutd42AICaxNLELicn\n58CBA8nJySqVyuTQG2+80ahRo+fqNT8/XyAQqNXqa9eucRz30ksvubq6mtS5ePFikyZN+C/w\nBQQE/PzzzykpKfXq1XuuvgDAWHBwcEBAABEFBQX93//937Jly8Ri8cyZMz/99NO4uDhnZ+ft\n27dfv369Xbt2RNS9e3c3N7fff/99wIABM2bMaNOmTbNmzYhIoVBMnz6diOLj43Nzc+fNm8fW\nPOratatMJjPTu0Ag6Nmz57x584jo/v37xfbVoEGD06dPR0dH+/v7E5FarY6Kiqrs2wIAUDtY\nlNjFxcV17ty5pPeLBwQEPG9ix0bs5s+f37Jly4yMjG+//Xbu3Lk9e/Y0rpOamurp+c87NOvX\nr09Ejx8/5hO7c+fOxcfHs21HR8fnCgCe14kTJwYOHBgbG3vw4MFHjx7dvXvX3t4+Ly+vQ4cO\njo6OarWaiJRaDRGtWbPGxsaGP9FgMKxatYpte3p6pqam3rp1i4jUOi0R7dmzZ//+/U/fX8Jx\nlseTlJS0d+9etv2f//zn5ZdfrpDLrAtatGjBNuzt7Rs1aiQWi9k2ESkUisTERI7j5syZw9cX\nCoW3bt0aMGBAp06dvvvuu5iYmIKCgrS0tPz8fJ1O17Fjx/bt27/yyivjx4/v379/z549RSJR\nfn6+mQB8fX3ZxuXLl4vtiz3k7dChAyt85ZVXKvL6AQBqNYsSu2+++cbNzW3nzp2tWrUq+t9x\nNze35+3V29t75syZPXr0sLW1JaIdO3Zs2LDB39/fuHG1Wi2RSPhdkUgkEomMxwuPHz++f/9+\ntu3s7Fx0KBEq0L59+wYOHHj58uUPPvjAuDwyMpKI+vbtS0QKtYqIFi5cKJfLra2tWQWDwcCf\nMmjQoCNHjrBtlVZLRH/88UfZ4rlz5w7f7Nq1a5HYWc7KyqrYbSLiOM5gMBDRJ598whI+plGj\nRllZWV26dOnYsePMmTNdXFz++uuvixcvEpG1tXV0dPRPP/104MCBjRs3Ojo67tu3j43qlYT9\nqyeikvo6efKkSCTi//nznyUAACiVRYnd/fv3P/roo6FDh1ZUr/Xr12cjcExgYODevXvv37/f\nqlUrvlAmkxUWFvK7er1er9cbZ34jR47s2rUr2540aZKDg0NFhQfmySXSfI3aWmxVqNO6WNtk\nFiqNj7rZyguLnOJmK08veDqKYy+T5T3LwlkjMrFYVaY1EY2bhQrBvvzg7e3ND+wxe/fuTU5O\nvnXrFvte7JkzZ/hDUqk0JCQkJCRErVa/+uqrH3744b59+8honcuS3ihdUl8uLi56vT4zM5PN\nuE9KSqrACwQAqN0smhXr6urKViSuKBqNxvjBrl6vpyKDB/Xr109JSeF3Hz16REReXl58yUsv\nvdTvGaxxVZWsRCIiEguFRGT9798aEdlYSYqeYlwoFf3z3wkroZCIxEJR2SIpti8oD19f3+bN\nm7Mpq0R0/fp1Hx+fx48fy+VyjuPYQ9KEhISdO3cSUWFh4Z49ewYNGsTGy6VSqaenp0Qikclk\nLi4ucXFxrJHdu3c/V19dunSxsrJiM+71ev3mzZsr+aIBAGoPixK7SZMmbdu2rQLfM7Fv3753\n332XXy7hzz//dHBwaNiwIRHl5uayPxL+/v6JiYn834ajR482adLEw8OjomIAgKLEYvG2bdsO\nHz7ctGnTHj169OrVa86cOfXr1+/bt2/nzp19fX179Ojx6quvfvfdd3K5PCAgoE2bNmq1umHD\nhr169WrVqtXp06f/+9//EtGHH364cOHCiRMnDhgwgA3PswevlvTl5ua2du3a0NDQDh06NG/e\nnE2hAAAAS1j0KNbV1bVevXrt2rUbP368l5eXUPivdHDQoEHGsxwsERQUdP78+Xfeeadjx45p\naWmxsbHvv/8++0rNnDlzhgwZMnbsWB8fn+Dg4EWLFnXu3Dk7Ozs2Npb9wQCAMjP+79nixYsX\nL17MtsViMfds8kr37t3ZALkxKyur8+fPG5fwa0+eOHGiaEfvv//++++/z+9+8sknRQMoqS8i\nevvtt99++21+98MPPzRzUQAAwLMosXvvvfdOnTpFRJ999lnRoydOnHjexM7GxmbVqlUXL158\n/Phx69at58yZw8/AGDFiBP+FmylTpnTr1i0uLs7W1vbdd99lr74AAAAAgGJZOiu2oKCgpK/Z\nsTWonpdIJOrSpUvR8hEjRhjvtmrVynhGBQAAAACUxKLEjl93CgAAAABeWBZNniAivV6/bdu2\nUaNGderU6X//+x8RJScnHzhwoDJjAwAAAIDnYFFip9PpBgwYMGXKlD///DMmJiY7O5uIjh8/\nHhQUtGXLlkqOEAAAAAAsYlFit3Xr1r/++is8PDwzM5P/Rl1ISMiMGTM+/vhjrVZbmRECAAAA\ngEUs+o7dH3/88dprr40ePdq4UCAQfPLJJ2FhYbdv3+bf6ggAzyX8xmUPuV3528lUKkuvBAAA\ntZ1FiZ1CoSh26itb5USJvygAZbX10vnSKwEAAFjGosSucePG586dK1rO3uDO3hgBAM9l4sSJ\nnTp1qtg2mzVrVrENAgBAzWJRYjdkyJChQ4fOmzdv/vz5rCQ9Pf23335bsGBBt27djN/fCgAW\n2rVrV4W/BfWNN97o3bt3xbYJAAA1iKWJXWho6FdffbV69Woiio6OZm/4adKkCXtRNwCUTadX\neslt7cvfjlKZH3XpZPnbAQCAGs2ixI6Ili9fPmrUqL1798bHx2u1Wnd39x49eowZM8bGxqZS\n4wOo3ebNXNqiWZvyt5OYFDcypHv52wEAgBrN0sSOiPz8/Pz8/CovFAAAAAAoD4sSu4sXL+7a\ntevy5ctZWVl2dnYtWrQICgoaOXKkSCSq7PgAAAAAwEKlJHZ6vX727NlhYWFEJJfLnZ2dnzx5\nEh0dvWvXrtatW0dERLRu3bpK4gQAAACAUpTy5omFCxeGhYUNGTIkOjo6Ly8vKSkpMzMzKSlp\n0aJFCQkJffr0SU5OrppAAQAAAMA8c4ndgwcPVq9ePW7cuMjISH9/f4FAwMq9vb2XLFny+++/\nZ2dnf/zxx1USJwAAAACUwlxiFx4eLhQKV69ezad0xnr27Dl9+vS9e/eqVKpKCw8AAAAALGUu\nsbt69eorr7zC3htWrOHDhyuVyri4uEoIDAAqnp+fn8CIm5vboEGDLly4YFwnOTl55syZjRo1\nkkqlnp6ew4YN++uvv4ptQSKRtGjRYtGiRUX/d7d9+3aBQPDrr7+y3Q4dOhj3K5fLK/tKAQDq\nJnOJXXp6uvnXhbF3TmRnZ1dwUABQad54442Hzxw6dMjBwaFfv36JiYnsaGxs7Msvv3z69Olv\nvvnm6tWrP/74o4ODQ58+fSIiIoq2cPv27SVLlmzcuHHhwoXGXTx58mThwoXW1tZ8SVZW1rff\nfsv3i/8NAgBUEnOzYjUajUQiMVNBKBQSEcdxFRwUAFQaW1tb/jWAXl5eu3fvdnJyOnTo0KxZ\ns4ho5syZbm5uly5dkslkRPTSSy/16dOnYcOGN2/eHDlyZNEWmjVrlpSUtHr16jVr1vBdzJo1\n67XXXtu9ezdfkpWV1bRpU7x+EACgspUyKxYAajehUCgSiTQaDRGlp6efOHFiwYIFLKvjLVu2\nbPHixSW1YG1trdVq+d1ffvnlypUrS5cu5UvUarVSqfzll198fX19fHxGjhyJETsAgEpSyjp2\nf/7556BBg0o6qlQqKzoeAKg6CoVi6dKlhYWFw4cPJ6KEhAQiatu2rYWncxx38+bNdevWBQcH\ns5Ls7OzZs2f/3//9n62tLV8tLy/Pw8NDo9GEhYVxHLdkyZJevXrFxsY6OjpW9AUBANR1pSR2\nKSkpKSkpVRMKAFSBzZs3b9++nW0XFBS0b98+MjKycePGfAWdTmdhC2ygbuzYsfxz2Hnz5g0c\nOLB///7G9d3c3FJTU/ndn376qV69ehEREW+++Wb5LwcAAIyZS+xOnjxZVWEAQBUZO3bsZ599\nRkR5eXn9+vWbPn36gAED2KEWLVoIBIKrV6926dLF+BS9Xi8UCvllj/gWrKysvLy8+FcL/v77\n70eOHImJiTEfgJ2dnbe398OHDyv2ugAAgPAdO4C6xsHBoVmzZs2aNfP19f32228/+OCD27dv\ns0NOTk4DBgxYvnx5Xl6e8SmLFi3q169f0RZ8fHyMXxi9devWnJycFi1auLq6urq6pqWlhYSE\njBw58tatW9OmTWNf4yOi/Pz8Bw8eNG3atPKvFQCgzinlUSwA1GITJ07ct2/f+PHjo6OjpVIp\nEa1bt6579+4dO3b84osvOnTokJ6evnXr1vDw8P3795fa2oYNG1auXMnv+vr6fvnll8HBwQKB\nYN++fRqN5rPPPtNqtR999JGzszM/xxYAACoQRuygAuTm5hKRnuOISKXT6nQ6tVqt0mlLOw+q\nX1hYWGpqamhoKNtt3rz55cuX+/XrFxoa+vLLL48fP16pVJ4/f55/XGuGs7OzlxGhUOji4uLq\n6uri4vLHH388evTI19e3Z8+eOp3u1KlTNjY2lXxlAAB1EUbsoAI8ePCAiLR6PRFlFSq1er1K\npRIL8d+GF86lS5dMStzc3J48eWJc0rBhw82bN1veQkmMJ0x07Njxjz/+sDhMAAAoI/zphQpj\nY/30PVFikVhiJa3eYAAAAOogJHZQYWTSpw/XRCKxFRI7AACAKofEDgAAAKCWQGIHAAAAUEsg\nsQMAAACoJer0rNj09PQpU6aw7SFDhsyYMaN646kQCoViwoQJbLtfv35z586txmA44tjrR3NV\nhdUYBgAAQB1RpxM7pVJ54MABtu3t7V29wVQUtVrNX5SLi0v1BkPPlrhT60t5/WidtWbTYrnc\nrvztFCjzy98IAADUdHU6sWMa1PN+lPKguqOoYC/ORbk4uWdmp1V3FC+uqEsnqzsEAACoPZDY\nkUBQC79o+OJc1IsTyYtm+fLln3zyScW2aWtrW7ENAgBAzYLEDqB6ODk5OTk5VXcUAABQq2A0\nBQAAAKCWqLYRu/z8/MjIyHv37llZWbVv337AgAEikci4gkqlWrp0qXFJq1atQkJCqjbMGiA3\nN1en0xGRSCRydHQ0PqRWqzMzM0UikV6vZyVyuVwqrch3QnAcR0QGg6GiGjRwHBFlZWURkbOz\nc0U1CwAAUBdUT2KnUqkWLFhgbW09aNCg/Pz8Xbt2PXz48K233jKuk5eXd+vWrWnTptnZPZ0z\n+CLM8XwBdenSJTY2loiaNGly7949VqjTaYloz549e/bsGTZs2G+//cbKt2zZ8uabb1Zg7zlq\nFRFlZGRUVIMZygIiat68uVAo5PNRAAAAsET1JHa3bt3Ky8v7+uuvbWxsiEgikezevdskscvP\nzyeivn37sjpghkgkFgqLeaoukUg1GjXblsmsVZW2mJxQKKzAQTsikkmtNVp1BTYIAABQF1RP\nYufn57dr165/ghCLraysTOooFAqhUHjjxo0rV65wHOfr69u1a9eqDbPGkMmsrcSmN5CIHO1d\n0jIes21XZ4/kx/crKQCxWKLRqCqwQVcXj8epL8RyLQAAADVI9c+KVSgUERERwcHBJuX5+fkG\ng+HgwYNdunRJT09ftWrVkCFDJk+ezFfYtWvXuXPn2Hb9+vWrLmIAAACAF1I1J3ZPnjz5/PPP\n27dvP2LECJNDL7/88qZNmxo0aMB2fXx81q5d++qrrzo4OLCSxMTE6Ohoti2TyVSqihwxAgAA\nAKhxqjOxi4mJWb58eXBw8KhRo4oetbGxMf523csvv2wwGB48eNCuXTtW8umnn3766ads29HR\nEYN2AAAAUMdVW2J348aNr776au7cuZ06dSq2QkJCQk5Ojq+vL9vNyckhIizoWmZarYaIjh49\nmp2dPWLEiKZNm1Z3RAAAAFDBqmeBYoVCsWLFitmzZxfN6i5cuPDw4UMiSkhIWL58OVu/Q6PR\n/PDDD40bN+afzMLzYpNMf/755/nz58fExFR3OAAAAFDxqmfE7vDhwwqFYtu2bdu2beMLFy9e\nXL9+/Q0bNgwZMmTs2LF9+/a9d+/e/Pnz3dzccnNz3d3dFyxYIBAIqiXgWsPJwSU7N7O6owAA\nAIBKUT2JXe/evVu3bm1SyF4z8NFHH7ENgUAwffr0CRMmpKamOjg4uLm5IasrP6nUurpDAAAA\ngMpSPYmdh4eHh4dHsYdatWplvGtnZ8e/eQIAAAAAzKie79gBAAAAQIVDYgcAAABQSyCxe6Ed\nOHCg7TNHjhwhoqVLl/IlaWlp1RKVRq8jonythogKtVrzlTmOIyK1TkdEcXFxJke1Bj0RKbUa\nIjJwXCUECwAAUIdU/yvFwIycnJyYmBiBQMBxHFvJ79GjR3yJtrSkqpKwBIxlbBZkYxx/ilqt\nNjlm4IwarNAgAQAA6iCM2NUADer5lFpS9axltkQkk1g0zdbJ0a3MRwEAAMBCSOwAAAAAagkk\ndgAAAAC1BBI7AAAAgFoCkyeq39WrV7Va7Z07d2xtbb29vZ2dnZs0aWLJiffu3UtJSVGpVFwJ\nMxhYeW5uLlX51ASDQc965J5OnuCISKMpfvarwWAwKdfqtES0Z88ejuOaN29ubW3dpk2bYnrh\nOCJ68ODBpUuXmjRpwt5ZYiImJqawsJCIpFKpRqNhkTg6OjZr1qwCrhMAAOBFgsSu+nXv3p1l\nHszo0aPDw8MtOXHBggUXLlwg9qIwq2Iq6HRaIjp16hQRGfT6ConWQiq1kqVQnIGjZ6lbeno6\nPVvcxKQyPVtFhSWC2dkZBoNh/PjxrEKbNm1u3bpVtBe22MqqVatWrVq1e/fuCRMmFK0zZsyY\n27dvE1GjRo2SkpJYVIGBgYcOHaqgawUAAHhR4FHsC0Fua0dE1jKbMpwrFJbyS5RKZGWJqdyk\nRSbMyqTmLlD27/fYCkggEAisrCRicXFJqxEba7n5CmKxlVT69CbIbe3NVwYAAKi5kNi9EBzs\nnYnItkw5h1AoMl+hbPli+RXNt2xtzL3218b630cFJBSKpBJrq9ISO3s7R/MVJFYSW5unwTg6\nFPO4FgAAoHZAYgcAAABQSyCxAwAAAKglkNgBAAAA1BJ1dFasRqOZN2+eQqEgIp1eV93hlEKt\nVhHRtm3bzpw5w94YW6BUENH9+/erN7DnpTfoiUir1xORWq8nIh1n4I+qNSoi0ulZifHSJ5qU\nlJTZs2d7eXklJyezQp1OR0T5WjU9m3Jb1Nq1a+Pj41NTU0uqAAAAUMvU0cROq9Vu2LCBbet1\nVboOSBlodRoiOnbs2LFjx4YMGUJEKlUhET158qSaI3tOnMFARLqnP/VEpDdKuXQ6DRHpOdMk\nTKfTZWVlbdiwoUuXLlFRUaywU6dORKTSaunZInlF/fLLL6dPnyYiSTXNCwYAAKhidfpRrKuz\nR3WH8ByKRmtlJamWSMrJ3u6feakmS5wQUbGLmzjau/DbHm71+W0bWSkLnRCRWFRH//cCAAB1\nUJ1O7KysSllH44VSNI0TCATVEkk5GWdaAoHpWi3FXpRI/M8pxvdBKCr9A1xD7xIAAEAZ1OnE\nDgAAAKA2QWIHAAAAUEsgsQMAAACoJepiYufu7u7h4UFEao3p2+gr1dSpU+VyuVgsFggEtra2\njo7mXoR1/PhxuVw+depUItLrDUSUX5BHREeOHCHjtUD+TS6X+/j4EJGmhEtj66SMHTtWLpdf\nuHCBiEaMGMGiEgqFIpHI09OzzBeoKMihZ6uZAAAAQNWrixMG8/PzdU+XOCkpQaoUKpWqoKBA\nIBASkVajVavVZirrdLqCggKR0TwDtqhHSUt7MAUFBaVMleVY43qVSqXX64mosLCwoKBAIBBw\nHMdxJBQKOa6Mmdmz2DBZAQAAoHrUxRE7InJ3rVddXUslUiLycG9gSWUHe9NRPZnMxvwpbi6l\nr+Hi5mI6LGclthIKhCKRyFpma0lgZohEphNdAQAAoGrU0cQOAAAAoPZBYgcAAABQSyCxAwAA\nAKgl6tbkiUOHDimVSr1ez95GX+0OHz5cUFBQ9fFodVoiOnHixOPHj/XPM4k1MzOTnr3stcwM\nBgMRlaGJp73rdESUlZVF9HQuiF6vI6Lo6GiJRNKrVy93d/eoqKjk5OSMjAz+XK1WU1BQwPcO\nAABQK9WtxG7GjBkPHz4kIq1GW92xEBHNmDHjwYMHVPLqJJWksLCAiD755BMi6tmzp+UnxsbG\nEpFGrytP7zq9loj0z5Ngsfm28fHxRKRWq4jo7t27/FGNVk1Ea9euXbt27bFjx/r37//1119H\nREQYt5BfkK/Iz6Mqv9UAAABVqc49irW1tavuEP7Fxqb019hXEns7cwvpmSGxkpa/9zI0YmP9\nz72SSa1NjtrJHUxKjF9Ka3I6AABArVTnEjvr0pYLqWLVGI/c1r5sJ4rFVuXvvZT19oojk/2T\nzEmLJHZFL0f078ROJn2xfvUAAAAVrs4ldgAAAAC1FRI7AAAAgFoCiR0AAABALVH7Z8UuWrTo\nypUrRCQWF3+xbLGMgwcPJiUlTZgwYcKECRUew5YtW3799ddr167xJTm5WQaDIT09XWL1z3fF\n2Eocp06d8vDwsLGxISKDwdK32SqV+Rqtiog0Wksn/OYXKIgoJibGksr79+/ft2/fi79WSGRk\n5Nq1ay9fvmy+mkqlGjp0KNvu0KHD9evX2fY777wzYMCAyg0RAACg0tT+xO7ChQvHjh0jIrFY\nXK9eMa+IZUtpJCUlJSUl+fn5VUYMMTExBw8eNC5Ra1QcxxUWFopFxpNDOSJKS0v7Z9/iREqr\n02q0Gnqeddq0Og3xC8KVJjU11cJmq1dCQoLJrS6WXq/nq4lEIn57+PDhlRgcAABAJavOR7Ea\njSYxMTE1NZWlVmWuY4kG9bzNV3BzKSbnq1g21rbGu0KhUCQUFa3maO9CRA72zs/bvpOjWxmi\nkkplllRj8RRdUuTFZOFcY+NPRamfEAAAgBdftY3YnTx5cuPGjXK5XKlUuri4fPbZZ+7u7mWo\nYyGBoJQUViAQlK3lcimuTxaJoNhjZgnLdAkWdsSqlSGqF5nxp6LUTwgAAMCLr3r+mGVmZq5f\nv3727Nlbt27dvXu3l5fXhg0bylAHAAAAAHjVk9idP3/e2dm5V69eRCQSiV599dVr167l5OQ8\nbx0AAAAA4FXPo9ikpCQfHx9+RDyZxwAAHA9JREFUt1GjRhzHJSUlOTo6Wl5HpVLx7/0UCkvJ\nUNmUAp1O9/QN9JyBiDgDR88mT3CcgYgyMzPv3r1rMBiEQiH/UyAQcBxn8pOdaFzIKvPxGDeS\nnZ1NT19YT//6siDH986ZxkMGIjKQcYT//KSnP/l2OCIyPC385wKf/fznROMGybhZPiAq/ruM\nBjKwePl+n51oFA8fjdEtNa7GSp71y/f49Oe/b8y/4vn3/TFu9p9IDAY9ERUUFBg1+rSO4F/x\nGIiosLCQnn0q2Ckv/oRfAACAUlVPYqdUKtlyHoxUKhWJROzvq+V1Vq5cuX//frbdqFEjlUpl\npsfHqQ+IKCUlhe1m56QTUXZuBhHl5GUSUXpmKhGtX79+586dubm5jo6OOTk5dnZ2CoXC1ta2\noKBAKpWq1WqRSKTX6/lm2a5EItFoNNbW1oWFhewUBwcHvhG2TUSFhQVEpNaoiEirfZqS5hfk\nFhtPbl42ESkUOXydAqWCb0SlLiQijVZNRDqdVkdavpGsnAwiyslljWQRUZ4im4gU+blEVFCQ\nR0TKwnwiKlQpTePRP+2lqLy8fxpRqvKJSKX+53Q+EiLS6/XsFrELYT/zFFlElJefQ0T5ShaD\ngogKVcaX808k7Kder88vyCtyf/65qAJlHn9nnqQ/JqKTJ08SkUqlJCKN5p+o+NMzs9OI6OLF\ni/yn4vjx4/w2AABAjVY9iZ1YLNbpdPwux3EGg8FknblS6zRu3LhTp05sm/05L1bnzp3v3LlT\nWFioUCg4jmNpFj/Gxo+3icVia2trlUrl7e395MkTDw8PiUTi5uaWnp7u4uKSmZnJTrSxsVEq\nlWKx2GAwGAwG42TO2dk5KyvL1dU1IyPDw8ODb8Td3d1gMNja2ubn5+v1eoFAwI8C8kEWjafo\nWKDJ8KFJCd9I0aZMhg/5U/ht40Y4jlOr1UVvo42NDcdxHMfpdDqxWKzRaFhSK5VKNRqNUChk\nLfAlRCSRSPR6vcFg4DhOKpVqtVrWvpWVFZ8iF/3JTpdIJEXvz9NpJc9C1Wq1LNsWi8UCgUAq\nlQqFQrVabWdnx241GY2qGt9ke3v7vLw8sVgsk8mEQqFCoZDJZCKRqEGDBt7emBsLAAA1WPUk\ndq6urrdv3+Z3MzIyOI4zmfFaap2JEydOnDiRbTs6OtavX7/YvpYuXbp06dKKjL5WS0tL8/Dw\nKFqenZ0tkUiqPh4AAACwXPVMnmjfvn1cXBx7QElE0dHRzs7OJoMlltQBAAAAAF71jNi1b9++\nVatWn3322dChQ7Ozs3/66aeZM2eyCRALFy7s3bt3YGCgmToAAAAAUNS/vulVlVQqVWRkZFxc\nnK2tbdeuXTt37szKv/zyyy5duvTp08dMnaLYo1jjR7dQNiU9ilWr1XgUCwAA8IKrtsSuYiGx\nqyhI7AAAAGouPNkEAAAAqCWQ2AEAAADUEtUzeaIyaLXahISE6o6ixsvMzCy2PDEx0crKqoqD\neXHY2Nh4enpWdxQAAAClqCXfsRs6dOjBgwfZtlQqlUqlSqXSeH3jaoR4zKsR8QQGBh46dKga\nowIAALBELRmx+/nnnydNmsS2s7Ozs7Oz69WrZ21tXb1RMVlZWTk5OYinJC9aPMV+fjp27FiN\nIQEAAFiolozYGdu4cePWrVs3bdrk7+9f3bEQPYtn48aN/AvQqtemTZu+//57xFOSsLCwLVu2\nbNiwwczyOgAAAC8mTJ4AAAAAqCWQ2AEAAADUErXwUey9e/cSExN9fX2dnZ2rOxYixFOaFy2e\nhISEhISEFyceAAAAy9XCxA4AAACgbsKjWAAAAIBaAokdAAAAQC1RU9exu3///vfff3/37l1r\na2s/P7+pU6eavKL+xx9//PHHH03OWrdunYuLy4QJE4wL/fz8Fi1aVNnx5Ofnl9RvqeeWQX5+\n/ubNm2/cuKHValu2bDljxgx3d3eTOllZWVu3br1+/bpGo2nSpMnkyZNbtGhBRO+88879+/f5\najKZLDw8vMyRnD179ueff378+LGrq2tgYGBQUJDldSw5tzLiOXHixC+//JKSkuLg4NC7d++J\nEycKhcLz589/+eWXxtUmT548YsSI8ocEAABQYbgaqLCwcNKkSWFhYSkpKfHx8bNnz964caNJ\nnYKCgnQj+/fvf+utt9RqdUpKSlBQUHx8PH8oLy+vCuIpqV9Lzi2Dzz//PDQ0NCEh4dGjRytX\nrpw1a5Zerzep895774WGht67d+/x48dff/31a6+9VlhYyHHc5MmTIyMj+TgzMzPLHEZ8fPzw\n4cOPHj2anp4eHR09ZsyY06dPW1jHknMrI56LFy8OHz780KFDaWlpFy9eHDt2bEREBMdxx44d\ne/PNN40/VOx2AQAAvDhq5KPYqKgonU43depUT0/PZs2avf7668ePH1epVMZ1bGxsXJ+RSqV7\n9+6dPXu2RCJRKBRE1LBhQ/6onZ1dFcRTUr+WnPu8MjIyLl68+NZbbzVu3Lh+/fozZsx49OjR\nzZs3TeJxc3ObNWtWkyZN6tWrFxISkpeX9/DhQ3bI09OTj7M8k0MPHz7s5+c3YMAAV1dXf3//\ngQMHHjhwwMI6lpxbGfFkZmaOGjUqMDDQzc3Nz8+vW7dut27dIiKFQuHg4OBqRCaTlTMeAACA\nilUjH8XGx8c3a9ZMJBKx3datW2s0msTExNatWxdbf+fOne3bt2/Xrh0RKRQKoVC4Y8eOK1eu\nENHLL788ceJEGxubyo6npH6f91osjMfKyqpx48ZsVy6Xe3l53blzp0OHDnwdOzu7Dz/8kN/N\nzMwUCoWurq5arVatVp8/f37Xrl0KhaJZs2YhISENGjQocyS9e/fmd1u3bn3w4EGDwSAUCkut\nY8m5lRHPwIEDjU/JzMysX78+EeXn52s0mq+++iouLs7e3r5Pnz5BQUECgaDMwQAAAFS4Gjli\nl5uba29vz+/a2dkJhcKcnJxiKz958uTPP//kv9+m1WodHBzs7e0XLlw4derUK1eurFixogri\nKanf57oWC+Xl5dnZ2RnnHA4ODrm5uSXVVygU69atGz58uJOTk1KpdHR01Ol0M2fODA0N1Wg0\nH374YUFBQdkiyc3NNR4Qtbe312q1SqXSkjqWnFsZ8Rg7fPjwvXv3Xn31VSIyGAxardbf33/x\n4sWBgYG7du2KiIgoTzAAAAAVrmaM2IWFhR05coSIRCJRsX9NOY4raewkIiKic+fObNCFiDp3\n7sy/A9THx0cikXz88cepqamenp6VGk9J/T7XtZTkzJkzX3/9NdtmX/C3vIXk5OTPP/+8Y8eO\nkyZNIiIHB4cdO3bwRxcsWDBp0qRz587179//uULiFY3E8hJLalZGPETEcdwPP/xw7NixpUuX\nurm5EdEbb7zxxhtvsKMNGzbMyMg4dOjQqFGjyhkPAABABaoZid2YMWMCAwPp2d9gR0fH5ORk\n/qhCoeA4ztHRseiJOp3uzJkzc+bMKallb29vIkpPT3+uxK7M8RTttwznFuXr67t27Vq27enp\nmZeXx2Zm8ClLbm6uk5NT0ROvX7++YsWK8ePHDx06tNiWra2t3dzcMjIynisenpOTk/FIYW5u\nrkQiMXnwXVIdS86tjHiISKfTrVy5Mj09fdWqVa6ursU25e3tnZmZWc5HwwAAABWrZvxNcnZ2\n9vHx8fHxYflQixYt4uPjdTodOxoTEyOTyfivlBm7du1aYWGhr68vX3L+/PmffvqJ333w4AER\n1atXr7LjKalfy6/FDBsbG59npFJp8+bNtVrtvXv32FE2K6Lol/Zu37791VdfzZs3zzirS0pK\nWr9+PR+PSqV63qzXWPPmzW/fvs3vxsTEtGzZ0mSErKQ6lpxbGfFwHLd8+XKNRvPll18aZ3V7\n9+49c+YMv/vgwQMPDw9kdQAA8EKpkX+WunTpIpVKN2zYkJqaGhsb+/333wcGBkqlUiLavn37\n5cuX+Zp37txxcXFhhxi5XP7DDz9ERkZmZmbGxsaGhYV17dq1pFGZCoynpH7NnFtmzs7OXbt2\n3bBhQ2Ji4qNHj1avXt20adOXXnqJiH7//ffIyEgi0mg0a9asGTZsmI+PT8YzKpXK2dn5/Pnz\n69evT01NZefK5fJu3bqVLZLBgwdfvXo1MjIyIyPj9OnTR48eHT58OBHl5ORs3LiRPYkuqU5J\n5eVhSTxHjhyJj4+fNm2aQqFgtyU7O5uItFrtpk2bLl26lJ2dffbs2d9++23YsGHljAcAAKBi\n1dR3xT58+PC7776Li4uTy+Vdu3Z944032MTSkJCQIUOGjB07llVbt27dw4cPTaZHnD17Njw8\n/PHjxw4ODp06dQoJCSn/uhWWxFNSvyWdWx5KpXLz5s1Xr17V6/Vt2rSZMWMGexS7cuXKvLy8\nzz///Pr1659++qnJWdOnTx8yZEhCQsK2bdvY1NqWLVtOmzbNw8OjzJFcuHBhz549jx49cnd3\nDw4OZt/VS05Onjlz5vLly1m6WWwdM+XlUWo8CxcuNB7VIyI7O7vdu3cbDIbw8PDjx49nZ2d7\neHgMHjx48ODBmBULAAAvlJqa2AEAAACAiRr5KBYAAAAAikJiBwAAAFBLILEDAAAAqCWQ2AEA\nAADUEkjsAAAAAGoJJHYAAAAAtQQSOwAAAIBaoooSu23btrVr105gxNvbOzw8nB3V6XQCgWDG\njBlVE4yJzZs3y2SyS5cuVUFfnp6e7P1dKpXKwktOS0u7du1a+Xs0UeH3vMo6MqOc96pazJkz\np169euylFwAAAOVUFYndjh07pkyZ0qBBg1OnTqWlpSUlJf32229OTk7jx48/cuRIFQRgxtWr\nV995552VK1f6+flVZb8SiWTfvn1vv/12qTU3bdr07rvvVkFItUBNvFerVq2qV6/euHHjsFQ4\nAACUX1Ukdtu2bbOzs/v111979erl5ubm7e0dFBR07NgxLy+vU6dOlXRWenp6VFTU5cuXlUol\nX6jT6U6ePHn//n0ievTo0fnz5xMSEoqem5WVFRUVdfXqVZVKZT62+fPnN2zYcObMmaU2znHc\nyZMnk5KSDAbD1atXHz58aEl3er3++vXrly5dKigoMDnk6OhobW1tXJKWlnbhwgXjlk+fPn3k\nyJGcnJyTJ0/eu3evnD2WJDU11eRi2a24e/eucbUzZ87ExMRUZUcl3XO1Wh0bGxsVFcV+WUxJ\n96oMlEplsY1cuHDh4sWL/K75j1lycvK5c+f+/vtv46NFr0gikSxbtuzUqVO//PJLeWIGAAAg\nIuIqX/fu3V1cXLRabUkVtFotEU2fPp3tZmZmBgcHCwQCoVBIRFKpNDQ0VK/XcxyXn59PRHPn\nzh0xYoSHh0erVq2IqH///gqFgp2bl5f32muvCYVC9rpVuVy+YsWKkvo9e/YsEW3ZsoXtmm9c\nr9cTUWhoaL9+/Yjo/fffL7W7a9euNWrUiIhEIpFcLt+9e7enp+eQIUM4jissLDS+5Ozs7FGj\nRrHrJaJXXnnl1q1bHMe5uLiw+2Bra/vRRx+Vp8eS7vlbb73F9/uf//wnNzeXxcNuhfEpDg4O\nI0eOrMqOir3nmzZtcnZ25j/Abdu2LelelZlOp6tXr56fn59xYWpqqlAoZL8y87+F5OTkvn37\n8hE6ODiEhYWxQ8VeEcdxfn5+7dq1K0/MAAAAHMdVRWL3+eefE1FgYODVq1eLrWCS2PXv39/G\nxubXX38tLCzMy8tbunQpEa1cuZLjOI1GQ0TW1tbLly9nlffv3y8QCGbPns12R44cKZFIfvjh\nB41Gk5OTs2DBAiLatm1bsf2+++67QqEwMzOT7ZbauEgkatmyZUhISFJSEjvLTHd6vb5ly5Yu\nLi6nT5/W6XS3bt3q1KmTjY1NsYnd8OHD5XJ5eHg4G6ds0qSJt7e3SqXiOK5p06a9e/fmYy5z\nj8Xecw8PjwkTJsTFxaWlpX399ddENGvWLM6CfKtqOip6z+/cuSMQCKZOnZqenq7X62/cuNG2\nbds2bdqwyib3qjzYjWUpI7N+/XoiOnfuHFfax6xfv362trZHjx7VaDSPHz8ePHiwUCjkP/xF\nP0Ucxy1btoyIYmNjKyR4AACos6oisVOr1VOnThUIBETUoEGDcePGhYWFJScn8xWME7ubN28S\n0QcffGDcQtu2bb29vfmaXl5eBoOBP9q5c2cXFxeO4+7cuUNEn3zyCX/IYDC0bdu2Y8eOxQbW\ntm1bf39/kzBKapzjOJFI5OTkpFar2a757s6fP09En3/+OX+UlRRN7NijyQULFvA1f/vtt8GD\nB9+8eZP7d7JSnh5NsIt1dnYuLCzkC319fZ2dnbnS8q0q64grcs8jIiKIKDIykq98//79y5cv\ns1+Z+cROoVBcuHDh3Llz/PiuGbGxsUQ0f/58vqRnz57NmzfnLPiYrVmzZvv27fxRdnPWrFlT\n7BUxbO7Ot99+W2pgAAAAZohLe1RbASQSyXfffRcaGhoREfHXX38dPXp0z549IpFo3Lhx69ev\nd3R0NK4cFRVFRL169TIu7Nat2+bNm9PT052cnIioU6dOLE1kOnbseOHChdzc3HPnzhGRTCYz\nnpPh5eV1/PhxjuOMT2Hi4+NHjx5tUlhS4w4ODkTUtWtXiUTCDpnv7vr160RkPCfD39+fP9cY\na6dHjx58SVBQUFBQUEk1y98jr3v37jKZjN/t3LnzlStXUlJSTL78Z6LKOmKM77mfn5+dnd3b\nb7/94MGDoUOHent7+/j4+Pj4lNrI0aNHR48eXVBQYDAYrKys+vTpExQU5OXldePGjby8PDaI\naKxly5bdunXbtWvXl19+KRKJUlJSzp49u2TJEirttyAQCObOnUtEDx48SE1N1Wg0KSkpRJSe\nnl7sFfHdERFLGQEAAMqsKhI7plmzZqGhoaGhoQaDITo6es2aNbt3787NzY2MjDSulpmZSUTG\nX6Lid7OyslhiZ3KUpYbp6ens3KVLl5rkcEKhMD093d3d3bgwLy9PrVa7urqaxFlS4yyxc3Fx\nMQm1pO7YWJS9vT1fLhKJjHd57E8+uzTzKqpHnoeHh/Euu8bc3Fzz+VaVdcQY33Nvb+/jx48v\nXLhw9uzZs2bNat68+Wuvvfb+++/L5XLzjUil0sOHD3fp0qWgoOD06dO//vrrunXrHj9+3KJF\ni//+97/FnjJlypSpU6cePXp08ODBP//8M8dxr7/+OpX2W3B3dw8PD//000/j4uJkMpmtra3B\nYDBzRYxcLpfJZMbJHwAAQBlUXWLHEwqFXbp02bNnT25u7sGDBwsKCqRSKX+UbbOvu/HUajUR\n8UM+JkfZrEz2p5GIIiMjBwwYUGoYbK5i0cSipMb54PlD5rsTi8VExB5E8tgTWBN2dnZEZDz5\ntyQV1SNPp9MZ77JzjX8dxtgX/6uyI8b4nhORv7//8ePH09LSjh079uuvvy5ZsuTIkSNnz541\nqWYiICCAbdjb2w8dOrTYJfdMjB07du7cuTt27Bg8ePBPP/0UEBDAhgbN/xZu3749YcKEV155\n5e+//2bzbxISEpo2bWrmihhra+tSJ3EDAACYV+nLncTExIwbN67YpRwcHR05jlMoFMaFzZs3\npyLPpOLi4qytrRs0aMDvGh+9f/++WCx2c3Njz7OMl+Qww9nZWSAQsNEXk76KbbxoC+a78/Ly\nIiLjJTMePHhQ7MogLF1gX+piUlNTt2/fbrIISAX2yIuPjzfevXv3rkgkql+/PkvdWD7NZGdn\ns1nDVdmRGe7u7hMnTty7d++SJUuioqIs/KU/F7lcPnr06MjIyJs3b547dy4kJISVm/8tHD9+\nXK/XL168mGV1Zmoa0+v1OTk5JqPFAAAAz6vSE7uGDRsePnx47ty5t27dMi4/c+bMwYMH27dv\n7+npaVzep08fZ2fnLVu28ANC9+7dO378+LBhw1gSQETR0dFXrlxh248ePfrzzz8DAwNFIlGv\nXr08PT03btzInhUSkVKp7Nat28KFC4sGJhaLnZ2dnzx5YlJeUuNFWzDfXc+ePYVC4e7du/kn\ncatXry72FnXv3t3Jyem7777jE5pvvvlm8uTJbOxQLBbzg3kV1SMvKiqKfWGOiFJTU48ePdqj\nRw+pVGpra2tnZ2ec4+7atYvfrrKOilq+fHmrVq1yc3P5EvZlNSsrK/r3vaoQU6ZMUSqVkydP\ntrW1HTVqFCs0/1tg46/8CGV2dvZXX31FpY1opqWlcRxn8m8BAADgeVX6o1h7e/v9+/cHBwe3\nb9++U6dOjRo1EggE8fHxly9fbtCgQdG/4jY2NmFhYePHj+/atevAgQPz8/PDw8NdXV1XrFjB\n1xk0aFBQUFBwcLCtrW1ERIRGo/nggw+ISCKRfP/99yNGjPDz8xs6dKhYLN6/f39qampJaUfX\nrl3Pnj1rMq+ipMaLMt9dgwYN3nrrrbCwsF69evn7+1+/ft1gMDRp0qRoO9bW1ps2bZowYYK/\nv3+/fv3i4+OPHTv23nvvvfTSS0TUqlWryMjIN998s2PHjnPmzKmQHulZ5jFo0KAhQ4YMGzbM\n3t4+PDxcp9Ox+QFsSZE1a9YsWLDA39//8uXLUVFRPj4+HMdVZUdFDR069KuvvmrXrl1QUJCT\nk1NCQsLevXsnTJjAhsdM7lWxLTwXNhP28uXLr7/+Ov843vzvPTAw0MHB4e2337569aparf7x\nxx9XrFgRGxsbHh7u5eX13nvvFdvRmTNniKh79+7ljxkAAOqyqnjzREBAQHx8/DfffNO0adPM\nzMzs7Ox27dpt2bLlzp077dq1IyKBQNC7d+8WLVqw+qNHj7548WKXLl0uXbqUmJg4Z86ca9eu\neXt78w16e3v/+eefQqHwxo0bPXv2/Ouvv/hZtIMHD7527VpwcHBcXNzff/89ZsyYv//+u3Pn\nzsUGNmDAgIyMDH58rtTGe/fuzT9fs6S79evXb9q0ycXFJS4urk+fPgcPHuzTpw9rQSgUGl/y\n2LFjo6KievfuHR8fX69evYiIiG+++YYdWr169fjx4x8+fMhynTL3aMJgMPTu3XvEiBF//PEH\nEV29erVnz56nT5/u3bs3q7BixYo1a9bcu3dvx44dDg4Ohw4d6tu3L3sKWZUdmdzztm3bXrly\nZdKkSY8fP7506ZJMJvvhhx927txZ7L2qEGzCxKRJk4wLzfwWPDw8oqKihgwZcv78+SdPnvzw\nww+jRo3atm1b+/bt2dP2op8iIjp27JhEIuG/CAgAAFA2ggr8E1gFdDqdlZXV9OnTw8LCyt9a\nTk5O48aNR4wYsXXr1gpvHGqHMWPGXLt2jS2MXEldZGZmNmrUaOLEiZs2baqkLgAAoI6oihG7\nF5ajo+P777+/c+fOYl84C3Dq1KmIiIgPPvig8rI6Ivrmm290Ot3HH39ceV0AAEAdUacTOyIK\nDQ319/cPCQkxWY8D6rg9e/ZMmzZt0KBBPXv2nDp1auV1FB0d/fXXX69bt47NNQYAACiPGpbY\nmXwbr/ysrKz27t1rY2Ozd+/eCm8caq779+8nJia+9957R44cMb9CXnno9fqNGze+++67lZo7\nAgBA3VHDvmMHAAAAACWpYSN2AAAAAFASJHYAAAAAtQQSOwAAAIBaAokdAAAAQC2BxA4AAACg\nlkBiBwAAAFBLILEDAAAAqCWQ2AEAAADUEv8PlAHUA/f10QgAAAAASUVORK5CYII=",
                  "text/plain": "plot without title"
                },
                "metadata": {
                  "image/png": {
                    "height": 420,
                    "width": 420
                  }
                }
              }
            ],
            "id": "d2f43f34-ae1f-4ace-bef1-05ed8a5748c1"
          }
        ]
      },
      "base_image": "qcdis/conda-lter-life:v0.2"
    },
    "p27": {
      "title": "Retrieve bud burst data-cherine-jantzen-at-gmail-com",
      "task_name": "retrieve-bud-burst-data-cherine-jantzen-at-gmail-com",
      "original_source": "\ndir.create(\"/tmp/data\")\n\n\nretrieve_dataverse_data <- function(dataset,\n                                    version = \":latest\",\n                                    server = \"demo.dataverse.nl\",\n                                    key = param_dataverse_api_key) {\n\n  # Check if dataset is provided in right format (i.e., starting with \"doi:\")\n  if(!stringr::str_starts(string = dataset, pattern = \"doi:\")) {\n\n    dataset_doi <- paste0(\"doi:\", stringr::str_remove(string = dataset, pattern = \"DOI:|https://doi.org/\"))\n\n  } else {\n\n    dataset_doi <- dataset\n\n  }\n\n  # Retrieve ID that belongs to the data set of interest\n  dataset_id <- httr::GET(url = paste0(\"https://\", server, \"/api/\",\n                                       \"datasets/:persistentId?persistentId=\", dataset_doi),\n                          httr::add_headers(\"X-Dataverse-key\" = key)) |>\n    httr::content(as = \"text\", encoding = \"UTF-8\") |>\n    jsonlite::fromJSON() |>\n    purrr::pluck(\"data\") |>\n    purrr::pluck(\"id\")\n\n  # Retrieve list of data files that are part of the data set\n  dataset_files <- httr::GET(url = paste0(\"https://\", server, \"/api/\",\n                                          \"datasets/\", dataset_id, \"/\",\n                                          \"versions/\", version, \"/\",\n                                          \"files\"),\n                             httr::add_headers(\"X-Dataverse-key\" = key)) |>\n    httr::content(as = \"text\", encoding = \"UTF-8\") |>\n    jsonlite::fromJSON() |>\n    purrr::pluck(\"data\") |>\n    purrr::pluck(\"dataFile\")\n\n  # Retrieve each data file in list using their unique IDs\n  data <- purrr::map(.x = dataset_files$id,\n                     .f = ~{\n\n                       httr::GET(url = paste0(\"https://\", server, \"/api/\",\n                                              \"access/datafile/\", .x),\n                                 httr::add_headers(\"X-Dataverse-key\" = key)) |>\n                         httr::content(encoding = \"UTF-8\")\n\n                     }) |>\n    purrr::set_names(stringr::str_remove_all(string = dataset_files$filename, \"\\\\..*\"))\n\n  # If API is unsuccessful, prompt message to check DOI, version and/or server\n  if(purrr::is_empty(data)) {\n\n    stop(\"Dataverse API failed to fulfill the request. Check whether the provided dataset DOI, version, and/or server are correct.\")\n\n  } else {\n\n    return(data)\n\n  }\n\n}\n\ndataverse_list <- retrieve_dataverse_data(dataset = \"doi:10.80227/test-QMGPSW\")\n\npurrr::walk2(.x = names(dataverse_list)[-1],\n             .y = dataverse_list[-1],\n             .f = ~{\n\n               assign(.x, .y, envir = globalenv())\n\n             })\n\n\n\nd_tree <- tbl_tree %>%\n  dplyr::left_join(tbl_area %>%\n                     dplyr::select(\"AreaID\", \"AreaName\", \"AreaAbr\" = \"AreaShortName\"),\n                   by = \"AreaID\")\n\nd_budburst <- tbl_budburst %>%\n  dplyr::left_join(d_tree %>%\n                     dplyr::select(\"Area\" = \"AreaName\", \"TreeID\", \"AreaAbr\"),\n                   by = \"TreeID\")\n\nd_budburst <- d_budburst %>%\n  dplyr::mutate(\"Area\" = stringr::str_replace(string = Area, pattern = \" \", replacement = \"_\"))\n\nhierarchical_events <-\n  d_budburst %>%\n  dplyr::select(\"Year\", \"Month\", \"Day\", \"BudburstID\", \"Area\", \"AreaAbr\", \"TreeID\") %>%\n  dplyr::mutate(eventDate = lubridate::make_date(year = Year, month = Month, day = Day),\n                DOY = lubridate::yday(eventDate),\n                eventID_L1 = paste(AreaAbr, Year, sep = \"\"),\n                eventID_L2 = paste(eventID_L1, DOY, sep = \"_\"),\n                eventID_L3 = paste(eventID_L2, TreeID, sep = \"_\"))\n\n\nareas_per_year <-\n  d_budburst %>%\n  dplyr::group_by(Year) %>%\n  dplyr::distinct(Area, .keep_all = TRUE) %>%\n  dplyr::summarise(location = paste(Area, collapse = \", \")) %>%\n  dplyr::ungroup()\n\nd_events_level1 <-\n  hierarchical_events %>%\n  dplyr::select(\"eventID_L1\", \"Year\") %>%\n  dplyr::distinct(eventID_L1, .keep_all = TRUE) %>%\n  dplyr::mutate(eventDate = as.character(Year),\n                month = NA,\n                day = NA,\n                samplingProtocol = NA,\n                sampleSizeValue = NA,\n                sampleSizeUnit = NA,\n                parentEventID = NA,\n                decimalLatitude = NA,\n                decimalLongitude = NA,\n                geodeticDatum = NA,\n                minimumElevationInMeters = NA,\n                maximumElevationInMeters = NA,\n                verbatimLocality = areas_per_year$location[match(.$Year, areas_per_year$Year)]) %>%\n  dplyr::rename(\"eventID\" = \"eventID_L1\",\n                \"year\" = \"Year\")\n\n\nareas_per_day <-\n  hierarchical_events %>%\n  dplyr::group_by(eventDate) %>%\n  dplyr::distinct(Area, .keep_all = TRUE) %>%\n  dplyr::summarise(location = paste(Area, collapse = \", \")) %>%\n  dplyr::ungroup()\n\nd_events_level2 <-\n  hierarchical_events %>%\n  dplyr::select(\"eventID_L2\", \"eventID_L1\", \"eventDate\", \"Year\", \"Month\", \"Day\") %>%\n  dplyr::distinct(eventID_L2, .keep_all = TRUE) %>%\n  dplyr::mutate(samplingProtocol = NA,\n                sampleSizeValue = NA,\n                sampleSizeUnit = NA,\n                decimalLatitude = NA,\n                decimalLongitude = NA,\n                geodeticDatum = NA,\n                minimumElevationInMeters = NA,\n                maximumElevationInMeters = NA,\n                verbatimLocality = areas_per_day$location[match(.$eventDate, areas_per_day$eventDate)]) %>%\n  dplyr::rename(\"eventID\" = \"eventID_L2\",\n                \"parentEventID\" = \"eventID_L1\",\n                \"year\" = \"Year\",\n                \"month\" = \"Month\",\n                \"day\" = \"Day\") %>%\n  # Convert dates to characters to avoid merging problems later on\n  dplyr::mutate(eventDate = as.character(eventDate))\n\n\n\nd_budburst <- d_budburst %>%\n  dplyr::left_join(hierarchical_events %>%\n                     dplyr::select(\"eventID\" = \"eventID_L3\", \"BudburstID\"),\n                   by = \"BudburstID\")\n\nd_events_level3 <-\n  hierarchical_events %>%\n  dplyr::select(\"eventID_L3\", \"eventID_L2\", \"eventDate\", \"Year\", \"Month\", \"Day\", \"TreeID\") %>%\n  dplyr::mutate(samplingProtocol = \"https://doi.org/10.1098/rspb.2000.1363\",\n                sampleSizeValue = 1,\n                sampleSizeUnit = \"tree\",\n                decimalLatitude = d_tree$Latitude[match(.$TreeID, d_tree$TreeID)],\n                decimalLongitude = d_tree$Longitude[match(.$TreeID, d_tree$TreeID)],\n                minimumElevationInMeters = d_tree$Elevation[match(.$TreeID, d_tree$TreeID)],\n                maximumElevationInMeters = minimumElevationInMeters,\n                verbatimLocality = d_budburst$Area[match(.$eventID_L3, d_budburst$eventID)]) %>%\n  dplyr::rename(\"eventID\" = \"eventID_L3\",\n                \"parentEventID\" = \"eventID_L2\",\n                \"year\" = \"Year\",\n                \"month\" = \"Month\",\n                \"day\" = \"Day\") %>%\n  dplyr::select(!\"TreeID\")\n\nd_events_level3 <-\n  d_events_level3 %>%\n  dplyr::mutate(geodeticDatum = dplyr::case_when(!is.na(decimalLatitude) ~ \"EPSG:4326\",\n                                                 TRUE ~ NA_character_),\n                eventDate = as.character(eventDate))\n\nevent <-\n  dplyr::bind_rows(d_events_level1, d_events_level2, d_events_level3) %>%\n  dplyr::arrange(eventDate, eventID)\n\nevent <-\n  event %>%\n  dplyr::mutate(language = \"en\",\n                country = \"Netherlands\",\n                countryCode = \"NL\",\n                institutionID = \"https://ror.org/01g25jp36\",\n                institutionCode = \"NIOO\",\n                type = \"Event\") %>%\n  # Reorder event file according to GBIF list\n  dplyr::select(\"eventID\", \"parentEventID\", \"samplingProtocol\", \"sampleSizeValue\",\n                \"sampleSizeUnit\", \"eventDate\", \"year\", \"month\", \"day\", \"country\",\n                \"countryCode\", \"verbatimLocality\", \"minimumElevationInMeters\",\n                \"maximumElevationInMeters\", \"decimalLatitude\", \"decimalLongitude\",\n                \"geodeticDatum\", \"type\", \"language\", \"institutionID\", \"institutionCode\") %>%\n  # Rename \"Hoge Veluwe\" back to original name\n  dplyr::mutate(verbatimLocality = stringr::str_replace(string = verbatimLocality, pattern = \"_\", replacement = \" \"))\n\nevent_file <- \"/tmp/data/event.csv\"\nwrite.csv(event, file = event_file, row.names = FALSE)\n\n\n\ntree_species <-\n  d_tree %>%\n  dplyr::select(\"TreeID\", \"TreeSpeciesID\") %>%\n  #dplyr::select(\"TreeID\", \"TreeSpeciesID\", \"Remarks\") %>%\n  dplyr::left_join(tbl_treeSpecies, by = \"TreeSpeciesID\") %>%\n  dplyr::right_join(d_budburst, by = \"TreeID\")\n\n\n\ntree_species <-\n  tree_species %>%\n  dplyr::mutate(species = dplyr::case_when(TreeSpeciesName == \"European oak\" ~ \"Quercus robur\",\n                                           TreeSpeciesName == \"American oak\" ~ \"Quercus rubra\",\n                                           TreeSpeciesName == \"Larch\" ~ \"Larix kaempferi\",\n                                           TreeSpeciesName == \"Pine\" ~ \"Pinus sylvestris\",\n                                           TreeSpeciesName == \"Birch\" ~ \"Betula pendula\",\n                                           TRUE ~ \"Tracheophyta\"))\n\nsciNames <- unique(tree_species$species)\n\ntax <- taxize::get_gbifid_(sci = sciNames) %>%\n  dplyr::bind_rows() %>%\n  dplyr::filter(status == \"ACCEPTED\" & matchtype == \"EXACT\") %>%\n  tidyr::separate(canonicalname, c(\"Genus\", \"specificEpithet\"), remove = FALSE) %>%\n  dplyr::select(\"scientificName\" = \"scientificname\", \"canonicalname\",\n                \"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"specificEpithet\")\n\n\ntree_species_tax <- dplyr::left_join(tree_species,\n                                     tax,\n                                     by = c(\"species\" = \"canonicalname\"))\n\n\n\nif(d_budburst %>% dplyr::count(eventID) %>% dplyr::filter(n > 1) %>% nrow() > 0) {\n\n  stop(paste(\"In\", d_budburst %>% dplyr::count(eventID) %>% dplyr::filter(n > 1) %>% nrow(),\n             \"instances of an event, more than one tree was sampled.\",\n             \"This should not be the case for level-3 events.\"))\n\n}\n\noccID <-\n  d_events_level3 %>%\n  dplyr::arrange(eventDate) %>%\n  dplyr::mutate(occurrenceID = paste(eventID, 1, sep = \"_\"))\n\noccurrence <-\n  tree_species_tax %>%\n  dplyr::select(\"eventID\", \"Observer\",\n                \"kingdom\", \"phylum\", \"class\", \"order\",\n                \"family\", \"genus\", \"specificEpithet\", \"scientificName\", \"TreeID\") %>%\n  dplyr::mutate(individualCount = 1,\n                basisOfRecord = \"HumanObservation\",\n                occurrenceStatus = \"present\",\n                occurrenceRemarks = NA,\n                recordedByID = Observer,\n                occurrenceID = occID$occurrenceID[match(.$eventID, occID$eventID)]) %>%\n  dplyr::rename(\"organismID\" = \"TreeID\") %>%\n  dplyr::select(\"eventID\", \"occurrenceID\", \"recordedByID\",\n                \"individualCount\", \"basisOfRecord\", \"occurrenceStatus\",\n                \"occurrenceRemarks\", \"organismID\", \"scientificName\", \"kingdom\", \"phylum\", \"class\", \"order\",\n                \"family\", \"genus\", \"specificEpithet\")\n\noccurrence_file <- \"/tmp/data/occurrence.csv\"\nwrite.csv(occurrence, file = occurrence_file, row.names = FALSE)\n\n\nmeasurement_or_fact <-\n  tree_species_tax %>%\n  tidyr::pivot_longer(col = c(\"TreeTopScore\", \"TreeAllScore\"),\n                      names_to = \"measurementType\",\n                      values_to = \"measurementValue\")  %>%\n  dplyr::select(\"eventID\", \"measurementType\", \"measurementValue\")%>%\n  dplyr::mutate(measurementUnit = NA,\n                measurementMethod = \"https://doi.org/10.1098/rspb.2000.1363\",\n                measurementRemarks = NA)\n\n\nmeasurement_or_fact <-\n  measurement_or_fact %>%\n  dplyr::group_by(eventID) %>%\n  dplyr::mutate(\"ID\" = 1:dplyr::n()) %>%\n  dplyr::ungroup()\n\nmeasurement_or_fact <-\n  measurement_or_fact %>%\n  dplyr::left_join(occurrence %>%\n                     dplyr::select(\"occurrenceID\", \"eventID\"),\n                   by = \"eventID\") %>%\n  dplyr::mutate(measurementID = paste(occurrenceID, ID, sep = \"_\")) %>%\n  dplyr::select(!c(\"ID\", \"occurrenceID\")) %>%\n  # Rename measurement types to fit more controlled vocabulary\n  dplyr::mutate(measurementType = dplyr::case_when(measurementType == \"TreeTopScore\" ~ \"bud burst stage (PO:0025532) of the tree crown\",\n                                                   measurementType == \"TreeAllScore\" ~ \"bud burst stage (PO:0025532) of the whole tree\")) %>%\n  # Reorder columns according to GBIF list\n  dplyr::select(\"measurementID\", \"eventID\", \"measurementType\", \"measurementValue\",\n                \"measurementUnit\", \"measurementMethod\", \"measurementRemarks\")\n\nextendedmeasurementorfact_file <- \"/tmp/data/extendedmeasurementorfact.csv\"\nwrite.csv(measurement_or_fact, file = extendedmeasurementorfact_file, row.names = FALSE)",
      "types": {
        "event_file": "str",
        "occurrence_file": "str",
        "extendedmeasurementorfact_file": "str",
        "param_dataverse_api_key": "str"
      },
      "inputs": [],
      "outputs": [
        "event_file",
        "occurrence_file",
        "extendedmeasurementorfact_file"
      ],
      "params": [
        "param_dataverse_api_key"
      ],
      "param_values": {
        "param_dataverse_api_key": ""
      },
      "confs": {},
      "all_inputs": [],
      "dependencies": [
        {
          "name": "dplyr",
          "asname": null,
          "module": ""
        },
        {
          "name": "httr",
          "asname": null,
          "module": ""
        },
        {
          "name": "jsonlite",
          "asname": null,
          "module": ""
        },
        {
          "name": "lubridate",
          "asname": null,
          "module": ""
        },
        {
          "name": "purrr",
          "asname": null,
          "module": ""
        },
        {
          "name": "stringr",
          "asname": null,
          "module": ""
        },
        {
          "name": "taxize",
          "asname": null,
          "module": ""
        },
        {
          "name": "tidyr",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "488741b": {
            "id": "488741b",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "Retrieve bud burst data-cherine-jantzen-at-gmail-com",
              "vars": [
                {
                  "name": "occurrence_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#7a862d"
                },
                {
                  "name": "event_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#93651f"
                },
                {
                  "name": "extendedmeasurementorfact_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#bf5740"
                }
              ],
              "params": [
                "param_dataverse_api_key"
              ],
              "inputs": [],
              "outputs": [
                "occurrence_file",
                "event_file",
                "extendedmeasurementorfact_file"
              ],
              "og_node_id": "488741b",
              "deps": [
                ""
              ]
            },
            "ports": {
              "occurrence_file": {
                "properties": {
                  "color": "#7a862d"
                },
                "id": "occurrence_file",
                "type": "right"
              },
              "event_file": {
                "properties": {
                  "color": "#93651f"
                },
                "id": "event_file",
                "type": "right"
              },
              "extendedmeasurementorfact_file": {
                "properties": {
                  "color": "#bf5740"
                },
                "id": "extendedmeasurementorfact_file",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "488741b",
      "container_source": "",
      "kernel": "IRkernel",
      "notebook_dict": {
        "metadata": {
          "toc-autonumbering": true,
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "kernelspec": {
            "display_name": "R",
            "language": "R",
            "name": "R"
          },
          "language_info": {
            "codemirror_mode": "r",
            "file_extension": ".r",
            "mimetype": "text/x-r-source",
            "name": "R",
            "pygments_lexer": "r",
            "version": "4.3.2"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# Retrieve bud burst data\n# ---\n# NaaVRE:\n#  cell:\n#   params:\n#    - param_dataverse_api_key:\n#       type: String\n#       default_value: ''\n#   outputs:\n#    - event_file: String\n#    - occurrence_file: String\n#    - extendedmeasurementorfact_file: String\n#   dependencies:\n#    - name: dplyr\n#    - name: purrr\n#    - name: stringr\n#    - name: httr\n#    - name: jsonlite\n#    - name: lubridate\n#    - name: tidyr\n#    - name: taxize\n# ...\n\ndir.create(\"/tmp/data\")\n\n# Part I: Retrieve data ---------------------------------------------------\n\n# Function to retrieve data from Dataverse\nretrieve_dataverse_data <- function(dataset,\n                                    version = \":latest\",\n                                    server = \"demo.dataverse.nl\",\n                                    key = param_dataverse_api_key) {\n\n  # Check if dataset is provided in right format (i.e., starting with \"doi:\")\n  if(!stringr::str_starts(string = dataset, pattern = \"doi:\")) {\n\n    dataset_doi <- paste0(\"doi:\", stringr::str_remove(string = dataset, pattern = \"DOI:|https://doi.org/\"))\n\n  } else {\n\n    dataset_doi <- dataset\n\n  }\n\n  # Retrieve ID that belongs to the data set of interest\n  dataset_id <- httr::GET(url = paste0(\"https://\", server, \"/api/\",\n                                       \"datasets/:persistentId?persistentId=\", dataset_doi),\n                          httr::add_headers(\"X-Dataverse-key\" = key)) |>\n    httr::content(as = \"text\", encoding = \"UTF-8\") |>\n    jsonlite::fromJSON() |>\n    purrr::pluck(\"data\") |>\n    purrr::pluck(\"id\")\n\n  # Retrieve list of data files that are part of the data set\n  dataset_files <- httr::GET(url = paste0(\"https://\", server, \"/api/\",\n                                          \"datasets/\", dataset_id, \"/\",\n                                          \"versions/\", version, \"/\",\n                                          \"files\"),\n                             httr::add_headers(\"X-Dataverse-key\" = key)) |>\n    httr::content(as = \"text\", encoding = \"UTF-8\") |>\n    jsonlite::fromJSON() |>\n    purrr::pluck(\"data\") |>\n    purrr::pluck(\"dataFile\")\n\n  # Retrieve each data file in list using their unique IDs\n  data <- purrr::map(.x = dataset_files$id,\n                     .f = ~{\n\n                       httr::GET(url = paste0(\"https://\", server, \"/api/\",\n                                              \"access/datafile/\", .x),\n                                 httr::add_headers(\"X-Dataverse-key\" = key)) |>\n                         httr::content(encoding = \"UTF-8\")\n\n                     }) |>\n    purrr::set_names(stringr::str_remove_all(string = dataset_files$filename, \"\\\\..*\"))\n\n  # If API is unsuccessful, prompt message to check DOI, version and/or server\n  if(purrr::is_empty(data)) {\n\n    stop(\"Dataverse API failed to fulfill the request. Check whether the provided dataset DOI, version, and/or server are correct.\")\n\n  } else {\n\n    return(data)\n\n  }\n\n}\n\n# Retrieve data\ndataverse_list <- retrieve_dataverse_data(dataset = \"doi:10.80227/test-QMGPSW\")\n\n# Store each table as separate R objects for easier use, and exclude README\npurrr::walk2(.x = names(dataverse_list)[-1],\n             .y = dataverse_list[-1],\n             .f = ~{\n\n               assign(.x, .y, envir = globalenv())\n\n             })\n\n# Part II: create event file (= core of DwC-Archive) ----------------------\n\n## 1. Create help file to create event IDs ####\n\n# Assign area names and abbreviations to sampled trees\nd_tree <- tbl_tree %>%\n  dplyr::left_join(tbl_area %>%\n                     dplyr::select(\"AreaID\", \"AreaName\", \"AreaAbr\" = \"AreaShortName\"),\n                   by = \"AreaID\")\n\n# Assign area names to bud burst data\nd_budburst <- tbl_budburst %>%\n  dplyr::left_join(d_tree %>%\n                     dplyr::select(\"Area\" = \"AreaName\", \"TreeID\", \"AreaAbr\"),\n                   by = \"TreeID\")\n\n# Rename Hoge Veluwe to avoid problems with space between words\nd_budburst <- d_budburst %>%\n  dplyr::mutate(\"Area\" = stringr::str_replace(string = Area, pattern = \" \", replacement = \"_\"))\n\n# Create eventDate and (hierarchical) eventID of:\n# level 1 (<area abbreviation><year>; e.g., HV1988)\n# level 2 (<level 1 ID>_<day of year>; e.g., HV1988_119)\n# level 3 (<level 2 ID>_<TreeID>; e.g., HV1988_119_412)\nhierarchical_events <-\n  d_budburst %>%\n  dplyr::select(\"Year\", \"Month\", \"Day\", \"BudburstID\", \"Area\", \"AreaAbr\", \"TreeID\") %>%\n  dplyr::mutate(eventDate = lubridate::make_date(year = Year, month = Month, day = Day),\n                DOY = lubridate::yday(eventDate),\n                eventID_L1 = paste(AreaAbr, Year, sep = \"\"),\n                eventID_L2 = paste(eventID_L1, DOY, sep = \"_\"),\n                eventID_L3 = paste(eventID_L2, TreeID, sep = \"_\"))\n\n## 2. Create event file for Level 1: Years ####\n\n# Get all areas sampled within each year\nareas_per_year <-\n  d_budburst %>%\n  dplyr::group_by(Year) %>%\n  dplyr::distinct(Area, .keep_all = TRUE) %>%\n  dplyr::summarise(location = paste(Area, collapse = \", \")) %>%\n  dplyr::ungroup()\n\n# Create associated event file\nd_events_level1 <-\n  hierarchical_events %>%\n  dplyr::select(\"eventID_L1\", \"Year\") %>%\n  dplyr::distinct(eventID_L1, .keep_all = TRUE) %>%\n  dplyr::mutate(eventDate = as.character(Year),\n                month = NA,\n                day = NA,\n                samplingProtocol = NA,\n                sampleSizeValue = NA,\n                sampleSizeUnit = NA,\n                parentEventID = NA,\n                decimalLatitude = NA,\n                decimalLongitude = NA,\n                geodeticDatum = NA,\n                minimumElevationInMeters = NA,\n                maximumElevationInMeters = NA,\n                verbatimLocality = areas_per_year$location[match(.$Year, areas_per_year$Year)]) %>%\n  dplyr::rename(\"eventID\" = \"eventID_L1\",\n                \"year\" = \"Year\")\n\n## 3. Create event file for level 2: Sampling day within each year ####\n\n# Get all the areas that have been sampled on a specific day (in each year)\nareas_per_day <-\n  hierarchical_events %>%\n  dplyr::group_by(eventDate) %>%\n  dplyr::distinct(Area, .keep_all = TRUE) %>%\n  dplyr::summarise(location = paste(Area, collapse = \", \")) %>%\n  dplyr::ungroup()\n\n# Create event file\nd_events_level2 <-\n  hierarchical_events %>%\n  dplyr::select(\"eventID_L2\", \"eventID_L1\", \"eventDate\", \"Year\", \"Month\", \"Day\") %>%\n  dplyr::distinct(eventID_L2, .keep_all = TRUE) %>%\n  dplyr::mutate(samplingProtocol = NA,\n                sampleSizeValue = NA,\n                sampleSizeUnit = NA,\n                decimalLatitude = NA,\n                decimalLongitude = NA,\n                geodeticDatum = NA,\n                minimumElevationInMeters = NA,\n                maximumElevationInMeters = NA,\n                verbatimLocality = areas_per_day$location[match(.$eventDate, areas_per_day$eventDate)]) %>%\n  dplyr::rename(\"eventID\" = \"eventID_L2\",\n                \"parentEventID\" = \"eventID_L1\",\n                \"year\" = \"Year\",\n                \"month\" = \"Month\",\n                \"day\" = \"Day\") %>%\n  # Convert dates to characters to avoid merging problems later on\n  dplyr::mutate(eventDate = as.character(eventDate))\n\n\n## 4. Create event file for level 3: bud burst observation on each tree within each year ####\n\n# Connect Tree table to bud burst table and h1\nd_budburst <- d_budburst %>%\n  dplyr::left_join(hierarchical_events %>%\n                     dplyr::select(\"eventID\" = \"eventID_L3\", \"BudburstID\"),\n                   by = \"BudburstID\")\n\n# Create associated event file\nd_events_level3 <-\n  hierarchical_events %>%\n  dplyr::select(\"eventID_L3\", \"eventID_L2\", \"eventDate\", \"Year\", \"Month\", \"Day\", \"TreeID\") %>%\n  dplyr::mutate(samplingProtocol = \"https://doi.org/10.1098/rspb.2000.1363\",\n                sampleSizeValue = 1,\n                sampleSizeUnit = \"tree\",\n                decimalLatitude = d_tree$Latitude[match(.$TreeID, d_tree$TreeID)],\n                decimalLongitude = d_tree$Longitude[match(.$TreeID, d_tree$TreeID)],\n                minimumElevationInMeters = d_tree$Elevation[match(.$TreeID, d_tree$TreeID)],\n                maximumElevationInMeters = minimumElevationInMeters,\n                verbatimLocality = d_budburst$Area[match(.$eventID_L3, d_budburst$eventID)]) %>%\n  dplyr::rename(\"eventID\" = \"eventID_L3\",\n                \"parentEventID\" = \"eventID_L2\",\n                \"year\" = \"Year\",\n                \"month\" = \"Month\",\n                \"day\" = \"Day\") %>%\n  dplyr::select(!\"TreeID\")\n\n# Add geodetic Datum only for events where coordinates are given\nd_events_level3 <-\n  d_events_level3 %>%\n  dplyr::mutate(geodeticDatum = dplyr::case_when(!is.na(decimalLatitude) ~ \"EPSG:4326\",\n                                                 TRUE ~ NA_character_),\n                eventDate = as.character(eventDate))\n\n# Combine all three event files into the final event-core file\nevent <-\n  dplyr::bind_rows(d_events_level1, d_events_level2, d_events_level3) %>%\n  dplyr::arrange(eventDate, eventID)\n\n# Add DwC columns that apply to all event levels\nevent <-\n  event %>%\n  dplyr::mutate(language = \"en\",\n                country = \"Netherlands\",\n                countryCode = \"NL\",\n                institutionID = \"https://ror.org/01g25jp36\",\n                institutionCode = \"NIOO\",\n                type = \"Event\") %>%\n  # Reorder event file according to GBIF list\n  dplyr::select(\"eventID\", \"parentEventID\", \"samplingProtocol\", \"sampleSizeValue\",\n                \"sampleSizeUnit\", \"eventDate\", \"year\", \"month\", \"day\", \"country\",\n                \"countryCode\", \"verbatimLocality\", \"minimumElevationInMeters\",\n                \"maximumElevationInMeters\", \"decimalLatitude\", \"decimalLongitude\",\n                \"geodeticDatum\", \"type\", \"language\", \"institutionID\", \"institutionCode\") %>%\n  # Rename \"Hoge Veluwe\" back to original name\n  dplyr::mutate(verbatimLocality = stringr::str_replace(string = verbatimLocality, pattern = \"_\", replacement = \" \"))\n\n# Save file as text file\nevent_file <- \"/tmp/data/event.csv\"\nwrite.csv(event, file = event_file, row.names = FALSE)\n\n\n# Part III. Create occurrence table ---------------------------------------\n\n# Merge tables to assign tree species to each measurement\ntree_species <-\n  d_tree %>%\n  dplyr::select(\"TreeID\", \"TreeSpeciesID\") %>%\n  #dplyr::select(\"TreeID\", \"TreeSpeciesID\", \"Remarks\") %>%\n  dplyr::left_join(tbl_treeSpecies, by = \"TreeSpeciesID\") %>%\n  dplyr::right_join(d_budburst, by = \"TreeID\")\n\n\n## 1. Get the taxonomic information of all species ####\n\n# Add scientific names to tree table\ntree_species <-\n  tree_species %>%\n  dplyr::mutate(species = dplyr::case_when(TreeSpeciesName == \"European oak\" ~ \"Quercus robur\",\n                                           TreeSpeciesName == \"American oak\" ~ \"Quercus rubra\",\n                                           TreeSpeciesName == \"Larch\" ~ \"Larix kaempferi\",\n                                           TreeSpeciesName == \"Pine\" ~ \"Pinus sylvestris\",\n                                           TreeSpeciesName == \"Birch\" ~ \"Betula pendula\",\n                                           TRUE ~ \"Tracheophyta\"))\n\n# Get all scientific Names to query the taxonomic information in the next step\nsciNames <- unique(tree_species$species)\n\n# Query for all species\ntax <- taxize::get_gbifid_(sci = sciNames) %>%\n  dplyr::bind_rows() %>%\n  dplyr::filter(status == \"ACCEPTED\" & matchtype == \"EXACT\") %>%\n  tidyr::separate(canonicalname, c(\"Genus\", \"specificEpithet\"), remove = FALSE) %>%\n  dplyr::select(\"scientificName\" = \"scientificname\", \"canonicalname\",\n                \"kingdom\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"specificEpithet\")\n\n\n# Bind taxonomic information to each observation\ntree_species_tax <- dplyr::left_join(tree_species,\n                                     tax,\n                                     by = c(\"species\" = \"canonicalname\"))\n\n\n## 2. Create occurrence IDs ####\n\n# Check whether there is any occasion in which more than one tree was sampled at a sampling event\n# (should not be the case here as we know that one measurement is only one tree at a time)\nif(d_budburst %>% dplyr::count(eventID) %>% dplyr::filter(n > 1) %>% nrow() > 0) {\n\n  stop(paste(\"In\", d_budburst %>% dplyr::count(eventID) %>% dplyr::filter(n > 1) %>% nrow(),\n             \"instances of an event, more than one tree was sampled.\",\n             \"This should not be the case for level-3 events.\"))\n\n}\n\n# Create occurrenceID by extending eventID with '_1'\noccID <-\n  d_events_level3 %>%\n  dplyr::arrange(eventDate) %>%\n  dplyr::mutate(occurrenceID = paste(eventID, 1, sep = \"_\"))\n\n# Create occurrence file\noccurrence <-\n  tree_species_tax %>%\n  dplyr::select(\"eventID\", \"Observer\",\n                \"kingdom\", \"phylum\", \"class\", \"order\",\n                \"family\", \"genus\", \"specificEpithet\", \"scientificName\", \"TreeID\") %>%\n  dplyr::mutate(individualCount = 1,\n                basisOfRecord = \"HumanObservation\",\n                occurrenceStatus = \"present\",\n                occurrenceRemarks = NA,\n                recordedByID = Observer,\n                occurrenceID = occID$occurrenceID[match(.$eventID, occID$eventID)]) %>%\n  dplyr::rename(\"organismID\" = \"TreeID\") %>%\n  dplyr::select(\"eventID\", \"occurrenceID\", \"recordedByID\",\n                \"individualCount\", \"basisOfRecord\", \"occurrenceStatus\",\n                \"occurrenceRemarks\", \"organismID\", \"scientificName\", \"kingdom\", \"phylum\", \"class\", \"order\",\n                \"family\", \"genus\", \"specificEpithet\")\n\n# Save file as text file\noccurrence_file <- \"/tmp/data/occurrence.csv\"\nwrite.csv(occurrence, file = occurrence_file, row.names = FALSE)\n\n# Part IV: Create Measurement or fact file --------------------------------\n\n## 1. Create measurement or fact file ####\nmeasurement_or_fact <-\n  tree_species_tax %>%\n  tidyr::pivot_longer(col = c(\"TreeTopScore\", \"TreeAllScore\"),\n                      names_to = \"measurementType\",\n                      values_to = \"measurementValue\")  %>%\n  dplyr::select(\"eventID\", \"measurementType\", \"measurementValue\")%>%\n  dplyr::mutate(measurementUnit = NA,\n                measurementMethod = \"https://doi.org/10.1098/rspb.2000.1363\",\n                measurementRemarks = NA)\n\n## 2. Create measurementID ####\n\n# Number the measurements per occurrence\nmeasurement_or_fact <-\n  measurement_or_fact %>%\n  dplyr::group_by(eventID) %>%\n  dplyr::mutate(\"ID\" = 1:dplyr::n()) %>%\n  dplyr::ungroup()\n\n# Add occurrenceID & create measurementID by extending occurrenceID by number of measurement\nmeasurement_or_fact <-\n  measurement_or_fact %>%\n  dplyr::left_join(occurrence %>%\n                     dplyr::select(\"occurrenceID\", \"eventID\"),\n                   by = \"eventID\") %>%\n  dplyr::mutate(measurementID = paste(occurrenceID, ID, sep = \"_\")) %>%\n  dplyr::select(!c(\"ID\", \"occurrenceID\")) %>%\n  # Rename measurement types to fit more controlled vocabulary\n  dplyr::mutate(measurementType = dplyr::case_when(measurementType == \"TreeTopScore\" ~ \"bud burst stage (PO:0025532) of the tree crown\",\n                                                   measurementType == \"TreeAllScore\" ~ \"bud burst stage (PO:0025532) of the whole tree\")) %>%\n  # Reorder columns according to GBIF list\n  dplyr::select(\"measurementID\", \"eventID\", \"measurementType\", \"measurementValue\",\n                \"measurementUnit\", \"measurementMethod\", \"measurementRemarks\")\n\n# Save file as text file\nextendedmeasurementorfact_file <- \"/tmp/data/extendedmeasurementorfact.csv\"\nwrite.csv(measurement_or_fact, file = extendedmeasurementorfact_file, row.names = FALSE)",
            "metadata": {
              "tags": []
            },
            "execution_count": null,
            "outputs": [],
            "id": "8beea0d4-60c5-45f0-afe1-4a69468ba6c5"
          }
        ]
      },
      "base_image": "qcdis/conda-lter-life:v0.2"
    },
    "p28": {
      "title": "Retrieve KNMI temperature data-cherine-jantzen-at-gmail-com",
      "task_name": "retrieve-knmi-temperature-data-cherine-jantzen-at-gmail-com",
      "original_source": "\ndir.create(\"/tmp/data\")\n\n\n\nretrieve_knmi_edr_data <- function(bbox,\n                                   variable = c(\"mean temperature\", \"max temperature\",\n                                                \"min temperature\", \"precipitation\"),\n                                   start_date,\n                                   start_time = \"00:00:00\",\n                                   end_date,\n                                   end_time = \"23:59:59\",\n                                   knmi_edr_key = param_knmi_edr_api_key) {\n\n  # Create KNMI variable lookup table to match variable inputs to KNMI collection & parameter names\n  knmi_var_lookup <- tibble::tibble(\n    collection = c(\"Tg1\", \"Tx1\", \"Tn1\", \"Rd1\"),\n    parameter = c(\"temperature\", \"temperature\", \"temperature\", \"precipitation\"),\n    var_name = c(\"mean temperature\", \"max temperature\", \"min temperature\", \"precipitation\")\n  )\n\n  if(!(variable %in% knmi_var_lookup$var_name)) {\n\n    stop(\"The weather variable you provided does not exist. Select one of: 'mean temperature', 'max temperature', 'min temperature', or 'precipitation'.\")\n\n  }\n\n  # Check that start_date and end_date are of class 'Date' to ensure that we can retrieve\n  if(!any(class(start_date) == \"Date\", class(end_date) == \"Date\")) {\n\n    stop(\"Please provide dates as 'yyyy-mm-dd'.\")\n\n  }\n\n  repeat({ # If retrieving data from KNMI EDR API fails, try again\n\n    # Send GET request to KNMI EDR API\n    edr_get <- httr::GET(url = paste0(\"https://api.dataplatform.knmi.nl/edr/collections/\",\n                                      knmi_var_lookup |> dplyr::filter(var_name == variable) |> dplyr::pull(\"collection\"),\n                                      \"/cube?bbox=\", paste(bbox, collapse = \"%2C\"),\n                                      \"&z=0\",\n                                      \"&parameter-name=\",\n                                      knmi_var_lookup |> dplyr::filter(var_name == variable) |> dplyr::pull(\"parameter\"),\n                                      \"&datetime=\",\n                                      start_date, \"T\",\n                                      stringr::str_replace_all(string = start_time,\n                                                               pattern = \":\",\n                                                               replacement = \"%3A\"), \"Z%2F\",\n                                      end_date, \"T\",\n                                      stringr::str_replace_all(string = end_time,\n                                                               pattern = \":\",\n                                                               replacement = \"%3A\"), \"Z\"),\n                         httr::add_headers(Authorization = knmi_edr_key))\n\n    # Convert from JSON to R readable format\n    edr_data <- jsonlite::fromJSON(txt = rawToChar(x = edr_get$content))\n\n    # If unsuccessful, print message (and try again)\n    if(is.null(edr_data$domain)) message(paste0(\"KNMI EDR API failed to fulfill request with starting date \",\n                                                start_date, \". Will try again.\"))\n\n    # If successful, end\n    if(!is.null(edr_data$domain)) break()\n\n  })\n\n  # Output\n  return(edr_data)\n\n}\n\n\n\n\nbbox <- c(5.824436777442551, 52.032393019069225, 5.870356194968013, 52.046647934312794)\n\ntemp <- purrr::map(.x = 1988:2023,\n                        .f = ~{\n\n                          # Retrieve data for period 1 (1 Dec to 1 March)\n                          period1 <- retrieve_knmi_edr_data(bbox = bbox,\n                                                            variable = \"mean temperature\",\n                                                            start_date = lubridate::make_date(.x - 1, 12, 1),\n                                                            start_time = \"00:00:00\",\n                                                            end_date = lubridate::make_date(.x, 3, 1),\n                                                            end_time = \"23:59:59\")\n\n                          # Retrieve data for period 2 (2 March to 31 May)\n                          period2 <- retrieve_knmi_edr_data(bbox = bbox,\n                                                            variable = \"mean temperature\",\n                                                            start_date = lubridate::make_date(.x, 3, 2),\n                                                            start_time = \"00:00:00\",\n                                                            end_date = lubridate::make_date(.x, 5, 31),\n                                                            end_time = \"23:59:59\")\n\n                          # Match temperature data to dates and coordinates\n                          data1 <- tidyr::expand_grid(date = period1$domain$axes$t$values,\n                                                      y = period1$domain$axes$y$values,\n                                                      x = period1$domain$axes$x$values) |>\n                            dplyr::mutate(temperature = period1$ranges$temperature$values)\n\n                          data2 <- tidyr::expand_grid(date = period2$domain$axes$t$values,\n                                                      y = period2$domain$axes$y$values,\n                                                      x = period2$domain$axes$x$values) |>\n                            dplyr::mutate(temperature = period2$ranges$temperature$values)\n\n                          # Bind output of two periods\n                          data <- dplyr::bind_rows(data1, data2)\n\n                          return(data)\n\n                        },\n                        .progress = TRUE) |>\n  purrr::list_c()\n\n\ntemperature_file <- \"/tmp/data/Tg1_seasonalTemperature_Dec1987_to_June2023.csv\"\nwrite.csv(temp, temperature_file, row.names = FALSE)",
      "types": {
        "temperature_file": "str",
        "param_knmi_edr_api_key": "str"
      },
      "inputs": [],
      "outputs": [
        "temperature_file"
      ],
      "params": [
        "param_knmi_edr_api_key"
      ],
      "param_values": {
        "param_knmi_edr_api_key": ""
      },
      "confs": {},
      "all_inputs": [],
      "dependencies": [
        {
          "name": "dplyr",
          "asname": null,
          "module": ""
        },
        {
          "name": "httr",
          "asname": null,
          "module": ""
        },
        {
          "name": "jsonlite",
          "asname": null,
          "module": ""
        },
        {
          "name": "lubridate",
          "asname": null,
          "module": ""
        },
        {
          "name": "purrr",
          "asname": null,
          "module": ""
        },
        {
          "name": "readr",
          "asname": null,
          "module": ""
        },
        {
          "name": "stringr",
          "asname": null,
          "module": ""
        },
        {
          "name": "tidyr",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "f5f54a3": {
            "id": "f5f54a3",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "Retrieve KNMI temperature data-cherine-jantzen-at-gmail-com",
              "vars": [
                {
                  "name": "temperature_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#2d3a86"
                }
              ],
              "params": [
                "param_knmi_edr_api_key"
              ],
              "inputs": [],
              "outputs": [
                "temperature_file"
              ],
              "og_node_id": "f5f54a3",
              "deps": [
                ""
              ]
            },
            "ports": {
              "temperature_file": {
                "properties": {
                  "color": "#2d3a86"
                },
                "id": "temperature_file",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "f5f54a3",
      "container_source": "",
      "kernel": "IRkernel",
      "notebook_dict": {
        "metadata": {
          "toc-autonumbering": true,
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "kernelspec": {
            "display_name": "R",
            "language": "R",
            "name": "R"
          },
          "language_info": {
            "codemirror_mode": "r",
            "file_extension": ".r",
            "mimetype": "text/x-r-source",
            "name": "R",
            "pygments_lexer": "r",
            "version": "4.3.2"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# Retrieve KNMI temperature data\n# ---\n# NaaVRE:\n#  cell:\n#   params:\n#    - param_knmi_edr_api_key:\n#       type: String\n#       default_value: ''\n#   outputs:\n#    - temperature_file: String\n#   dependencies:\n#    - name: dplyr\n#    - name: purrr\n#    - name: stringr\n#    - name: httr\n#    - name: jsonlite\n#    - name: readr\n#    - name: lubridate\n#    - name: tidyr\n# ...\n\ndir.create(\"/tmp/data\")\n\n# I. Function to retrieve data from the EDR API ------------------------------\n\n# Arguments:\n# bbox: spatial bounding box for which to retrieve data. Vector of four numeric values, indicating western-most, southern-most, eastern-most and northern-most point of the bounding box (in decimal degrees).\n# variable: weather variable of interest. Either \"mean temperature\", \"max temperature\", \"min temperature\" or \"precipitation\".\n# start_date: start date of period for which to retrieve data. Date format \"yyyy-mm-dd\". Use e.g., `lubridate::make_date()`.\n# start_time: start time of period for which to retrieve data. Character string of format \"hh:mm:ss\". Default: \"00:00:00\".\n# end_date: end date of period for which to retrieve data. Date format \"yyyy-mm-dd\". Use e.g., `lubridate::make_date()`.\n# end_time: end time of period for which to retrieve data. Character string of format \"hh:mm:ss\". Default: \"23:59:59\".\n# knmi_edr_key: user-specific KNMI EDR API key (request here: https://developer.dataplatform.knmi.nl/edr-api#token). Character string.\n\nretrieve_knmi_edr_data <- function(bbox,\n                                   variable = c(\"mean temperature\", \"max temperature\",\n                                                \"min temperature\", \"precipitation\"),\n                                   start_date,\n                                   start_time = \"00:00:00\",\n                                   end_date,\n                                   end_time = \"23:59:59\",\n                                   knmi_edr_key = param_knmi_edr_api_key) {\n\n  # Create KNMI variable lookup table to match variable inputs to KNMI collection & parameter names\n  knmi_var_lookup <- tibble::tibble(\n    collection = c(\"Tg1\", \"Tx1\", \"Tn1\", \"Rd1\"),\n    parameter = c(\"temperature\", \"temperature\", \"temperature\", \"precipitation\"),\n    var_name = c(\"mean temperature\", \"max temperature\", \"min temperature\", \"precipitation\")\n  )\n\n  if(!(variable %in% knmi_var_lookup$var_name)) {\n\n    stop(\"The weather variable you provided does not exist. Select one of: 'mean temperature', 'max temperature', 'min temperature', or 'precipitation'.\")\n\n  }\n\n  # Check that start_date and end_date are of class 'Date' to ensure that we can retrieve\n  if(!any(class(start_date) == \"Date\", class(end_date) == \"Date\")) {\n\n    stop(\"Please provide dates as 'yyyy-mm-dd'.\")\n\n  }\n\n  repeat({ # If retrieving data from KNMI EDR API fails, try again\n\n    # Send GET request to KNMI EDR API\n    edr_get <- httr::GET(url = paste0(\"https://api.dataplatform.knmi.nl/edr/collections/\",\n                                      knmi_var_lookup |> dplyr::filter(var_name == variable) |> dplyr::pull(\"collection\"),\n                                      \"/cube?bbox=\", paste(bbox, collapse = \"%2C\"),\n                                      \"&z=0\",\n                                      \"&parameter-name=\",\n                                      knmi_var_lookup |> dplyr::filter(var_name == variable) |> dplyr::pull(\"parameter\"),\n                                      \"&datetime=\",\n                                      start_date, \"T\",\n                                      stringr::str_replace_all(string = start_time,\n                                                               pattern = \":\",\n                                                               replacement = \"%3A\"), \"Z%2F\",\n                                      end_date, \"T\",\n                                      stringr::str_replace_all(string = end_time,\n                                                               pattern = \":\",\n                                                               replacement = \"%3A\"), \"Z\"),\n                         httr::add_headers(Authorization = knmi_edr_key))\n\n    # Convert from JSON to R readable format\n    edr_data <- jsonlite::fromJSON(txt = rawToChar(x = edr_get$content))\n\n    # If unsuccessful, print message (and try again)\n    if(is.null(edr_data$domain)) message(paste0(\"KNMI EDR API failed to fulfill request with starting date \",\n                                                start_date, \". Will try again.\"))\n\n    # If successful, end\n    if(!is.null(edr_data$domain)) break()\n\n  })\n\n  # Output\n  return(edr_data)\n\n}\n\n\n\n# II. Get temperature data for desired spatiotemporal parameters ---------\n\n# Define bounding box for Veluwe site\nbbox <- c(5.824436777442551, 52.032393019069225, 5.870356194968013, 52.046647934312794)\n\n# Retrieve data for 1988 to 2023\ntemp <- purrr::map(.x = 1988:2023,\n                        .f = ~{\n\n                          # Retrieve data for period 1 (1 Dec to 1 March)\n                          period1 <- retrieve_knmi_edr_data(bbox = bbox,\n                                                            variable = \"mean temperature\",\n                                                            start_date = lubridate::make_date(.x - 1, 12, 1),\n                                                            start_time = \"00:00:00\",\n                                                            end_date = lubridate::make_date(.x, 3, 1),\n                                                            end_time = \"23:59:59\")\n\n                          # Retrieve data for period 2 (2 March to 31 May)\n                          period2 <- retrieve_knmi_edr_data(bbox = bbox,\n                                                            variable = \"mean temperature\",\n                                                            start_date = lubridate::make_date(.x, 3, 2),\n                                                            start_time = \"00:00:00\",\n                                                            end_date = lubridate::make_date(.x, 5, 31),\n                                                            end_time = \"23:59:59\")\n\n                          # Match temperature data to dates and coordinates\n                          data1 <- tidyr::expand_grid(date = period1$domain$axes$t$values,\n                                                      y = period1$domain$axes$y$values,\n                                                      x = period1$domain$axes$x$values) |>\n                            dplyr::mutate(temperature = period1$ranges$temperature$values)\n\n                          data2 <- tidyr::expand_grid(date = period2$domain$axes$t$values,\n                                                      y = period2$domain$axes$y$values,\n                                                      x = period2$domain$axes$x$values) |>\n                            dplyr::mutate(temperature = period2$ranges$temperature$values)\n\n                          # Bind output of two periods\n                          data <- dplyr::bind_rows(data1, data2)\n\n                          return(data)\n\n                        },\n                        .progress = TRUE) |>\n  purrr::list_c()\n\n\n# save temperature data\ntemperature_file <- \"/tmp/data/Tg1_seasonalTemperature_Dec1987_to_June2023.csv\"\nwrite.csv(temp, temperature_file, row.names = FALSE)",
            "metadata": {},
            "execution_count": null,
            "outputs": [],
            "id": "4bffba47-323c-43a8-a1df-9f2124745bea"
          }
        ]
      },
      "base_image": "qcdis/conda-lter-life:v0.2"
    },
    "p30": {
      "title": "Find climate window-cherine-jantzen-at-gmail-com",
      "task_name": "find-climate-window-cherine-jantzen-at-gmail-com",
      "original_source": "\n\ntemp <- read.csv(temp_climwin_input_file)\n\navg_annual_budburst_dates <- read.csv(budburst_climwin_input_file)\n\n\n\n\ntemp <- temp %>%\n  dplyr::mutate(date = lubridate::as_date(date),\n                year = lubridate::year(date),\n                month = lubridate::month(date),\n                day = lubridate::day(date),\n                doy = lubridate::yday(date),\n                # Create dummy for filtering window later. Format: 312 = March 12, 401 = April 1\n                dummy = month * 100 + day,\n                factor_date = as.factor(paste(day, month, year, sep = \"/\")))\n\navg_annual_budburst_dates <- avg_annual_budburst_dates %>%\n  dplyr::mutate(date_info = paste(year, floor(avg_bud_burst_DOY)),\n                date = strptime(date_info, \"%Y %j\"),\n                date = as.factor(format(as.Date(date), \"%d/%m/%Y\"))) %>%\n  # Create numeric dates to be used in the baseline model &\n  # and exclude trees without coordinates\n  dplyr::mutate(DOY = lubridate::yday(as.Date(avg_bud_burst_date))) |>\n  dplyr::filter(!is.na(date), !is.na(locID))\n\n\n\n\n\n\n\nfind_climate_window <- function(biological_data = NULL,\n                                climate_data,\n                                range,\n                                reference_day,\n                                window_number = c(\"first\", \"second\"),\n                                first_window = NULL) {\n\n  # Find 'first' or 'second' climate window\n  if(window_number == \"first\") {\n\n    # Return error if biological data is not provided when searching for first window\n    if(is.null(biological_data)) {\n\n      stop(\"If you want to find a first climate window, provide the biological data as `biological_data`.\")\n\n    }\n\n    # Define baseline model\n    baseline <- lm(DOY ~ year, data = biological_data)\n\n  } else if(window_number == \"second\") {\n\n    # Return error if first window output is not provided when searching for second window\n    if(is.null(first_window)) {\n\n      stop(\"If you want to find a second climate window, provide the output of the first iteration of `find_climate_window()` as `first_window`.\")\n\n    }\n\n    biological_data <- first_window$biological_data\n\n    # The first window is added as an explanatory variable to the baseline model\n    baseline_data <- first_window$best_window[[1]]$BestModelData %>%\n      dplyr::rename(\"first_window\" = \"climate\",\n                    \"DOY\" = \"yvar\")\n\n    # Define baseline model\n    baseline <- lm(DOY ~ year + first_window, data = baseline_data)\n\n  }\n\n  # climwin analysis: Find best window\n  best_window <- climwin::slidingwin(baseline = baseline,\n                                     xvar = list(Temp = climate_data$temperature),\n                                     cdate = climate_data$factor_date,\n                                     bdate = biological_data$date,\n                                     type = \"absolute\",\n                                     refday = reference_day,\n                                     spatial = list(biological_data$locID, climate_data$locID),\n                                     range = range,\n                                     func = \"lin\",\n                                     stat = \"mean\")\n\n  # Back calculation of the opening and closing day of the calculated window to calender dates\n\n  # Create a reference year for calculation of start and end date\n  # Note: can be any year that is not a leap year, as dates should be calculated on the basis of regular years\n  reference_year <- dplyr::if_else(condition = lubridate::leap_year(max(climate_data$year)),\n                                   true = max(climate_data$year) - 1,\n                                   false = max(climate_data$year))\n\n  # Calculate calender date when window opens\n  start_date <- lubridate::make_date(year = reference_year,\n                                     month = reference_day[2],\n                                     day = reference_day[1]) - best_window$combos[1,]$WindowOpen\n\n  # Calculate calender date when window closes\n  end_date <- lubridate::make_date(year = reference_year,\n                                   month = reference_day[2],\n                                   day = reference_day[1]) - best_window$combos[1,]$WindowClose\n\n  return(tibble::lst(best_window, biological_data, baseline, range, reference_day, climate_data, start_date, end_date))\n\n}\n\n\nfirst_window_Qrobur <- find_climate_window(biological_data = avg_annual_budburst_dates %>%\n                                             dplyr::filter(stringr::str_detect(scientificName, \"Quercus robur\")),\n                                           climate_data = temp,\n                                           window_number = \"first\",\n                                           reference_day = c(31, 5),\n                                           range = c(181, 0))\n\nfirst_window_Qrobur$start_date\nfirst_window_Qrobur$end_date\n\nfirstWindow_file <- \"/tmp/data/climwin_outputs_Qrobur.rda\"\nsave(first_window_Qrobur, file = firstWindow_file)",
      "types": {
        "budburst_climwin_input_file": "str",
        "temp_climwin_input_file": "str",
        "firstWindow_file": "str"
      },
      "inputs": [
        "budburst_climwin_input_file",
        "temp_climwin_input_file"
      ],
      "outputs": [
        "firstWindow_file"
      ],
      "params": [],
      "param_values": {},
      "confs": {},
      "all_inputs": [
        "budburst_climwin_input_file",
        "temp_climwin_input_file"
      ],
      "dependencies": [
        {
          "name": "climwin",
          "asname": null,
          "module": ""
        },
        {
          "name": "dplyr",
          "asname": null,
          "module": ""
        },
        {
          "name": "lubridate",
          "asname": null,
          "module": ""
        },
        {
          "name": "stringr",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "e0119c5": {
            "id": "e0119c5",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "Find climate window-cherine-jantzen-at-gmail-com",
              "vars": [
                {
                  "name": "budburst_climwin_input_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#e08b6c"
                },
                {
                  "name": "temp_climwin_input_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#97ac53"
                },
                {
                  "name": "firstWindow_file",
                  "direction": "output",
                  "type": "datatype",
                  "color": "#931f1f"
                }
              ],
              "params": [],
              "inputs": [
                "budburst_climwin_input_file",
                "temp_climwin_input_file"
              ],
              "outputs": [
                "firstWindow_file"
              ],
              "og_node_id": "e0119c5",
              "deps": [
                ""
              ]
            },
            "ports": {
              "budburst_climwin_input_file": {
                "properties": {
                  "color": "#e08b6c"
                },
                "id": "budburst_climwin_input_file",
                "type": "left"
              },
              "temp_climwin_input_file": {
                "properties": {
                  "color": "#97ac53"
                },
                "id": "temp_climwin_input_file",
                "type": "left"
              },
              "firstWindow_file": {
                "properties": {
                  "color": "#931f1f"
                },
                "id": "firstWindow_file",
                "type": "right"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "e0119c5",
      "container_source": "",
      "kernel": "IRkernel",
      "notebook_dict": {
        "metadata": {
          "toc-autonumbering": true,
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "kernelspec": {
            "display_name": "R",
            "language": "R",
            "name": "R"
          },
          "language_info": {
            "codemirror_mode": "r",
            "file_extension": ".r",
            "mimetype": "text/x-r-source",
            "name": "R",
            "pygments_lexer": "r",
            "version": "4.3.2"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# Find climate window\n# ---\n# NaaVRE:\n#  cell:\n#   inputs:\n#    - budburst_climwin_input_file: String\n#    - temp_climwin_input_file: String\n#   dependencies:\n#    - name: dplyr\n#    - name: stringr\n#    - name: lubridate\n#    - name: climwin\n#   outputs:\n#    - firstWindow_file: String\n# ...\n\n# I. Retrieve data & load packages ----------------------------------------\n\n# Retrieve temperature data and bud burst data\ntemp <- read.csv(temp_climwin_input_file)\n\navg_annual_budburst_dates <- read.csv(budburst_climwin_input_file)\n\n\n# II. Date conversion to fit climwin  -------------------------------------\n\n# climwin can only handle dates in the format \"dd/mm/yyyy\" (as a character), so dates\n# have to be converted before modelling. However, there need to be numeric dates for the baseline models too.\n\n# Convert dates of temperature file to climwin format\ntemp <- temp %>%\n  dplyr::mutate(date = lubridate::as_date(date),\n                year = lubridate::year(date),\n                month = lubridate::month(date),\n                day = lubridate::day(date),\n                doy = lubridate::yday(date),\n                # Create dummy for filtering window later. Format: 312 = March 12, 401 = April 1\n                dummy = month * 100 + day,\n                factor_date = as.factor(paste(day, month, year, sep = \"/\")))\n\n# Convert bud burst dates\navg_annual_budburst_dates <- avg_annual_budburst_dates %>%\n  dplyr::mutate(date_info = paste(year, floor(avg_bud_burst_DOY)),\n                date = strptime(date_info, \"%Y %j\"),\n                date = as.factor(format(as.Date(date), \"%d/%m/%Y\"))) %>%\n  # Create numeric dates to be used in the baseline model &\n  # and exclude trees without coordinates\n  dplyr::mutate(DOY = lubridate::yday(as.Date(avg_bud_burst_date))) |>\n  dplyr::filter(!is.na(date), !is.na(locID))\n\n\n\n\n# III. Climwin: Sliding window model --------------------------------------------\n\n## 1. Function to calculate the window in which bud burst data is best explained by temperature ####\n\n# Arguments\n# - biological_data: Tibble specifying the biological input data for the climate model, containing biological dates that are tested in format 'dd/mm/yyyy'. Only necessary when the first window is calculated.\n# - climate_data: Tibble specifying the climate data that is used as input for the climate model. \n# - reference_day: Numeric vector of 2 values specifying the day and month of the reference day before which climate windows are tested. For example, c(31, 5) for the 31st of March.\n# - range: Numeric vector of 2 values specifying the range of days before the reference day in which climate windows are tested. For example, c(181, 0), meaning that windows between 181 days and 0 days before the reference day are tested.\n# - window_number: Choice between \"first\" and \"second\", specifies whether the first best window should be calculated or a second window based on the first one.\n# - first_window: Tibble containing the best model data of the first window/iteration of the function. Used as input data when second window should be calculated.\n\nfind_climate_window <- function(biological_data = NULL,\n                                climate_data,\n                                range,\n                                reference_day,\n                                window_number = c(\"first\", \"second\"),\n                                first_window = NULL) {\n\n  # Find 'first' or 'second' climate window\n  if(window_number == \"first\") {\n\n    # Return error if biological data is not provided when searching for first window\n    if(is.null(biological_data)) {\n\n      stop(\"If you want to find a first climate window, provide the biological data as `biological_data`.\")\n\n    }\n\n    # Define baseline model\n    baseline <- lm(DOY ~ year, data = biological_data)\n\n  } else if(window_number == \"second\") {\n\n    # Return error if first window output is not provided when searching for second window\n    if(is.null(first_window)) {\n\n      stop(\"If you want to find a second climate window, provide the output of the first iteration of `find_climate_window()` as `first_window`.\")\n\n    }\n\n    biological_data <- first_window$biological_data\n\n    # The first window is added as an explanatory variable to the baseline model\n    baseline_data <- first_window$best_window[[1]]$BestModelData %>%\n      dplyr::rename(\"first_window\" = \"climate\",\n                    \"DOY\" = \"yvar\")\n\n    # Define baseline model\n    baseline <- lm(DOY ~ year + first_window, data = baseline_data)\n\n  }\n\n  # climwin analysis: Find best window\n  best_window <- climwin::slidingwin(baseline = baseline,\n                                     xvar = list(Temp = climate_data$temperature),\n                                     cdate = climate_data$factor_date,\n                                     bdate = biological_data$date,\n                                     type = \"absolute\",\n                                     refday = reference_day,\n                                     spatial = list(biological_data$locID, climate_data$locID),\n                                     range = range,\n                                     func = \"lin\",\n                                     stat = \"mean\")\n\n  # Back calculation of the opening and closing day of the calculated window to calender dates\n\n  # Create a reference year for calculation of start and end date\n  # Note: can be any year that is not a leap year, as dates should be calculated on the basis of regular years\n  reference_year <- dplyr::if_else(condition = lubridate::leap_year(max(climate_data$year)),\n                                   true = max(climate_data$year) - 1,\n                                   false = max(climate_data$year))\n\n  # Calculate calender date when window opens\n  start_date <- lubridate::make_date(year = reference_year,\n                                     month = reference_day[2],\n                                     day = reference_day[1]) - best_window$combos[1,]$WindowOpen\n\n  # Calculate calender date when window closes\n  end_date <- lubridate::make_date(year = reference_year,\n                                   month = reference_day[2],\n                                   day = reference_day[1]) - best_window$combos[1,]$WindowClose\n\n  return(tibble::lst(best_window, biological_data, baseline, range, reference_day, climate_data, start_date, end_date))\n\n}\n\n\n## 2. Calculate windows for each species of interest ####\nfirst_window_Qrobur <- find_climate_window(biological_data = avg_annual_budburst_dates %>%\n                                             dplyr::filter(stringr::str_detect(scientificName, \"Quercus robur\")),\n                                           climate_data = temp,\n                                           window_number = \"first\",\n                                           reference_day = c(31, 5),\n                                           range = c(181, 0))\n\n# show start and end date\nfirst_window_Qrobur$start_date\nfirst_window_Qrobur$end_date\n\n# save model output \nfirstWindow_file <- \"/tmp/data/climwin_outputs_Qrobur.rda\"\nsave(first_window_Qrobur, file = firstWindow_file)",
            "metadata": {},
            "execution_count": null,
            "outputs": [],
            "id": "dc6dc47b-de20-44a8-8ad9-58cb8a35fde7"
          }
        ]
      },
      "base_image": "qcdis/conda-lter-life:v0.2"
    },
    "p31": {
      "title": "Plot climate window output-cherine-jantzen-at-gmail-com",
      "task_name": "plot-climate-window-output-cherine-jantzen-at-gmail-com",
      "original_source": "\n\nload(firstWindow_file)\n\n\n\ncolour_pal <- c(\"#48d3d3\", \"#FC8D59\", \"#D53E4F\", \"#FFD560\", \"#3288BD\")\n\n\n\nplot_climwin_output <- function(x){\n\n  # create a heat map of model delta AICc values\n  AIC_heatmap <- climwin::plotdelta(dataset = x$best_window[[1]]$Dataset,\n                                    arrow = TRUE) +\n    ggplot2::theme_classic() +\n    ggplot2::theme(axis.title.x = element_text(size = 15),\n                   axis.title.y = element_text(size = 15),\n                   axis.text.x = element_text(size = 15),\n                   axis.text.y = element_text(size = 15),\n                   title = element_text(size = 16),\n                   legend.position = \"bottom\")\n\n  # get annual mean temperatures of the best window\n  mean_temp_in_window <- x$climate_data %>%\n    dplyr::filter(dummy > (lubridate::month(x$start_date) * 100 + lubridate::day(x$start_date)) &\n                    dummy < (lubridate::month(x$end_date) * 100 + lubridate::day(x$end_date))) %>%\n    dplyr::summarise(mean_temp = mean(temperature, na.rm = TRUE),\n                     .by = c(\"year\", \"locID\"))\n\n  # add mean temperatures to annual bud burst data\n  annual_budburst_and_temp <- dplyr::left_join(x$biological_data,\n                                               mean_temp_in_window %>%\n                                                 dplyr::select(\"year\", \"mean_temp\", \"locID\"),\n                                               by = c(\"year\", \"locID\"))\n\n  # plot annual mean temperatures of the best window against annual average bud burst dates\n  plot_budburst_temperature<-  ggplot2::ggplot(data = annual_budburst_and_temp,\n                                               mapping = aes(x = mean_temp, y = avg_bud_burst_DOY, colour = locID)) +\n    ggplot2::geom_point(size = 2, alpha = 0.4) +\n    ggplot2::geom_smooth(method = \"lm\", formula = y ~ x, se = FALSE) +\n    ggplot2::theme_classic() +\n    ggplot2::scale_colour_manual(values = colour_pal) +\n    ggplot2::labs(title = \"Bud burst date ~ mean temperature in best window\",\n                  x = \"Annual mean temperature [°C]\",\n                  y = \"Annual mean bud burst date\",\n                  colour = \"Location (grid cell)\") +\n    ggplot2::theme(title = element_text(size = 16),\n                   axis.title.x = element_text(size = 15),\n                   axis.title.y = element_text(size = 15),\n                   legend.title = element_text(size = 15),\n                   axis.text.x = element_text(size = 15),\n                   axis.text.y = element_text(size = 15),\n                   legend.text = element_text(size = 13),\n                   legend.position = \"bottom\")\n\n  # arrange both plots in one figure\n  ggpubr::ggarrange(AIC_heatmap,  plot_budburst_temperature, align = \"hv\")\n\n}\n\n\nFig_Qrobur <- plot_climwin_output(first_window_Qrobur)\nFig_Qrobur",
      "types": {
        "firstWindow_file": "str"
      },
      "inputs": [
        "firstWindow_file"
      ],
      "outputs": [],
      "params": [],
      "param_values": {},
      "confs": {},
      "all_inputs": [
        "firstWindow_file"
      ],
      "dependencies": [
        {
          "name": "climwin",
          "asname": null,
          "module": ""
        },
        {
          "name": "dplyr",
          "asname": null,
          "module": ""
        },
        {
          "name": "ggpubr",
          "asname": null,
          "module": ""
        },
        {
          "name": "lubridate",
          "asname": null,
          "module": ""
        },
        {
          "name": "purrr",
          "asname": null,
          "module": ""
        },
        {
          "name": "stringr",
          "asname": null,
          "module": ""
        }
      ],
      "chart_obj": {
        "offset": {
          "x": 0,
          "y": 0
        },
        "scale": 1,
        "nodes": {
          "cec525a": {
            "id": "cec525a",
            "type": "input-output",
            "position": {
              "x": 35,
              "y": 15
            },
            "properties": {
              "title": "Plot climate window output-cherine-jantzen-at-gmail-com",
              "vars": [
                {
                  "name": "firstWindow_file",
                  "direction": "input",
                  "type": "datatype",
                  "color": "#931f1f"
                }
              ],
              "params": [],
              "inputs": [
                "firstWindow_file"
              ],
              "outputs": [],
              "og_node_id": "cec525a",
              "deps": [
                ""
              ]
            },
            "ports": {
              "firstWindow_file": {
                "properties": {
                  "color": "#931f1f"
                },
                "id": "firstWindow_file",
                "type": "left"
              }
            }
          }
        },
        "links": {},
        "selected": {},
        "hovered": {}
      },
      "node_id": "cec525a",
      "container_source": "",
      "kernel": "IRkernel",
      "notebook_dict": {
        "metadata": {
          "toc-autonumbering": true,
          "toc-showcode": true,
          "toc-showmarkdowntxt": true,
          "kernelspec": {
            "display_name": "R",
            "language": "R",
            "name": "R"
          },
          "language_info": {
            "codemirror_mode": "r",
            "file_extension": ".r",
            "mimetype": "text/x-r-source",
            "name": "R",
            "pygments_lexer": "r",
            "version": "4.3.2"
          }
        },
        "nbformat_minor": 5,
        "nbformat": 4,
        "cells": [
          {
            "cell_type": "code",
            "source": "# Plot climate window output\n# ---\n# NaaVRE:\n#  cell:\n#   inputs:\n#    - firstWindow_file: String\n#   dependencies:\n#    - name: dplyr\n#    - name: purrr\n#    - name: stringr\n#    - name: lubridate\n#    - name: climwin\n#    - name: ggpubr\n# ...\n\n\n# Load model output data \nload(firstWindow_file)\n\n# II. Visualize output of climwin -----------------------------------------\n\n## 1. Function to create two plots for the output of the climwin model ####\n# Arguments\n# - x: Output list of function \"find_climate_window()\".\n\ncolour_pal <- c(\"#48d3d3\", \"#FC8D59\", \"#D53E4F\", \"#FFD560\", \"#3288BD\")\n\n# II. Visualize output of climwin -----------------------------------------\n\n## 1. Function to create two plots for the output of the climwin model ####\n# Arguments\n# - x: Output list of function \"find_climate_window()\".\n\nplot_climwin_output <- function(x){\n\n  # create a heat map of model delta AICc values\n  AIC_heatmap <- climwin::plotdelta(dataset = x$best_window[[1]]$Dataset,\n                                    arrow = TRUE) +\n    ggplot2::theme_classic() +\n    ggplot2::theme(axis.title.x = element_text(size = 15),\n                   axis.title.y = element_text(size = 15),\n                   axis.text.x = element_text(size = 15),\n                   axis.text.y = element_text(size = 15),\n                   title = element_text(size = 16),\n                   legend.position = \"bottom\")\n\n  # get annual mean temperatures of the best window\n  mean_temp_in_window <- x$climate_data %>%\n    dplyr::filter(dummy > (lubridate::month(x$start_date) * 100 + lubridate::day(x$start_date)) &\n                    dummy < (lubridate::month(x$end_date) * 100 + lubridate::day(x$end_date))) %>%\n    dplyr::summarise(mean_temp = mean(temperature, na.rm = TRUE),\n                     .by = c(\"year\", \"locID\"))\n\n  # add mean temperatures to annual bud burst data\n  annual_budburst_and_temp <- dplyr::left_join(x$biological_data,\n                                               mean_temp_in_window %>%\n                                                 dplyr::select(\"year\", \"mean_temp\", \"locID\"),\n                                               by = c(\"year\", \"locID\"))\n\n  # plot annual mean temperatures of the best window against annual average bud burst dates\n  plot_budburst_temperature<-  ggplot2::ggplot(data = annual_budburst_and_temp,\n                                               mapping = aes(x = mean_temp, y = avg_bud_burst_DOY, colour = locID)) +\n    ggplot2::geom_point(size = 2, alpha = 0.4) +\n    ggplot2::geom_smooth(method = \"lm\", formula = y ~ x, se = FALSE) +\n    ggplot2::theme_classic() +\n    ggplot2::scale_colour_manual(values = colour_pal) +\n    ggplot2::labs(title = \"Bud burst date ~ mean temperature in best window\",\n                  x = \"Annual mean temperature [°C]\",\n                  y = \"Annual mean bud burst date\",\n                  colour = \"Location (grid cell)\") +\n    ggplot2::theme(title = element_text(size = 16),\n                   axis.title.x = element_text(size = 15),\n                   axis.title.y = element_text(size = 15),\n                   legend.title = element_text(size = 15),\n                   axis.text.x = element_text(size = 15),\n                   axis.text.y = element_text(size = 15),\n                   legend.text = element_text(size = 13),\n                   legend.position = \"bottom\")\n\n  # arrange both plots in one figure\n  ggpubr::ggarrange(AIC_heatmap,  plot_budburst_temperature, align = \"hv\")\n\n}\n\n## 2. Call function and create plots ####\n\nFig_Qrobur <- plot_climwin_output(first_window_Qrobur)\nFig_Qrobur",
            "metadata": {},
            "execution_count": null,
            "outputs": [],
            "id": "5346bbb8-8c3b-4437-916a-e1cc6072152e"
          }
        ]
      },
      "base_image": "qcdis/conda-lter-life:v0.2"
    }
  }
}
